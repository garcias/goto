<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python Bytes [Early History]</title><itunes:subtitle>Developer headlines delivered directly to your earbuds</itunes:subtitle><itunes:summary>Python Bytes is a weekly podcast hosted by Michael Kennedy and
            Brian Okken. The show is a short discussion on the headlines and noteworthy news
            in the Python, developer, and data science space.</itunes:summary><description>Python Bytes is a weekly podcast hosted by Michael Kennedy and
            Brian Okken. The show is a short discussion on the headlines and noteworthy news
            in the Python, developer, and data science space.</description><link>https://pythonbytes.fm/</link><language>en-us</language><copyright>Copyright 2016-2020</copyright><lastBuildDate>Wed, 23 Dec 2020 00:00:00 -0800</lastBuildDate><pubDate>Wed, 23 Dec 2020 00:00:00 -0800</pubDate><docs>https://pythonbytes.fm</docs><webMaster>michael@talkpython.fm (Michael Kennedy)</webMaster><ttl>60</ttl><itunes:author>Michael Kennedy and Brian Okken</itunes:author><itunes:owner><itunes:name>Michael Kennedy</itunes:name><itunes:email>mikeckennedy@gmail.com</itunes:email></itunes:owner><itunes:explicit>No</itunes:explicit><itunes:image href="http://pythonbytes.fm/static/img/podcast-theme-img_1400.png"></itunes:image><itunes:category text="Technology"></itunes:category><atom:link href="https://pythonbytes.fm/episodes/rss" rel="self" type="application/rss+xml"></atom:link><item><title>#21 Python has a new star framework for RESTful APIs</title><link>https://pythonbytes.fm/episodes/show/21/python-has-a-new-star-framework-for-restful-apis</link><guid>https://pythonbytes.fm/episodes/download/21/python-has-a-new-star-framework-for-restful-apis.mp3</guid><enclosure url="https://pythonbytes.fm/episodes/download/21/python-has-a-new-star-framework-for-restful-apis.mp3" length="20249840" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 13 Apr 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Python has a new star framework for RESTful APIs</itunes:title><itunes:episode>21</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:20:57</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;This episode has been &lt;strong&gt;sponsored by Rollbar&lt;/strong&gt;. Get a special offer via &lt;a href="http://rollbar.com/pythonbytes"&gt;http://rollbar.com/pythonbytes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#1 Brian:&lt;/strong&gt; &lt;a href="https://pymotw.com/3/profile/"&gt;&lt;strong&gt;profile and pstats — Performance Analysis&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Doug Hellman is working on the Python 3 MOTW series that was so successful for Python 2.&lt;/li&gt;
&lt;li&gt;Recent edition is profile and pstats, for profiling parts of your code you may have concerns with and finding out where the slow bits are.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#2 Michael:&lt;/strong&gt; &lt;a href="https://github.com/tomchristie/apistar"&gt;&lt;strong&gt;API Star by Tom Christie&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A smart Web API framework, designed for Python 3.&lt;/li&gt;
&lt;li&gt;A few things to try right away:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    $ pip3 install apistar
    $ apistar new --template minimal
    $ apistar run
    $ apistar test
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;API Star allows you to dynamically inject various information about the incoming request into your views using type annotation.
&lt;ul&gt;
&lt;li&gt;e.g. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    def show_query_params(query_params: http.QueryParams):
        return {
            'params': dict(query_params)
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;You can instead set the status code or headers by annotating the view as returning a Response&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;def create_project() -&amp;gt; Response: ...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Parameters are automatically passed into views from routes (annotations!):&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    def echo_username(user_id: int):
        return {'message': f'Welcome, user {user_id}!'}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Performance: Faster than sanic!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#3 Brian:&lt;/strong&gt; &lt;a href="https://hackernoon.com/yes-python-is-slow-and-i-dont-care-13763980b5a1"&gt;&lt;strong&gt;Yes, Python is Slow, and I Don’t Care&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Optimize for your most expensive resource. That’s &lt;strong&gt;YOU&lt;/strong&gt;, not the computer.&lt;/li&gt;
&lt;li&gt;Choose a language/framework/architecture that helps you develop quickly (such as Python). Do not choose technologies simply because they are fast.&lt;/li&gt;
&lt;li&gt;When you do have performance issues: find your bottleneck&lt;/li&gt;
&lt;li&gt;Your bottleneck is most likely not CPU or Python itself.&lt;/li&gt;
&lt;li&gt;If Python &lt;strong&gt;is&lt;/strong&gt; your bottleneck (you’ve already optimized algorithms/etc.), then move the hot-spot to Cython/C&lt;/li&gt;
&lt;li&gt;Go back to enjoying getting things done quickly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#4 Michael:&lt;/strong&gt; &lt;a href="https://hackernoon.com/a-quick-introduction-hashing-c32d1dc91871"&gt;&lt;strong&gt;A Quick Introduction: Hashing&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Article by Gerald Nash&lt;/li&gt;
&lt;li&gt;Hashing is a method of determining the equivalence of two chunks of data. &lt;/li&gt;
&lt;li&gt;A cryptographic hash function is an irreversible function that generates a unique string for any set of data.&lt;/li&gt;
&lt;li&gt;Example&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    import hashlib as hash
    sha = hash.sha256()
    # Insert the string we want to hash
    sha.update('Hello World!')
    # Print the hexadecimal format of the binary hash we just created
    print(sha.hexdigest())
    # 4d3cf15aa67c88742e63918825f3c80f203f2bd59f399c81be4705a095c9fa0e
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Know when to choose “weak” hashes vs. strong ones&lt;/li&gt;
&lt;li&gt;Straight hashes are not enough for security (e.g. passwords). Use passlib and be done.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#5 Brian:&lt;/strong&gt; &lt;a href="https://www.twilio.com/blog/2017/04/wedding-at-scale-how-i-used-twilio-python-and-google-to-automate-my-wedding.html"&gt;&lt;strong&gt;Wedding at Scale: How I Used Twilio, Python and Google to Automate My Wedding&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gspread to access a google spreadsheet of guests and phone numbers&lt;/li&gt;
&lt;li&gt;SMS guests with twilio&lt;/li&gt;
&lt;li&gt;replies handled by a flask app&lt;/li&gt;
&lt;li&gt;gathered accept/decline/didn't reply statistics&lt;/li&gt;
&lt;li&gt;reminder texts&lt;/li&gt;
&lt;li&gt;food selections and replies and reminders, all handled by Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;# 6 Michael:&lt;/strong&gt; &lt;a href="https://blog.njsnet.co/python-alexa"&gt;&lt;strong&gt;python-alexa: A Python framework for Alexa Development&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Neil Stewart&lt;/li&gt;
&lt;li&gt;Ordered an amazon assistant.&lt;/li&gt;
&lt;li&gt;Before it arrived, I had challenged myself to develop something for it&lt;/li&gt;
&lt;li&gt;Project: VoiceOps, interact with an AWS account, such as telling me how many running and stopped instances there is or what RDS databases are in an account&lt;/li&gt;
&lt;li&gt;Wanted a framework that would make Alexa development super easy.&lt;/li&gt;
&lt;li&gt;Decided a new framework was needed: python-alexa&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nmyster/python-alexa"&gt;python-alexa on github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://echosim.io/"&gt;echo shim&lt;/a&gt; for testing without hardware&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Our news:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&lt;/strong&gt;: Just added &lt;a href="https://training.talkpython.fm/search"&gt;full text search&lt;/a&gt; (including within videos) to Talk Python courses.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt; &lt;a href="http://testandcode.com/28"&gt;Netflix chaos engineering interview on Test &amp;amp; Code&lt;/a&gt;&lt;/p&gt;</description></item><item><title>#22 PYTHONPATH considered harmful</title><link>https://pythonbytes.fm/episodes/show/22/pythonpath-considered-harmful</link><guid>https://pythonbytes.fm/episodes/download/22/pythonpath-considered-harmful.mp3</guid><enclosure url="https://pythonbytes.fm/episodes/download/22/pythonpath-considered-harmful.mp3" length="15343080" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Tue, 18 Apr 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>PYTHONPATH considered harmful</itunes:title><itunes:episode>22</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:15:50</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;&lt;strong&gt;Sponsored by &lt;a href="http://python.advance.net/"&gt;ADVANCE DIGITAL&lt;/a&gt;&lt;/strong&gt;. Find your rewarding Python job at &lt;a href="http://python.advance.net/"&gt;http://python.advance.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#1 Brian:&lt;/strong&gt; &lt;a href="https://orbifold.xyz/pythonpath.html"&gt;&lt;strong&gt;PYTHONPATH considered harmful&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don’t do it.&lt;/li&gt;
&lt;li&gt;You might not regret it today. But later you will.&lt;/li&gt;
&lt;li&gt;Mucks up distribution searches, etc.
&lt;ul&gt;
&lt;li&gt;“For one, most directories are poorly suited to be on the Python search path. Consider, for example, the root directory of a typical Python project: it contains &lt;code&gt;setup.py&lt;/code&gt; -- and so, if it were added to the current search path, &lt;code&gt;import setup&lt;/code&gt; would become possible. (This is one reason to have &lt;code&gt;src/&lt;/code&gt; directories.) Often, directories added unwisely to the Python search path cause files to be imported from paths they do not expect to, and surprisingly conflict.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#2 Michael:&lt;/strong&gt; &lt;a href="https://github.com/keon/algorithms"&gt;keon/algorithms&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minimal examples of data structures and algorithms in Python&lt;/li&gt;
&lt;li&gt;Topics include
&lt;ul&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;circular_counter&lt;/li&gt;
&lt;li&gt;flatten&lt;/li&gt;
&lt;li&gt;garage&lt;/li&gt;
&lt;li&gt;merge_intervals&lt;/li&gt;
&lt;li&gt;graphs&lt;/li&gt;
&lt;li&gt;clone_graph&lt;/li&gt;
&lt;li&gt;find_path&lt;/li&gt;
&lt;li&gt;traversal&lt;/li&gt;
&lt;li&gt;trees&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#3 Brian:&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://glyph.twistedmatrix.com/2016/08/attrs.html"&gt;Glyph on attrs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We talked about &lt;code&gt;attrs&lt;/code&gt; in &lt;a href="https://pythonbytes.fm/11"&gt;episode 11&lt;/a&gt;, and pointed to the project and the docs.&lt;/li&gt;
&lt;li&gt;I came across good article introducing why you should use &lt;code&gt;attrs&lt;/code&gt;, by glyph, from 2016.&lt;/li&gt;
&lt;li&gt;The one Python library everyone needs: &lt;a href="https://glyph.twistedmatrix.com/2016/08/attrs.html"&gt;https://glyph.twistedmatrix.com/2016/08/attrs.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Discusses 
&lt;ul&gt;
&lt;li&gt;problems with using lists and tuples as data structures.&lt;/li&gt;
&lt;li&gt;creating your own classes properly. &lt;/li&gt;
&lt;li&gt;possible problems with &lt;code&gt;namedtuple&lt;/code&gt; (-ish. I still love &lt;code&gt;namedtuple&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sponsored by &lt;a href="http://python.advance.net/"&gt;ADVANCE DIGITAL&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A small team of developers who work in an agile/devops environment– you will make an impact with your work quickly&lt;/li&gt;
&lt;li&gt;Are mostly a python shop, but there is an opportunity to introduce and run other technologies at scale&lt;/li&gt;
&lt;li&gt;Fund employee development and conference attendance&lt;/li&gt;
&lt;li&gt;Are located in beautiful Jersey City, one stop from Manhattan on the PATH&lt;/li&gt;
&lt;li&gt;Are one of the 10 largest news sites by traffic in the US&lt;/li&gt;
&lt;li&gt;Apply at &lt;a href="http://python.advance.net/"&gt;http://python.advance.net/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#4 Michael:&lt;/strong&gt; &lt;a href="https://github.com/dabeaz/curio"&gt;&lt;strong&gt;Curio for Python 3.5+ concurrency&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Curio is a library for performing concurrent I/O and common system programming tasks such as launching subprocesses and farming work out to thread and process pools. &lt;/li&gt;
&lt;li&gt;Curio is solely concerned with the execution of coroutines. A coroutine is a function defined using async def.&lt;/li&gt;
&lt;li&gt;It uses Python coroutines and the explicit &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; syntax introduced in Python 3.5. &lt;/li&gt;
&lt;li&gt;Its programming model is based on cooperative multitasking and existing programming abstractions such as threads, sockets, files, subprocesses, locks, and queues. &lt;/li&gt;
&lt;li&gt;All sorts of cool constructs: &lt;code&gt;AsyncThreads&lt;/code&gt;, &lt;code&gt;UniversalQueues&lt;/code&gt;, async file I/O, &lt;code&gt;Tasks&lt;/code&gt;, and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;#5 Brian:&lt;/strong&gt; &lt;strong&gt;Python Package src-ery&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Use the src, Luke"&lt;/li&gt;
&lt;li&gt;"To src, or not to src, that is the question"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Answering a listener question about Python packaging.
In episode 15: Digging into Python Packaging, we mentioned to articles about getting started with packaging. 
In the comments, Kristof Claes noted that these references were in conflict with a couple of other references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pytest “Good Integration Practices”, &lt;a href="https://docs.pytest.org/en/latest/goodpractices.html"&gt;https://docs.pytest.org/en/latest/goodpractices.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ionel’s “Packaging a Python library”, &lt;a href="https://blog.ionelmc.ro/2014/05/25/python-packaging/"&gt;https://blog.ionelmc.ro/2014/05/25/python-packaging/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both of these strongly encourage the use of a “src” directory when setting up a package for distribution.
There seems to be good reasons to use “src”. Many of the reasons are around the idea that during testing, you should be testing an installed version of the code. I have no reason to disagree with Ionel’s arguments and the pytest documentation recommendation.&lt;/p&gt;

&lt;p&gt;However:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The pypa doesn’t bring this up when discussing distribution: 
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/distributing/"&gt;https://packaging.python.org/distributing/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The pypa sample project doesn’t use “src”:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/sampleproject"&gt;https://github.com/pypa/sampleproject&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Many popular packages don’t:
&lt;ul&gt;
&lt;li&gt;requests: &lt;a href="https://github.com/kennethreitz/requests"&gt;https://github.com/kennethreitz/requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pytest itself: &lt;a href="https://github.com/pytest-dev/pytest"&gt;https://github.com/pytest-dev/pytest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why not?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The pytest recommendation is subtle. It recommends using “src” if you need to include a dunder init file in the tests directory. Otherwise, the local code will be tested instead of the installed code, in part to test the installation and to test a library from the perspective of a user.&lt;/li&gt;
&lt;li&gt;pytest also recommends against having a top level dunder init in the tests directory. And this is a stronger recommendation.&lt;/li&gt;
&lt;li&gt;But Ionel’s points are not just around the use of pytest.&lt;/li&gt;
&lt;li&gt;So this is still really an open question to the Python community.
&lt;ul&gt;
&lt;li&gt;If it’s great to use “src” instead of top level packages, why aren’t more projects doing this?&lt;/li&gt;
&lt;li&gt;Why doesn’t the PyPA mention it?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;# 6 Michael:&lt;/strong&gt; &lt;a href="http://fortune.com/2017/04/14/intel-openstack-project-rackspace/"&gt;&lt;strong&gt;Intel Pulls Funding from OpenStack Effort It Founded With Rackspace&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intel and Rackspace were collaborating on a project called OpenStack Innovation Center&lt;/li&gt;
&lt;li&gt;Launched in July 2015. &lt;/li&gt;
&lt;li&gt;A source close to the effort said initial funding was supposed to last through 2018, but Intel pulled it early.&lt;/li&gt;
&lt;li&gt;A Rackspace spokeswoman said “OSIC’s objective was to create the world’s largest OpenStack developer cloud and develop enterprise capabilities within OpenStack. It quickly accomplished the first goal, and has made great progress toward the second.”&lt;/li&gt;
&lt;li&gt;Some 30 Rackspace employees who had been working at the innovation center have been given two weeks to find new jobs at the San Antonio-based company.&lt;/li&gt;
&lt;li&gt;Story here is we all need to think about funding projects and diversification.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Our news:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&lt;/strong&gt;: 
Hurry up and register for EuroPython: &lt;a href="https://ep2017.europython.eu/en/"&gt;https://ep2017.europython.eu/en/&lt;/a&gt; Earlybird sold out.&lt;/p&gt;</description></item><item><title>#23 Can you grok the GIL?</title><link>https://pythonbytes.fm/episodes/show/23/can-you-grok-the-gil</link><guid>https://pythonbytes.fm/episodes/download/23/can-you-grok-the-gil.mp3</guid><enclosure url="https://pythonbytes.fm/episodes/download/23/can-you-grok-the-gil.mp3" length="14777638" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 26 Apr 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Can you grok the GIL?</itunes:title><itunes:episode>23</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:19:34</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;&lt;strong&gt;Sponsored by ADVANCE DIGITAL. Find your Python web job at &lt;a href="http://python.advance.net/"&gt;http://python.advance.net/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://opensource.com/article/17/4/grok-gil"&gt;&lt;strong&gt;Grok the GIL&lt;/strong&gt; - &lt;strong&gt;How to write fast and thread-safe Python&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A. Jesse Jiryu Davis teaches us about the GIL, and how to use that knowledge to decide between threads and processes for parallelism.&lt;/li&gt;
&lt;li&gt;From the article:
&lt;ul&gt;
&lt;li&gt;The GIL's effect on the threads in your program is simple enough that you can write the principle on the back of your hand: "One thread runs Python, while N others sleep or await I/O."&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Discusses and Cooperative multitasking and Preemptive multitasking&lt;/li&gt;
&lt;li&gt;When can a Python process be interrupted? (between bytecodes)&lt;/li&gt;
&lt;li&gt;When do you need to use thread protection? (less than you think)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A. Jesse Jiryu Davis will be speaking at&lt;/em&gt; &lt;a href="https://us.pycon.org/2017/"&gt;&lt;em&gt;PyCon 2017&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, which will be held May 17-25 in Portland, Oregon. Catch his talk,&lt;/em&gt; &lt;a href="https://us.pycon.org/2017/schedule/presentation/320/"&gt;&lt;em&gt;Grok the GIL: Write Fast and Thread-Safe Python&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, on Friday, May 19.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://twitter.com/mcuban/status/846781342083923969"&gt;&lt;strong&gt;The New NBA by Mark Cuban&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction to machine learning in Python &amp;amp; Jupyter notebooks&lt;/li&gt;
&lt;li&gt;Mark Cuban using Python and ML to play with his NBA team&lt;/li&gt;
&lt;li&gt;“We have a team at the Mavs but I need to know it to help define strategy and make decisions”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="http://pyfound.blogspot.com/2017/04/the-ego-less-developer-community.html"&gt;&lt;strong&gt;Ian Cordasco gets a Community Service Award from PSF&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ian was on &lt;a href="http://testandcode.com/13"&gt;Test &amp;amp; Code, episode 13&lt;/a&gt;, talking about Betamax&lt;/li&gt;
&lt;li&gt;From the announcement:
&lt;ul&gt;
&lt;li&gt;Ian Cordasco has been the PSF’s Election Administrator since 2015, volunteering his efforts for this important role. &lt;/li&gt;
&lt;li&gt;Cordasco frequently mentors newer coders and supports their Python endeavors. &lt;/li&gt;
&lt;li&gt;The Python Software Foundation award the 2017 Q1 Community Service Award to Ian Cordasco for his contributions to PSF elections and active mentoring of women in Python community.&lt;/li&gt;
&lt;li&gt;Cordasco has a history of going out of his way to support and encourage female developers. When &lt;a href="https://twitter.com/WillingCarol"&gt;Carol Willing&lt;/a&gt;, a developer for the Jupyter project, wanted to work on the Requests library, she got in touch with Cordasco. “We worked together on the project and my first commit to the Requests library got accepted!” Cordasco later wrote a fantastic post about it on his &lt;a href="http://www.coglib.com/~icordasc/blog/2014/11/sending-json-in-requests.html"&gt;blog&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sponsored by ADVANCE DIGITAL&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They have a small team of developers who work in an agile/devops environment– you will make an impact with your work quickly&lt;/li&gt;
&lt;li&gt;They are mostly a python shop, but there is an opportunity to introduce and run other technologies at scale&lt;/li&gt;
&lt;li&gt;They fund employee development and conference attendance&lt;/li&gt;
&lt;li&gt;They are located in beautiful Jersey City, one stop from Manhattan on the PATH&lt;/li&gt;
&lt;li&gt;They are one of the 10 largest news sites by traffic in the US&lt;/li&gt;
&lt;li&gt;Apply at &lt;strong&gt;&lt;a href="http://python.advance.net/"&gt;http://python.advance.net/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://blog.jupyter.org/2017/04/19/release-of-ipython-6-0/"&gt;&lt;strong&gt;Release of IPython 6.0&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Matthias Bussonnier&lt;/li&gt;
&lt;li&gt;IPython goes Python 3 only&lt;/li&gt;
&lt;li&gt;Our personal experience writing Python3-only source code.
&lt;ul&gt;
&lt;li&gt;The size of the IPython codebase has decreased by about 1500 lines of Python code relative to the last release. Of course, that’s not solely due to the removal of Python 2 support, but a non-negligible amount is.&lt;/li&gt;
&lt;li&gt;even more remarkable in light of completely new features that required adding hundreds of lines of code&lt;/li&gt;
&lt;li&gt;This change eases the burden on contributors to IPython. Contributors can can spend less time thinking “what about Python 2”, or rewriting a pull request because the Python 2 test suite fails. &lt;/li&gt;
&lt;li&gt;At the same time, our tests now complete more quickly on continuous integration services because they need to run on fewer versions of Python.&lt;/li&gt;
&lt;li&gt;From a developer point of view we are extremely pleased with having the possibility to write Python3-only code, and are looking forward to even more improvements like &lt;a href="https://docs.python.org/3/library/pathlib.html"&gt;pathlib&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We hope you will enjoy this release. It will be the base for some awesome features, like async/await REPL.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://hynek.me/articles/testing-packaging/"&gt;&lt;strong&gt;Testing &amp;amp; Packaging&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hynek Schlawack describes why he was convinced to use a src directory in package distributions he works on.&lt;/li&gt;
&lt;li&gt;Just use a src dir (of course it doesn’t have to be exactly “src” but that’s the convention and it should be different than your package name), it will make your life easier.&lt;/li&gt;
&lt;li&gt;Without it, it is easy to think you are testing an installed package, but you’re really testing the modules before install. These can be different. Better to test as close to how your users will see the package as possible, and using a src dir helps that.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://aws.amazon.com/releasenotes/5198208415517126"&gt;&lt;strong&gt;AWS Lambda adds Python 3.6 support&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS Lambda is a compute service that lets you run code without provisioning or managing servers. &lt;/li&gt;
&lt;li&gt;AWS Lambda executes your code only when needed and scales automatically, from a few requests per day to thousands per second. &lt;/li&gt;
&lt;li&gt;You pay only for the compute time you consume - there is no charge when your code is not running.&lt;/li&gt;
&lt;li&gt;You can also build &lt;a href="https://aws.amazon.com/serverless"&gt;serverless&lt;/a&gt; applications composed of functions that are triggered by events and automatically deploy them using AWS CodePipeline and AWS CodeBuild. &lt;/li&gt;
&lt;li&gt;Already good things cometh: &lt;a href="https://github.com/Miserlou/Zappa/issues/793"&gt;Zappa has Python 3 support&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#24 I have a local PyPI server and so do you!</title><link>https://pythonbytes.fm/episodes/show/24/i-have-a-local-pypi-server-and-so-do-you</link><guid>2f4fd17a-4705-4ce8-b07d-3cb941912021</guid><enclosure url="https://pythonbytes.fm/episodes/download/24/i-have-a-local-pypi-server-and-so-do-you.mp3" length="13632144" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 03 May 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>I have a local PyPI server and so do you!</itunes:title><itunes:episode>24</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary>Welcome to Python bytes. Episode 24, recorded May 2, 2017. This episode is sponsored by rollbar: &lt;https://rollbar.com/pythonbytes&gt; **Brian #1:[Learning Python Series by Doug Farrell](https://dbader.org/blog/python-intro-statements-variables-and-loops), published on dbader.org** * Doug Ferrell wrote for [Robotics and Beyond](https://roboticsandbeyond.org/) , a STEM educational space * This is part 1: **Let’s Program with Python: Statements, Variables, and Loops** **Michael #2:** [**Geeking out in your older years**](http://www.pgbovine.net/publications/older-adults-learning- programming_CHI-2017.pdf) * Over 500 respondents on &lt;http://pythontutor.com/&gt; * Age group: 60-85 * Opportunities: Help older adults become software dev proficient to * Connect with their grand children * Fill the growing tech / teacher gap * Mentor others * Keep mentally active * Pursue their hobbies * Used MOOCs, online courses, books, and more to learn * Felt somewhat isolated and disconnected * How could we all help? Or help them help themselves as a group? **Brian #3:** **Local package store** * Not a story, just something I used for the plane trip that didn’t know worked before. * Stops my quest for a easy to use local pypi server. * Download without installing `$ cd /tmp/wheelhouse` `$ python3.6 -m pip download [HTML_REMOVED]` * Then, later, probably within a virtual env `$ python3.6 -m pip install --no-index --find-links=/tmp/wheelhouse somePackage` * **Does it work with requirements files? Yes!** `pip3 download -r /full_path_to/requirements.txt` **Sponsored by rollbar** &lt;https://rollbar.com/pythonbytes&gt; * **Adding the Rollbar Python SDK is as easy as`pip install rollbar`.** * **Make sure to check out Rollbar at Pycon. Grab swag and get a product demo.** * Visit &lt;https://rollbar.com/pythonbytes&gt; and get the get the Bootstrap Plan free for free * 100,000 rollbar events / mo, 180 days retention **Michael #4:** [**Modifying the Python language in 6 minutes**](https://hackernoon.com/modifying-the-python-language- in-7-minutes-b94b0a99ce14) * Anthony Shaw * I’m writing my findings on how CPython works and show you how easy it is to modify the Python syntax. * I’m going to show you how to add a new **feature** to the Python syntax. * **Level 1: PEPs** * **Level 2: Grammar** * The [Grammar](https://github.com/python/cpython/blob/v3.6.1/Grammar/Grammar) file is simple text file describing all the elements of the Python language. This is used by not just CPython, but other implementations like PyPy to keep consistency and agree on the types of language semantics. * New statements * `incr_stmt: '++'` * `decr_stmt: '--'` * **Level 3 : Lexer:** There are four steps that Python takes when you hit return: lexing, parsing, compiling, and interpreting. Lexing is breaking the line of code you just typed into tokens. * **Level 4 : Parser** : The parser takes those tokens and generates a structure that shows their relationship to each other. For Python and many other languages, this is the Abstract Syntax Tree (or AST). * **Level 5: Compiler:** The compiler then takes the syntax tree and ‘visits’ each branch, the CPython compiler has a method for visiting a statement, called `compile_visit_stmt` which is just a big switch statement looking at the statement kind. * &lt;https://github.com/tonybaloney/cpython/commit/fd7c20c3a3a02b4f2dae8ec7a90448627aa0d757&gt; **Brian #5:** [**colorful**](https://github.com/timofurrer/colorful) * “Terminal string styling done right, in Python” * Add color to terminal applications with a pretty easy to read syntax **Michael #6:** [**Five steps to add the _bling_ factor your Python package**](https://www.reddit.com/r/Python/comments/65v1kx/five_steps_to_add_the_bling_factor_your_python/) _*_ * * by Tjelvar Olsson * Step 1: Host the documentation on readthedocs * Step 2: Set up continuous integration testing on Travis Ci * Step 3: Calculate your code coverage using Codecov * Step 4: Upload your Package to PyPi * Step 5: Add badges to your project’s README file</itunes:summary><itunes:duration>00:19:29</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Welcome to Python bytes. Episode 24, recorded May 2, 2017. This episode is sponsored by rollbar: &lt;a href="https://rollbar.com/pythonbytes"&gt;https://rollbar.com/pythonbytes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1: &lt;a href="https://dbader.org/blog/python-intro-statements-variables-and-loops"&gt;Learning Python Series by Doug Farrell&lt;/a&gt;, published on dbader.org&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Doug Ferrell wrote for &lt;a href="https://roboticsandbeyond.org/"&gt;Robotics and Beyond&lt;/a&gt; , a STEM educational space&lt;/li&gt;
&lt;li&gt;This is part 1: &lt;strong&gt;Let’s Program with Python: Statements, Variables, and Loops&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="http://www.pgbovine.net/publications/older-adults-learning-programming_CHI-2017.pdf"&gt;&lt;strong&gt;Geeking out in your older years&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Over 500 respondents on &lt;a href="http://pythontutor.com/"&gt;http://pythontutor.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Age group: 60-85&lt;/li&gt;
&lt;li&gt;Opportunities: Help older adults become software dev proficient to
&lt;ul&gt;
&lt;li&gt;Connect with their grand children&lt;/li&gt;
&lt;li&gt;Fill the growing tech / teacher gap&lt;/li&gt;
&lt;li&gt;Mentor others&lt;/li&gt;
&lt;li&gt;Keep mentally active&lt;/li&gt;
&lt;li&gt;Pursue their hobbies&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Used MOOCs, online courses, books, and more to learn&lt;/li&gt;
&lt;li&gt;Felt somewhat isolated and disconnected
&lt;ul&gt;
&lt;li&gt;How could we all help? Or help them help themselves as a group?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;strong&gt;Local package store&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not a story, just something I used for the plane trip that didn’t know worked before.&lt;/li&gt;
&lt;li&gt;Stops my quest for a easy to use local pypi server.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download without installing&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cd /tmp/wheelhouse&lt;/code&gt; 
&lt;code&gt;$ python3.6 -m pip download [HTML_REMOVED]&lt;/code&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, later, probably within a virtual env&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ python3.6 -m pip install --no-index --find-links=/tmp/wheelhouse somePackage&lt;/code&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Does it work with requirements files? Yes!&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;pip3 download -r /full_path_to/requirements.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sponsored by rollbar&lt;/strong&gt; &lt;a href="https://rollbar.com/pythonbytes"&gt;https://rollbar.com/pythonbytes&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Adding the Rollbar Python SDK is as easy as &lt;code&gt;pip install rollbar&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make sure to check out Rollbar at Pycon. Grab swag and get a product demo.&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;Visit &lt;a href="https://rollbar.com/pythonbytes"&gt;https://rollbar.com/pythonbytes&lt;/a&gt; and get the get the Bootstrap Plan free for free
&lt;ul&gt;
&lt;li&gt;100,000 rollbar events / mo, 180 days retention&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://hackernoon.com/modifying-the-python-language-in-7-minutes-b94b0a99ce14"&gt;&lt;strong&gt;Modifying the Python language in 6 minutes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anthony Shaw&lt;/li&gt;
&lt;li&gt;I’m writing my findings on how CPython works and show you how easy it is to modify the Python syntax.&lt;/li&gt;
&lt;li&gt;I’m going to show you how to add a new &lt;strong&gt;feature&lt;/strong&gt; to the Python syntax.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Level 1: PEPs&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Level 2: Grammar&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/python/cpython/blob/v3.6.1/Grammar/Grammar"&gt;Grammar&lt;/a&gt; file is simple text file describing all the elements of the Python language. This is used by not just CPython, but other implementations like PyPy to keep consistency and agree on the types of language semantics.
&lt;ul&gt;
&lt;li&gt;New statements
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;incr_stmt: '++'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;decr_stmt: '--'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Level 3 : Lexer:&lt;/strong&gt; There are four steps that Python takes when you hit return: lexing, parsing, compiling, and interpreting. Lexing is breaking the line of code you just typed into tokens.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Level 4 : Parser&lt;/strong&gt;: The parser takes those tokens and generates a structure that shows their relationship to each other. For Python and many other languages, this is the Abstract Syntax Tree (or AST). &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Level 5: Compiler:&lt;/strong&gt;  The compiler then takes the syntax tree and ‘visits’ each branch, the CPython compiler has a method for visiting a statement, called &lt;code&gt;compile_visit_stmt&lt;/code&gt; which is just a big switch statement looking at the statement kind.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tonybaloney/cpython/commit/fd7c20c3a3a02b4f2dae8ec7a90448627aa0d757"&gt;https://github.com/tonybaloney/cpython/commit/fd7c20c3a3a02b4f2dae8ec7a90448627aa0d757&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://github.com/timofurrer/colorful"&gt;&lt;strong&gt;colorful&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Terminal string styling done right, in Python”&lt;/li&gt;
&lt;li&gt;Add color to terminal applications with a pretty easy to read syntax&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.reddit.com/r/Python/comments/65v1kx/five_steps_to_add_the_bling_factor_your_python/"&gt;&lt;strong&gt;Five steps to add the _bling_ factor your Python package&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;*&lt;/em&gt;*&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Tjelvar Olsson&lt;/li&gt;
&lt;li&gt;Step 1: Host the documentation on readthedocs&lt;/li&gt;
&lt;li&gt;Step 2: Set up continuous integration testing on Travis Ci&lt;/li&gt;
&lt;li&gt;Step 3: Calculate your code coverage using Codecov&lt;/li&gt;
&lt;li&gt;Step 4: Upload your Package to PyPi&lt;/li&gt;
&lt;li&gt;Step 5: Add badges to your project’s README file&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#25 Could we have more in-database machine learning please?</title><link>https://pythonbytes.fm/episodes/show/25/could-we-have-more-in-database-machine-learning-please</link><guid>c29faaa9-abd3-443d-beec-67b77af55895</guid><enclosure url="https://pythonbytes.fm/episodes/download/25/could-we-have-more-in-database-machine-learning-please.mp3" length="12147680" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 12 May 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Could we have more in-database machine learning please?</itunes:title><itunes:episode>25</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:17:53</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;&lt;strong&gt;Michael #1:&lt;/strong&gt; &lt;a href="https://blogs.technet.microsoft.com/dataplatforminsider/2017/04/19/python-in-sql-server-2017-enhanced-in-database-machine-learning/"&gt;&lt;strong&gt;Python in SQL Server 2017: enhanced in-database machine learning&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in-database analytics and machine learning with Python in SQL Server.&lt;/li&gt;
&lt;li&gt;Why?
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Elimination of data movement:&lt;/strong&gt; You no longer need to move data from the database to your Python application or model. Instead, you can build Python applications in the database. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy deployment:&lt;/strong&gt; Once you have the Python model ready, deploying it in production is now as easy as embedding it in a T-SQL script&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rich extensibility:&lt;/strong&gt; You can install and run any of the latest open source Python packages in SQL Server to build deep learning and AI applications on huge amounts of data in SQL Server.&lt;/li&gt;
&lt;li&gt;Works in express edition of SQL Server&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The standard open source CPython interpreter (version 3.5) and some Python packages commonly used for data science are downloaded and installed during SQL Server setup if you choose the Python option in the feature tree.&lt;/li&gt;
&lt;li&gt;Currently, a subset of packages from the popular Anaconda distribution is included along with Microsoft’s RevoScalePy package. The set of packages available for download will evolve as we move toward general availability of this feature.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #2&lt;/strong&gt;: &lt;a href="https://semaphoreci.com/community/tutorials/generating-fake-data-for-python-unit-tests-with-faker"&gt;&lt;strong&gt;Generating Fake Data for Python Unit Tests with Faker&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Used in &lt;a href="http://cecilphillip.com/content-negotiation-with-the-pyramid-web-framework/"&gt;Content Negotiation with the Pyramid Web Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/Faker"&gt;Faker&lt;/a&gt; is great. From the pypi page:
&lt;ul&gt;
&lt;li&gt;“&lt;em&gt;Faker&lt;/em&gt; is a Python package that generates fake data for you. Whether you need to bootstrap your database, create good-looking XML documents, fill-in your persistence to stress test it, or anonymize data taken from a production service, Faker is for you.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The article above is a great introduction to show you what you can do with it.&lt;/li&gt;
&lt;li&gt;Faker includes localization, so you can get the output to match the proper language you want.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://stackoverflow.blog/2017/05/09/introducing-stack-overflow-trends/?cb=1"&gt;&lt;strong&gt;Stack Overflow Trends tool&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stack overflow introduces a trends tool starting with a graph that shows the questions using the terms Python, PHP, and Perl, plotted year vs % of total questions.
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://zgab33vy595fw5zq-zippykid.netdna-ssl.com/wp-content/uploads/2017/05/languages-2-1024x621.png"&gt;https://zgab33vy595fw5zq-zippykid.netdna-ssl.com/wp-content/uploads/2017/05/languages-2-1024x621.png&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python’s growth since 2012 has been fairly steady, growing from ~3.5% to over 8%&lt;/li&gt;
&lt;li&gt;Plus, the trends tool looks fun.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sponsorship slots are available right now. Please contact us if you’re interested.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://medium.freecodecamp.com/we-asked-20-000-people-who-they-are-and-how-theyre-learning-to-code-fff5d668969"&gt;&lt;strong&gt;We asked 20,000 people who they are and how they’re learning to code&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Thanks Alan Jones&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Who participated? More than 20,000 new coders responded to this survey. These are people who have been coding for less than 5 years.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;62% of them live outside the US&lt;/li&gt;
&lt;li&gt;their average age is 28 years old&lt;/li&gt;
&lt;li&gt;19% are women&lt;/li&gt;
&lt;li&gt;They’ve been coding for an average of 21 months&lt;/li&gt;
&lt;li&gt;25% have already landed their first developer job&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;40% of them would like to either freelance or start their own business.&lt;/li&gt;
&lt;li&gt;Most of them are interested in working as web developers, but are also interested in a wide variety of developer specializations.&lt;/li&gt;
&lt;li&gt;Most new coders haven’t yet started listening to podcasts, but the ones who do listen to a wide range of them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5&lt;/strong&gt; &lt;a href="http://www.datasciencecentral.com/profiles/blogs/introduction-to-anomaly-detection"&gt;&lt;strong&gt;Introduction to Anomaly Detection&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Anomaly Detection Techniques&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Simple Statistical Methods&lt;/li&gt;
&lt;li&gt;Challenges&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Machine Learning-Based Approaches&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Density-Based Anomaly Detection&lt;/li&gt;
&lt;li&gt;Clustering-Based Anomaly Detection&lt;/li&gt;
&lt;li&gt;Support Vector Machine-Based Anomaly Detection&lt;/li&gt;
&lt;li&gt;Building a Simple Detection Solution Using a Low-Pass Filter&lt;/li&gt;
&lt;li&gt;Moving Average Using Discrete Linear Convolution&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://pybee.org/news/buzz/a-request-for-your-help/"&gt;&lt;strong&gt;Beeware: A request for your help&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Beeware? Started 4 years ago. Since then, the BeeWare project has grown to encompass support for mobile platforms, two alternate Python implementations, and a cross platform widget set - as well as the developer tools that started the project originally.&lt;/li&gt;
&lt;li&gt;Lots of work done over the last 6 months:
&lt;ul&gt;
&lt;li&gt;Extensive improvements to Batavia and VOC;&lt;/li&gt;
&lt;li&gt;An Android backend for Toga;&lt;/li&gt;
&lt;li&gt;A Django backend for Toga, enabling Toga apps to be deployed as web apps;&lt;/li&gt;
&lt;li&gt;A Winforms backend for Toga, enabling Toga apps to run on Windows with a modern appearance;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Unfortunately, my contract with Jambon is coming to a close - which means my contributions to BeeWare will go back to being what my spare time allows.&lt;/li&gt;
&lt;li&gt;So - this is an appeal to you - the Python community. If you are excited by the prospect of having access to Python on mobile platforms, or you would like to write applications in Python that have completely native user interfaces - &lt;strong&gt;I need your help&lt;/strong&gt; for just &lt;strong&gt;US$10 a month&lt;/strong&gt; - you can &lt;a href="http://pybee.org/contributing/membership/"&gt;join the BeeWare project as a member&lt;/a&gt;,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Other news&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.pycascades.com"&gt;pycascades.com&lt;/a&gt; is a regional PyCon for the Pacific Northwest.&lt;/p&gt;</description></item><item><title>#26 How have you automated your life, or CLI, with Python?</title><link>https://pythonbytes.fm/episodes/show/26/how-have-you-automated-your-life-or-cli-with-python</link><guid>600cabd7-e211-49d2-bf4c-b2dd8f7dc73b</guid><enclosure url="https://pythonbytes.fm/episodes/download/26/how-have-you-automated-your-life-or-cli-with-python.mp3" length="19084151" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 19 May 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>How have you automated your life, or CLI, with Python?</itunes:title><itunes:episode>26</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:19:44</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by rollbar: &lt;a href="http://rollbar.com/pythonbytes"&gt;rollbar.com/pythonbytes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1: Two part series on interactive terminal applications&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; &lt;a href="https://opensource.com/article/17/5/4-terminal-apps"&gt;&lt;strong&gt;4 terminal applications with great command-line UIs&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For Comparison: both ok but could be better
&lt;ul&gt;
&lt;li&gt;MySQL REPL&lt;/li&gt;
&lt;li&gt;Python REPL&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bpython-interpreter.org/"&gt;bpython&lt;/a&gt; adds autocompletion and other goodies
&lt;ul&gt;
&lt;li&gt;also check out &lt;a href="https://pypi.python.org/pypi/ptpython"&gt;ptpython&lt;/a&gt; as a REPL replacement&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mycli.net/"&gt;mycli&lt;/a&gt; adds context aware completion to MySQL
&lt;a href="http://mycli.net/"&gt;mycli&lt;/a&gt; - &lt;a href="https://www.pgcli.com/"&gt;pgcli&lt;/a&gt; for postgress that adds fuzzy search&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fishshell.com/"&gt;fish&lt;/a&gt; : like bash, but has better search history&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Part 2:&lt;/strong&gt; &lt;a href="https://opensource.com/article/17/5/4-practical-python-libraries"&gt;&lt;strong&gt;4 Python libraries for building great cli's&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://python-prompt-toolkit.readthedocs.io/en/latest/"&gt;prompt_toolkit&lt;/a&gt; - for building a REPL like interface
&lt;ul&gt;
&lt;li&gt;includes command history, auto-suggestion, auto-completion&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://click.pocoo.org/5/"&gt;click&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;includes pager and ability to launch an editor&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/fuzzyfinder"&gt;fuzzyfinder&lt;/a&gt; - make suggestions
&lt;ul&gt;
&lt;li&gt;article shows how to combine that with prompt_toolkit&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pygments.org/"&gt;pygments&lt;/a&gt; - syntax highlighting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.reddit.com/r/Python/comments/69ba93/how_have_you_automated_your_life_with_python_if/"&gt;&lt;strong&gt;How have you automated your life with python?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is something magical about writing code that interacts with the physical world.&lt;/li&gt;
&lt;li&gt;I have a script which runs every 5 minutes between 17:00 and 17:30 which scrapes the train times website and sends me desktop notifications saying whether or not my trains home are delayed / cancelled.&lt;/li&gt;
&lt;li&gt;I recently wrote a quick python script that tells me when my girlfriend comes home: It sniffs the network for DHCP traffic, when her phone joins the wifi network outside it uses the say command to let me know.&lt;/li&gt;
&lt;li&gt;Wrote a script to check if nearby ice cream shops are stocking my favourite (rare) flavour by scanning their menu page for keywords.&lt;/li&gt;
&lt;li&gt;A script to check the drive time too/from work using a route with tolls or without tolls.. to try and save some money when the times aren't too different. Using google maps API and a flask site.&lt;/li&gt;
&lt;li&gt;I have a script that generates weekly status update emails based off my git commit messages and pull requests. It also creates timesheets in Harvest based on the projects I'm assigned.&lt;/li&gt;
&lt;li&gt;I have thrown together some python that automatically controls my reverse-cycle AC system so that it makes optimal use of my solar panels on my roof.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3&lt;/strong&gt;: &lt;a href="http://pybit.es/flask-sqlalchemy-bday-app.html"&gt;&lt;strong&gt;Building a Simple Birthday App with Flask-SQLAlchemy&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nice simple application with a clear need.
&lt;ul&gt;
&lt;li&gt;Keep track of upcoming birthdays&lt;/li&gt;
&lt;li&gt;Avoid Faceboook&lt;/li&gt;
&lt;li&gt;Build a simple Flask app&lt;/li&gt;
&lt;li&gt;Try SQLAlchemy&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sponsored by Rollbar&lt;/strong&gt;, try them at &lt;a href="http://rollbar.com/pythonbytes"&gt;rollbar.com/pythonbytes&lt;/a&gt; and don't forget to visit their booth at PyCon!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.amin.space/blog/2017/5/elemental_speller/"&gt;&lt;strong&gt;Spelling with Elemental Symbols&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How does it work?
&lt;ul&gt;
&lt;li&gt;Input: "Amputations"&lt;/li&gt;
&lt;li&gt;Output: "AmPuTaTiONS", "AmPUTaTiONS"&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Generating Character Groupings: 
&lt;ul&gt;
&lt;li&gt;'AmPuTaTiONS' &lt;code&gt;(2,2,2,2,1,1,1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;'AmPUTaTiONS' &lt;code&gt;(2,1,1,2,2,1,1,1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;How many are there in general for a given word? &lt;code&gt;fib(n + 1)&lt;/code&gt;!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Addressing Performance Issues: A few attempts don’t add much but&lt;/li&gt;
&lt;li&gt;Memoization: The technique of saving a function's output and returning it if the function is called again with the same inputs. A memoized function only needs to generate output once for a given input. This can be very helpful with expensive functions that are called many times with the same few inputs, but only works for pure functions. → 30% faster&lt;/li&gt;
&lt;li&gt;Algorithms: Switch to directed graphs and recursion, changes O(2^n) to O(n) and time from 16min to 10 sec.&lt;/li&gt;
&lt;li&gt;Learned a great deal along the way. This project introduced:
&lt;ul&gt;
&lt;li&gt;Combinatorics&lt;/li&gt;
&lt;li&gt;Performance profiling&lt;/li&gt;
&lt;li&gt;Time complexity&lt;/li&gt;
&lt;li&gt;Memoization&lt;/li&gt;
&lt;li&gt;Recursion&lt;/li&gt;
&lt;li&gt;Graphs and trees&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;strong&gt;IDE's for beginners&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/Python/comments/6ahnsb/thonny_python_ide_for_beginners/"&gt;Recent discussion on Reddit about Thonny&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I have mixed feelings about encouraging beginner IDE's.
&lt;ul&gt;
&lt;li&gt;Mostly negative feelings.&lt;/li&gt;
&lt;li&gt;And yet there is IDLE, there is Thonny, ...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Are these useful? Anti-useful?&lt;/li&gt;
&lt;li&gt;Isn't learning a decent editor part of learning to program?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://twitter.com/dtizzlenizzle/status/861024781273112576"&gt;&lt;strong&gt;PDF Plumber&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Plumb a PDF for detailed information about each char, rectangle, line, et cetera — and easily extract text and tables.&lt;/li&gt;
&lt;li&gt;Visual debugging with &lt;code&gt;.to_image()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Extracting tables
&lt;ul&gt;
&lt;li&gt;pdfplumber's approach to table detection borrows heavily from Anssi Nurminen's master's thesis, and is inspired by Tabula. It works like this:&lt;/li&gt;
&lt;li&gt;For any given PDF page, find the lines that are (a) explicitly defined and/or (b) implied by the alignment of words on the page.&lt;/li&gt;
&lt;li&gt;Merge overlapping, or nearly-overlapping, lines.&lt;/li&gt;
&lt;li&gt;Find the intersections of all those lines.&lt;/li&gt;
&lt;li&gt;Find the most granular set of rectangles (i.e., cells) that use these intersections as their vertices.&lt;/li&gt;
&lt;li&gt;Group contiguous cells into tables.&lt;/li&gt;
&lt;li&gt;Check out the demonstrations section.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#27 The PyCon 2017 recap and functional Python</title><link>https://pythonbytes.fm/episodes/show/27/the-pycon-2017-recap-and-functional-python</link><guid>16384063-bb11-4c05-9998-9aebd69aaadc</guid><enclosure url="https://pythonbytes.fm/episodes/download/27/the-pycon-2017-recap-and-functional-python.mp3" length="14131262" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 25 May 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>The PyCon 2017 recap and functional Python</itunes:title><itunes:episode>27</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary>* All videos available: &lt;https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg&gt; * Lessons learned: * pick up swag on day one. vendors run out. * take business cards with you and keep them on you * Not your actual business cards unless you are representing your company. * Cards that have your social media, github account, blog, or podcast or whatever on them. * 3x3 stickers are too big. 2x2 plenty big enough * lightening talks are awesome, because they are a lot of ranges of speaking experience * will definitely do that again * try to go to the talks that are important to you, but don’t over stress about it, since they are taped. However, it would be lame if all the rooms were empty, so don’t everybody ditch. * lastly: everyone knows Michael. **Michael #2:** [**How to Create Your First Python 3.6 AWS Lambda Function**](https://www.fullstackpython.com/blog/aws-lambda-python-3-6.html) * Tutorial from [Full Stack Python](https://www.fullstackpython.com/) * Walks you through creating an account * Select your Python version (3.6, yes!) * `def lambda_handler(event, context): …` # write this function, done! * Set and read environment variables (could be connection strings and API keys) **Brian #3:** [**How to Publish Your Package on PYPI**](https://blog.jetbrains.com/pycharm/2017/05/how-to-publish-your- package-on-pypi/) * jetbrains article * structure of the package * oops. doesn't include src, see https://pythonbytes.fm/22 * decent discussion of a the contents of the setup.py file (but interestingly absent is an example setup.py file) * good discussion of .pypirc file and links to the test and production PyPi * example of using twine to push to PyPI * overall: good discussion, but you'll still need a decent example. **Michael #4:** [**Coconut: Simple, elegant, Pythonic functional programming**](http://coconut-lang.org/) * Coconut is a functional programming language that compiles to Python. * Since all valid Python is valid Coconut, using Coconut will only extend and enhance what you're already capable of in Python. * `pip install coconut` 1. Some of Coconut’s major features include built-in, syntactic support for: 2. Pattern-matching, 3. Algebraic data-types, 4. Tail call optimization, 5. Partial application, 6. Better lambdas, 7. Parallelization primitives, and 8. A whole lot more, all of which can be found in [Coconut’s detailed documentation](http://coconut.readthedocs.io/en/master/DOCS.html). * Talk Python episode coming in a week **Brian #5:** [**Choose a licence**](https://choosealicense.com/) * MIT : simple and permissive * Apache 2.0 : something extra about patents. * GPL v3 : this is the contagious one that requires derivitive work to also be GPL v3 * Nice list with overviews of what they all mean with color coded bullet points: &lt;https://choosealicense.com/licenses/&gt; **Michael #6:** [**Python for Scientists and Engineers**](http://pythonforengineers.com/python-for-scientists-and- engineers/) * **Table of contents** : * **Beginners Start Here:** * [**Create a Word Counter in Python**](http://pythonforengineers.com/create-a-word-counter-in-python/) * [**An introduction to Numpy and Matplotlib**](http://pythonforengineers.com/an-introduction-to-numpy-and-matplotlib/) * [**Introduction to Pandas with Practical Examples (New)**](http://pythonforengineers.com/introduction-to-pandas/) * **Main Book** * [**Image and Video Processing in Python**](http://pythonforengineers.com/image-and-video-processing-in-python/) * [**Data Analysis with Pandas**](http://pythonforengineers.com/data-analysis-with-pandas/) * [**Audio and Digital Signal Processing (DSP)**](http://pythonforengineers.com/audio-and-digital-signal-processingdsp-in-python/) * [**Control Your Raspberry Pi From Your Phone / Tablet**](http://pythonforengineers.com/control-your-raspberry-pi-from-your-phone-tablet/) * **Machine Learning Section** * [**Machine Learning with an Amazon like Recommendation Engine**](http://pythonforengineers.com/machine-learning-with-an-amazon-like-recommendation-engine/) * [**Machine Learning For Complete Beginners:**](http://pythonforengineers.com/machine-learning-for-complete-beginners/) ____Learn how to predict how many Titanic survivors using machine learning. No previous knowledge needed! * [**Cross Validation and Model Selection**](http://pythonforengineers.com/cross-validation-and-model-selection/): In which we look at cross validation, and how to choose between different machine learning algorithms. Working with the Iris flower dataset and the Pima diabetes dataset. * **Natural Language Processing** * [**Introduction to NLP and Sentiment Analysis**](http://pythonforengineers.com/natural-language-processing-and-sentiment-analysis-with-python/) * [**Natural Language Processing with NTLK**](http://pythonforengineers.com/introduction-to-nltk-natural-language-processing-with-python/) * [**Intro to NTLK, Part 2**](http://pythonforengineers.com/intro-to-nltk-part-2/) * [**Build a sentiment analysis program**](http://pythonforengineers.com/build-a-sentiment-analysis-app-with-movie-reviews/) * [**Sentiment Analysis with Twitter**](http://pythonforengineers.com/practice-session-sentiment-analysis-with-twitter/) * [**Analysing the Enron Email Corpus**](http://pythonforengineers.com/analysing-the-enron-email-corpus/): The Enron Email corpus has half a million files spread over 2.5 GB. When looking at data this size, the question is, where do you even start? * [**Build a Spam Filter using the Enron Corpus**](http://pythonforengineers.com/build-a-spam-filter/) **In other news** : * [Python Testing with pytest](https://pragprog.com/book/bopytest/python-testing-with-pytest) Beta release and initial feedback is going very well.</itunes:summary><itunes:duration>00:19:08</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;ul&gt;
&lt;li&gt;All videos available: &lt;a href="https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg"&gt;https://www.youtube.com/channel/UCrJhliKNQ8g0qoE_zvL8eVg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lessons learned:
&lt;ul&gt;
&lt;li&gt;pick up swag on day one. vendors run out.&lt;/li&gt;
&lt;li&gt;take business cards with you and keep them on you&lt;/li&gt;
&lt;li&gt;Not your actual business cards unless you are representing your company.&lt;/li&gt;
&lt;li&gt;Cards that have your social media, github account, blog, or podcast or whatever on them.&lt;/li&gt;
&lt;li&gt;3x3 stickers are too big. 2x2 plenty big enough&lt;/li&gt;
&lt;li&gt;lightening talks are awesome, because they are a lot of ranges of speaking experience&lt;/li&gt;
&lt;li&gt;will definitely do that again&lt;/li&gt;
&lt;li&gt;try to go to the talks that are important to you, but don’t over stress about it, since they are taped. However, it would be lame if all the rooms were empty, so don’t everybody ditch.&lt;/li&gt;
&lt;li&gt;lastly: everyone knows Michael. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.fullstackpython.com/blog/aws-lambda-python-3-6.html"&gt;&lt;strong&gt;How to Create Your First Python 3.6 AWS Lambda Function&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tutorial from &lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Walks you through creating an account&lt;/li&gt;
&lt;li&gt;Select your Python version (3.6, yes!)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;def lambda_handler(event, context): …&lt;/code&gt; # write this function, done!&lt;/li&gt;
&lt;li&gt;Set and read environment variables (could be connection strings and API keys)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://blog.jetbrains.com/pycharm/2017/05/how-to-publish-your-package-on-pypi/"&gt;&lt;strong&gt;How to Publish Your Package on PYPI&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jetbrains article
&lt;ul&gt;
&lt;li&gt;structure of the package&lt;/li&gt;
&lt;li&gt;oops. doesn't include src, see https://pythonbytes.fm/22&lt;/li&gt;
&lt;li&gt;decent discussion of a the contents of the setup.py file (but interestingly absent is an example setup.py file)&lt;/li&gt;
&lt;li&gt;good discussion of .pypirc file and links to the test and production PyPi&lt;/li&gt;
&lt;li&gt;example of using twine to push to PyPI&lt;/li&gt;
&lt;li&gt;overall: good discussion, but you'll still need a decent example.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="http://coconut-lang.org/"&gt;&lt;strong&gt;Coconut: Simple, elegant, Pythonic functional programming&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coconut is a functional programming language that compiles to Python. &lt;/li&gt;
&lt;li&gt;Since all valid Python is valid Coconut, using Coconut will only extend and enhance what you're already capable of in Python.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install coconut&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;Some of Coconut’s major features include built-in, syntactic support for:&lt;/li&gt;
&lt;li&gt;Pattern-matching,&lt;/li&gt;
&lt;li&gt;Algebraic data-types,&lt;/li&gt;
&lt;li&gt;Tail call optimization,&lt;/li&gt;
&lt;li&gt;Partial application,&lt;/li&gt;
&lt;li&gt;Better lambdas,&lt;/li&gt;
&lt;li&gt;Parallelization primitives, and&lt;/li&gt;
&lt;li&gt;A whole lot more, all of which can be found in &lt;a href="http://coconut.readthedocs.io/en/master/DOCS.html"&gt;Coconut’s detailed documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Talk Python episode coming in a week&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt;  &lt;a href="https://choosealicense.com/"&gt;&lt;strong&gt;Choose a licence&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MIT : simple and permissive&lt;/li&gt;
&lt;li&gt;Apache 2.0 : something extra about patents.&lt;/li&gt;
&lt;li&gt;GPL v3 : this is the contagious one that requires derivitive work to also be GPL v3&lt;/li&gt;
&lt;li&gt;Nice list with overviews of what they all mean with color coded bullet points: &lt;a href="https://choosealicense.com/licenses/"&gt;https://choosealicense.com/licenses/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="http://pythonforengineers.com/python-for-scientists-and-engineers/"&gt;&lt;strong&gt;Python for Scientists and Engineers&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Table of contents&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beginners Start Here:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/create-a-word-counter-in-python/"&gt;&lt;strong&gt;Create a Word Counter in Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/an-introduction-to-numpy-and-matplotlib/"&gt;&lt;strong&gt;An introduction to Numpy and Matplotlib&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/introduction-to-pandas/"&gt;&lt;strong&gt;Introduction to Pandas with Practical Examples (New)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Main Book&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/image-and-video-processing-in-python/"&gt;&lt;strong&gt;Image and Video Processing in Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/data-analysis-with-pandas/"&gt;&lt;strong&gt;Data Analysis with Pandas&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/audio-and-digital-signal-processingdsp-in-python/"&gt;&lt;strong&gt;Audio and Digital Signal Processing (DSP)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/control-your-raspberry-pi-from-your-phone-tablet/"&gt;&lt;strong&gt;Control Your Raspberry Pi From Your Phone / Tablet&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Machine Learning Section&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/machine-learning-with-an-amazon-like-recommendation-engine/"&gt;&lt;strong&gt;Machine Learning with an Amazon like Recommendation Engine&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/machine-learning-for-complete-beginners/"&gt;&lt;strong&gt;Machine Learning For Complete Beginners:&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;&lt;em&gt;&lt;/em&gt;&lt;/em&gt;Learn how to predict how many Titanic survivors using machine learning. No previous knowledge needed!&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/cross-validation-and-model-selection/"&gt;&lt;strong&gt;Cross Validation and Model Selection&lt;/strong&gt;&lt;/a&gt;: In which we look at cross validation, and how to choose between different machine learning algorithms. Working with the Iris flower dataset and the Pima diabetes dataset.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Natural Language Processing&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/natural-language-processing-and-sentiment-analysis-with-python/"&gt;&lt;strong&gt;Introduction to NLP and Sentiment Analysis&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/introduction-to-nltk-natural-language-processing-with-python/"&gt;&lt;strong&gt;Natural Language Processing with NTLK&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/intro-to-nltk-part-2/"&gt;&lt;strong&gt;Intro to NTLK, Part 2&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/build-a-sentiment-analysis-app-with-movie-reviews/"&gt;&lt;strong&gt;Build a sentiment analysis program&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/practice-session-sentiment-analysis-with-twitter/"&gt;&lt;strong&gt;Sentiment Analysis with Twitter&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/analysing-the-enron-email-corpus/"&gt;&lt;strong&gt;Analysing the Enron Email Corpus&lt;/strong&gt;&lt;/a&gt;: The Enron Email corpus has half a million files spread over 2.5 GB. When looking at data this size, the question is, where do you even start?&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonforengineers.com/build-a-spam-filter/"&gt;&lt;strong&gt;Build a Spam Filter using the Enron Corpus&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;In other news&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;Python Testing with pytest&lt;/a&gt; Beta release and initial feedback is going very well.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#28 The meaning of _ in Python</title><link>https://pythonbytes.fm/episodes/show/28/the-meaning-of-in-python</link><guid>bc6d5aca-5cc1-425b-a53a-0aa62de42079</guid><enclosure url="https://pythonbytes.fm/episodes/download/28/the-meaning-of-in-python.mp3" length="15696574" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 02 Jun 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>The meaning of _ in Python</itunes:title><itunes:episode>28</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:20:59</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt;  &lt;a href="http://pep8.org/"&gt;&lt;strong&gt;pep8.org : PEP 8 — the Style Guide for Python Code&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"This stylized presentation of the well-established PEP 8 was created by Kenneth Reitz (for humans)."&lt;/li&gt;
&lt;li&gt;From PEP 8: "This document gives coding conventions for the Python code comprising the standard library in the main Python distribution."&lt;/li&gt;
&lt;li&gt;PEP8 is not only used for the standard library. Many if not most open source Python packages adhere to at least most of the PEP8 recommendations&lt;/li&gt;
&lt;li&gt;testing plugins can help you make sure your code meets the guidelines (for good or bad).&lt;/li&gt;
&lt;li&gt;The pep8.org presentation is easy to read, with a left side clickable table of contents.&lt;/li&gt;
&lt;li&gt;Nice color coded examples. Green for good, Red for bad.&lt;/li&gt;
&lt;li&gt;links to specific items make it easy to share with others something specific.&lt;/li&gt;
&lt;li&gt;Good advice, but don't be a pep8-bully.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://pypi.python.org/pypi/tokio"&gt;&lt;strong&gt;Tokio: Asyncio event loop written in Rust language&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Asyncio event loop written in Rust language&lt;/li&gt;
&lt;li&gt;It is still in alpha stage. &lt;/li&gt;
&lt;li&gt;It provides most of asyncio event loop apis, except udp. &lt;/li&gt;
&lt;li&gt;TCP api is more or less stable&lt;/li&gt;
&lt;li&gt;Aiohttp tests pass with tokio loop (~1800 tests)&lt;/li&gt;
&lt;li&gt;Mostly interesting as an example of Rust + Python&lt;/li&gt;
&lt;li&gt;Project is still in early stage of development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://www.python-boilerplate.com"&gt;&lt;strong&gt;Python Boilerplate&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Interactive online tool for creating script and small project boilerplate code.&lt;/li&gt;
&lt;li&gt;Just starting, with "how to help" link.&lt;/li&gt;
&lt;li&gt;Select
&lt;ul&gt;
&lt;li&gt;Python 2 or 3&lt;/li&gt;
&lt;li&gt;executable script or not&lt;/li&gt;
&lt;li&gt;argparse&lt;/li&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;li&gt;.gitignore&lt;/li&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;unittest or pytest&lt;/li&gt;
&lt;li&gt;tox&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;fills in main.py, plus other files like test_sample.py, requirements.txt, tox.ini, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.youtube.com/watch?v=66XoCk79kjM"&gt;&lt;strong&gt;Instagram switching to Python 3 on one branch&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ancient Django but still productive&lt;/li&gt;
&lt;li&gt;Ran out of 32-bit user IDs before they ran out of Django power. &lt;/li&gt;
&lt;li&gt;Added sharing support to Django Orem&lt;/li&gt;
&lt;li&gt;Turned off GC for perf&lt;/li&gt;
&lt;li&gt;Upgraded entirely to 3.6 in a few months&lt;/li&gt;
&lt;li&gt;Why?
&lt;ul&gt;
&lt;li&gt;Type hints&lt;/li&gt;
&lt;li&gt;Scaling server perf&lt;/li&gt;
&lt;li&gt;asyncio&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python 3 is where the future community work is happening &lt;/li&gt;
&lt;li&gt;Strategies 
&lt;ul&gt;
&lt;li&gt;No user impact&lt;/li&gt;
&lt;li&gt;Still shipping&lt;/li&gt;
&lt;li&gt;Testing process was interesting&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;This is a concrete roadmap for every large company&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://dbader.org/blog/meaning-of-underscores-in-python"&gt;&lt;strong&gt;The Meaning of Underscores in Python&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;single and double underscore meanings&lt;/li&gt;
&lt;li&gt;dunder is "double underscore"
&lt;ul&gt;
&lt;li&gt;Single Leading Underscore: &lt;code&gt;_var&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;method or variable for internal use&lt;/li&gt;
&lt;li&gt;convention only&lt;/li&gt;
&lt;li&gt;doesn't apply to &lt;code&gt;collection.namedtuple&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Single Trailing Underscore: &lt;code&gt;var_&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;used to avoid name collision with keywords
&lt;ul&gt;
&lt;li&gt;Double Leading Underscore: &lt;code&gt;__var&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;internal use by a single class level.&lt;/li&gt;
&lt;li&gt;Python will name mangle this so that subclasses don't have to avoid parent class double leading underscore names
&lt;ul&gt;
&lt;li&gt;Double Leading and Trailing Underscore: &lt;code&gt;__var__&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;no name mangling&lt;/li&gt;
&lt;li&gt;special names. dunder methods&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__call__&lt;/code&gt; and &lt;code&gt;__init__&lt;/code&gt;, etc.
&lt;ul&gt;
&lt;li&gt;Single Underscore: &lt;code&gt;_&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;in code : temp variable, don't care variable&lt;/li&gt;
&lt;li&gt;won't get a warning if you don't reference it again&lt;/li&gt;
&lt;li&gt;in REPL: last value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://medium.com/@trstringer/the-future-is-looking-bright-for-python-95a748a4ef3e"&gt;&lt;strong&gt;The future is looking bright for Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stack Overflow recently released a cool new tool called &lt;a href="https://insights.stackoverflow.com/trends"&gt;Trends&lt;/a&gt; (previously covered)&lt;/li&gt;
&lt;li&gt;Check out the &lt;a href="https://insights.stackoverflow.com/trends?utm_source=so-owned&amp;amp;utm_medium=blog&amp;amp;utm_campaign=trends&amp;amp;utm_content=blog-link&amp;amp;tags=java%2Cc%2Cc%2B%2B%2Cpython%2Cc%23%2Cvb.net%2Cjavascript%2Cassembly%2Cphp%2Cperl%2Cruby%2Cswift%2Cr%2Cobjective-c"&gt;Most Popular Languages&lt;/a&gt; trend chart&lt;/li&gt;
&lt;li&gt;Python has, by a very large margin, the greatest positive slope (future?)&lt;/li&gt;
&lt;li&gt;And &lt;a href="https://insights.stackoverflow.com/trends?tags=python-2.7%2Cpython-3.x"&gt;Py3 vs Py2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#29 Responsive Bar Charts with Bokeh, Flask, and Python 3</title><link>https://pythonbytes.fm/episodes/show/29/responsive-bar-charts-with-bokeh-flask-and-python-3</link><guid>aac4a98b-94c2-4d6d-9442-c0b6253e5a71</guid><enclosure url="https://pythonbytes.fm/episodes/download/29/responsive-bar-charts-with-bokeh-flask-and-python-3.mp3" length="17305272" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 08 Jun 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Responsive Bar Charts with Bokeh, Flask, and Python 3</itunes:title><itunes:episode>29</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:23:04</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;h1&gt;Python Bytes 29&lt;/h1&gt;

&lt;p&gt;Brought to you by Rollbar! &lt;a href="http://rollbar.com/pythonbytes"&gt;http://rollbar.com/pythonbytes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://www.fullstackpython.com/blog/responsive-bar-charts-bokeh-flask-python-3.html"&gt;&lt;strong&gt;Responsive Bar Charts with Bokeh, Flask and Python 3&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Matt Makai at fullstackpython.com&lt;/li&gt;
&lt;li&gt;A walkthrough example of putting together a flask app that uses Bokeh bar charts to visualize data.&lt;/li&gt;
&lt;li&gt;All steps included, no previous experience with Flask or Bokeh required.&lt;/li&gt;
&lt;li&gt;Nice explanation of what the code does without going into too much detail.&lt;/li&gt;
&lt;li&gt;Good jumping off point for further learning, but complete enough to be useful right away.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://github.com/Miserlou/Zappa"&gt;&lt;strong&gt;Zappa&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://github.com/Miserlou/Zappa"&gt;&lt;strong&gt;Serverless Python Web Services&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Zappa&lt;/strong&gt; makes it super easy to build and deploy all Python WSGI applications on AWS Lambda + API Gateway&lt;/li&gt;
&lt;li&gt;Think of it as "serverless" web hosting for your Python apps. &lt;/li&gt;
&lt;li&gt;That means &lt;strong&gt;infinite scaling&lt;/strong&gt;, &lt;strong&gt;zero downtime&lt;/strong&gt;, &lt;strong&gt;zero maintenance&lt;/strong&gt; - and at a fraction of the cost of your current deployments!&lt;/li&gt;
&lt;li&gt;Better still, with Zappa you only pay for the milliseconds of server time that you use, so it's many &lt;strong&gt;orders of magnitude cheaper&lt;/strong&gt; than VPS/PaaS hosts and in most cases, it's completely free. Plus, there's no need to worry about load balancing or keeping servers online ever again.&lt;/li&gt;
&lt;li&gt;Asynchronous Task Execution: &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    from flask import Flask
    from zappa.async import task
    app = Flask(__name__)

    @task
    def make_pie():
        """ This takes a long time! """
        ingredients = get_ingredients()
        pie = bake(ingredients)
        deliver(pie)

    @app.route('/api/order/pie')
    def order_pie():
        """ This returns immediately! """
        make_pie()
        return "Your pie is being made!"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://www.dominicrodger.com/2013/03/11/local-pip-cache/"&gt;&lt;strong&gt;Using a local cache for pip packages&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;a href="https://pythonbytes.fm/24"&gt;https://pythonbytes.fm/24&lt;/a&gt;, &lt;strong&gt;Local package store,&lt;/strong&gt; we talked about using pip to cache pypi projects to allow offline installation:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ pip download --cachedir [HTML_REMOVED]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ pip install --no-index --find-links=/tmp/wheelhouse somePackage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Well, Dominic does us one better by wrapping these commands in a couple of aliases. &lt;/li&gt;
&lt;li&gt;However, his version uses  &lt;code&gt;pip install&lt;/code&gt; &lt;code&gt;--``download&lt;/code&gt;, which has been deprecated. Here’s a version with the new syntax:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias pipcache='pip download --cache-dir ${HOME}/.pip-packages'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias pipinstall='pip install --no-index --find-links=file://${HOME}/.pip-packages/'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.activestate.com/blog/2017/05/building-game-ai-using-machine-learning-working-tensorflow-keras-and-intel-mkl-python"&gt;&lt;strong&gt;Building game AI using ML: Working with TensorFlow, Keras, and the Intel MKL in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From the ActivePython guys&lt;/li&gt;
&lt;li&gt;a classic arcade space shooter game that features enemies powered by machine learning&lt;/li&gt;
&lt;li&gt;we decided to build a Neural Network to drive the behaviour of the enemies in the game&lt;/li&gt;
&lt;li&gt;For the game part of things, we’re using PyGame&lt;/li&gt;
&lt;li&gt;In the training mode, the enemies fire randomly, and then each shot taken by the enemy is recorded as a hit or a miss along with its initial relative position/velocity values. Every one of these shots becomes a row in the training matrix and the network is trained in “realtime” after every row is added so you can see the network build and develop as you train.&lt;/li&gt;
&lt;li&gt;LESSONS LEARNED
&lt;ul&gt;
&lt;li&gt;Choosing the right data to train your network is important.&lt;/li&gt;
&lt;li&gt;“Prepping” your data is key.&lt;/li&gt;
&lt;li&gt;Experiment with network topology.&lt;/li&gt;
&lt;li&gt;Visualization is important.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://hackebrot.github.io/pytest-tricks/debug_test_failures/"&gt;&lt;strong&gt;Debug Test Failures With Pdb&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Raphael Pierzina&lt;/li&gt;
&lt;li&gt;Debugging code with pytest, using:
&lt;ul&gt;
&lt;li&gt;--pdb to jump into the debugger at the point of failure&lt;/li&gt;
&lt;li&gt;-x to stop after first failure&lt;/li&gt;
&lt;li&gt;--lf to re-run all the tests that failed last time&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; Yes. All this and more is covered in &lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;Python Testing with pytest&lt;/a&gt;. 
&lt;ul&gt;
&lt;li&gt;Shameless plug for my book. Raphael is one of the technical reviewers. &lt;/li&gt;
&lt;li&gt;Thank you, Raphael!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://medium.com/@davidcameron/monitoring-my-voip-provider-with-home-assistant-83a31f0a8cb9"&gt;&lt;strong&gt;Monitoring my VOIP provider with Home Assistant&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Integrating it into Home Assistant:&lt;/strong&gt; Use &lt;a href="http://home-assistant.io/"&gt;home-assistant.io&lt;/a&gt; as a home automation platform in my house. &lt;/li&gt;
&lt;li&gt;It’s written in Python, open source, and has a large community surrounding it. &lt;/li&gt;
&lt;li&gt;Unfortunately, there wasn’t anything already built for my Cisco ATA.&lt;/li&gt;
&lt;li&gt;Decided to write, an open source my first python module called &lt;a href="https://pypi.python.org/pypi/pyciscospa/"&gt;pyciscsospa&lt;/a&gt; you can download it and use it for your own ATA as well.&lt;/li&gt;
&lt;li&gt;Receive a push notification on my phone when the phone lines go down and come back up&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#30 You are not Google and other ruminations</title><link>https://pythonbytes.fm/episodes/show/30/you-are-not-google-and-other-ruminations</link><guid>eefd6b4e-213e-4208-b912-13aad5d4e341</guid><enclosure url="https://pythonbytes.fm/episodes/download/30/you-are-not-google-and-other-ruminations.mp3" length="17280140" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 15 Jun 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>You are not Google and other ruminations</itunes:title><itunes:episode>30</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:24:37</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;h1&gt;Python Bytes 30&lt;/h1&gt;

&lt;p&gt;Sponsored by Datadog: Try Datadog and get a free shirt at &lt;a href="https://pythonbytes.fm/datadog"&gt;pythonbytes.fm/datadog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;strong&gt;Problems and Solutions are different at different scales&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.bradfieldcs.com/you-are-not-google-84912cf44afb"&gt;You are not Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aadrake.com/posts/2017-05-20-enough-with-the-microservices.html"&gt;Enough with microservices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://blog.zappa.io/posts/introducing-nodb-pythonic-data-store-s3"&gt;&lt;strong&gt;Introducing NoDB - a Pythonic Object Store for S3&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Released in April 2017 by Rich Jones&lt;/li&gt;
&lt;li&gt;An incredibly simple, Pythonic object store based on Amazon's S3 static file storage.&lt;/li&gt;
&lt;li&gt;NoDB isn't a database.. but it sort of looks like one!&lt;/li&gt;
&lt;li&gt;Kind of like a document database, supports indexing&lt;/li&gt;
&lt;li&gt;Can use Pickling or JSON&lt;/li&gt;
&lt;li&gt;Mostly useful for &lt;strong&gt;prototyping&lt;/strong&gt;, &lt;strong&gt;casual hacking&lt;/strong&gt;, and (maybe) even low-traffic &lt;strong&gt;server-less databases&lt;/strong&gt; for &lt;a href="https://github.com/Miserlou/Zappa"&gt;&lt;strong&gt;Zappa&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;apps&lt;/strong&gt;!&lt;/li&gt;
&lt;li&gt;Can see a few use cases for &lt;strong&gt;NoDB&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Prototyping schemas&lt;/li&gt;
&lt;li&gt;Storing API event responses for later replay&lt;/li&gt;
&lt;li&gt;Capturing event logs&lt;/li&gt;
&lt;li&gt;Storing simple form data (email addresses, etc.)&lt;/li&gt;
&lt;li&gt;Storing non-relational analytics data&lt;/li&gt;
&lt;li&gt;Firing Lambda event triggers&lt;/li&gt;
&lt;li&gt;Version controlling evolving Python objects&lt;/li&gt;
&lt;li&gt;Storing and loading trained machine learning models&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;https://github.com/Miserlou/NoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://github.com/lk-geimfari/elizabeth"&gt;&lt;strong&gt;Elizabeth for mock data&lt;/strong&gt;&lt;/a&gt;
Part 1: https://medium.com/wemake-services/generating-mock-data-using-elizabeth-part-i-ca5a55b8027c
Part 2: https://medium.com/wemake-services/generating-mock-data-with-elizabeth-part-ii-bb16a3f3106f
pytest plugin: https://github.com/lk-geimfari/pytest-elizabeth&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://docs.python.org/3.7/whatsnew/3.7.html"&gt;&lt;strong&gt;What’s New In Python 3.7&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lang: More than 255 arguments can now be passed to a function, and a function can now have more than 255 parameters.&lt;/li&gt;
&lt;li&gt;Lang: &lt;code&gt;bytes.fromhex()&lt;/code&gt; and &lt;code&gt;bytearray.fromhex()&lt;/code&gt; now ignore all ASCII whitespace, not only spaces.&lt;/li&gt;
&lt;li&gt;Lang: Circular imports involving absolute imports with binding a submodule to a name are now supported.&lt;/li&gt;
&lt;li&gt;Module: &lt;code&gt;contextlib.asynccontextmanager()&lt;/code&gt; has been added.
&lt;ul&gt;
&lt;li&gt;Similar to &lt;code&gt;contextmanager()&lt;/code&gt;, but creates an asynchronous context manager.&lt;/li&gt;
&lt;li&gt;This function is a decorator that can be used to define a factory function for async with statement asynchronous context managers, without needing to create a class or separate &lt;code&gt;__aenter__()&lt;/code&gt; and &lt;code&gt;__aexit__()&lt;/code&gt; methods.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Module:The dis() function now is able to disassemble nested code objects (the code of comprehensions, generator expressions and nested functions, and the code used for building nested classes).&lt;/li&gt;
&lt;li&gt;Module: math: New &lt;code&gt;remainder()&lt;/code&gt; function, implementing the IEEE 754-style remainder operation.&lt;/li&gt;
&lt;li&gt;Optimization: Added two new opcodes: &lt;code&gt;LOAD_METHOD&lt;/code&gt; and &lt;code&gt;CALL_METHOD&lt;/code&gt; to avoid instantiation of bound method objects for method calls, which &lt;strong&gt;results in&lt;/strong&gt; &lt;strong&gt;method calls being faster up to 20%&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Optimization: The &lt;code&gt;os.fwalk()&lt;/code&gt; function has been sped up by 2 times.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5: Hypothesis Testing&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wordaligned.org/articles/unleash-the-test-army"&gt;Unleash the Test Army&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.reddit.com/r/Python/comments/6fvgrf/heroku_switching_default_to_v361/"&gt;&lt;strong&gt;Heroku switching default to v3.6.1&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Effective Tuesday, June 20th, 2017, new Python applications pushed to Heroku will use the python-3.6.1 runtime by default (instead of python-2.7.13).&lt;/li&gt;
&lt;li&gt;Existing applications will not be affected by this change.&lt;/li&gt;
&lt;li&gt;“Lots of new projects start out on heroku all the time, so this is really great news for python 3 adoption.”&lt;/li&gt;
&lt;li&gt;“Python 3 is really happening. I was actually a little worried about the future of Python for a while.”&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#31 You should have a change log</title><link>https://pythonbytes.fm/episodes/show/31/you-should-have-a-change-log</link><guid>eaf666af-5bfa-4777-b61a-8e4e4b254161</guid><enclosure url="https://pythonbytes.fm/episodes/download/31/you-should-have-a-change-log.mp3" length="15623808" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 21 Jun 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>You should have a change log</itunes:title><itunes:episode>31</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:21:50</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://github.com/schapman1974/tinymongo"&gt;&lt;strong&gt;TinyMongo&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Like MongoDB, but built on top of TinyDB.&lt;/li&gt;
&lt;li&gt;Even runs on a Raspberry Pi, according to Stephen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://github.com/shopnilsazal/validus"&gt;&lt;strong&gt;A dead simple Python data validation library&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;validus.isemail('someone@example.com')&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Validation functions include:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;isrgbcolor()&lt;/li&gt;
&lt;li&gt;isphone()&lt;/li&gt;
&lt;li&gt;isisbn()&lt;/li&gt;
&lt;li&gt;isipv4()&lt;/li&gt;
&lt;li&gt;isint()&lt;/li&gt;
&lt;li&gt;isfloat()&lt;/li&gt;
&lt;li&gt;isslug()&lt;/li&gt;
&lt;li&gt;isuuid()
&lt;ul&gt;
&lt;li&gt;Requires Python 3.3+&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://documen.tician.de/pudb/index.html"&gt;&lt;strong&gt;PuDB&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In episode 29, &lt;a href="https://pythonbytes.fm/29"&gt;https://pythonbytes.fm/29&lt;/a&gt;, I talked about launching pdb from pytest failures.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/kidpixo"&gt;@kidpixo&lt;/a&gt; pointed out that PuDB was a better debugger and can also be launched from pytest failures.&lt;/li&gt;
&lt;li&gt;Starting pudb from pytest failed tests (from &lt;a href="https://documen.tician.de/pudb/starting.html#usage-with-pytest"&gt;docs&lt;/a&gt;): 
&lt;code&gt;pytest --pdbcls pudb.debugger:Debugger --pdb --capture=no&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Using &lt;a href="https://pypi.python.org/pypi/pytest-pudb"&gt;pytest-pudb&lt;/a&gt; plugin to do the same:
&lt;code&gt;pytest --pudb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://pyup.io/posts/analyzing-django-requirement-files-on-github/"&gt;&lt;strong&gt;Analyzing Django requirement files on GitHub&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From the pyup.io guys&lt;/li&gt;
&lt;li&gt;Django is the most popular Python web framework. &lt;/li&gt;
&lt;li&gt;It is now almost 12 years old and is used on all kinds of different projects.&lt;/li&gt;
&lt;li&gt;Django developers pin their requirements (64%): Pinned or freezed requirements (Django==1.8.12) make builds predictable and deterministic.&lt;/li&gt;
&lt;li&gt;Django 1.8 is the most popular major release (24%)
&lt;ul&gt;
&lt;li&gt;A bit worrisome are the 1.9 (14%), 1.7 (13%) and 1.6 (13%) releases on the second, third and fourth place. All of them are no longer receiving security updates, 1.7 and 1.6 went EOL over 2 years ago.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Yikes: Only 2% of all Django projects are on a secure release
&lt;ul&gt;
&lt;li&gt;Among all projects, more than 60% use a Django release with one or more known security vulnerabilities. Only 2% are using a secure Django release.&lt;/li&gt;
&lt;li&gt;On the remaining part of more than 30% it's unclear what exactly is going to be installed. That's because the Django release is either unpinned or has a range.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;strong&gt;Changelogs&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://keepachangelog.com"&gt;http://keepachangelog.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hawkowl/towncrier"&gt;https://github.com/hawkowl/towncrier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://dbader.org/blog/understanding-asynchronous-programming-in-python"&gt;&lt;strong&gt;Understanding Asynchronous Programming in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Doug Farrell via Dan Bader’s site&lt;/li&gt;
&lt;li&gt;A synchronous program is what most of us started out writing, and can be thought of as performing one execution step at a time, one after another.&lt;/li&gt;
&lt;li&gt;Example: A web server
&lt;ul&gt;
&lt;li&gt;Could be synchronous&lt;/li&gt;
&lt;li&gt;Could be fully optimized but&lt;/li&gt;
&lt;li&gt;You’re at best still waiting on network IO back to all the web clients&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The Real World is Asynchronous: &lt;em&gt;Kids are a long running task with high priority, superseding any other task we might be doing, like the checkbook or laundry&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Example 1: Synchronous Programming (using queuing)&lt;/li&gt;
&lt;li&gt;Example 2: Simple Cooperative Concurrency (using generators)&lt;/li&gt;
&lt;li&gt;Example 3: Cooperative Concurrency With Blocking Calls (same, but with slow operations)&lt;/li&gt;
&lt;li&gt;Example 4: Cooperative Concurrency With Non-Blocking Calls (gevent)&lt;/li&gt;
&lt;li&gt;Example 5: Synchronous (Blocking) HTTP Downloads&lt;/li&gt;
&lt;li&gt;Example 6: Asynchronous (Non-Blocking) HTTP Downloads With gevent&lt;/li&gt;
&lt;li&gt;Example 7: Asynchronous (Non-Blocking) HTTP Downloads With Twisted&lt;/li&gt;
&lt;li&gt;Example 8: Asynchronous (Non-Blocking) HTTP Downloads With Twisted Callbacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Errata/Giving Credit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Also in episode 29, &lt;a href="https://pythonbytes.fm/29"&gt;https://pythonbytes.fm/29&lt;/a&gt;, I talked about pipcache as an alias for pip download. I think I said the author of a blog post contacted me. It wasn’t him. It was &lt;a href="https://twitter.com/kidpixo"&gt;@kidpixo&lt;/a&gt;. Sorry kidpixo, keep the ideas coming.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For fun: Python Private Methods&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://turnoff.us/geek/python-private-methods/"&gt;http://turnoff.us/geek/python-private-methods/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our news&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Beta 3 of &lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;Python Testing with pytest&lt;/a&gt; should come out this week with Chapter 7: Using pytest with other tools, which includes using it with pdb, coverage.py, mock, tox, and Jenkins.
&lt;ul&gt;
&lt;li&gt;Next beta will be the appendices, including a clean up and rewrite of pip and venv appendices, plus a plugin sampler pack, and a tutorial on packaging.&lt;/li&gt;
&lt;li&gt;Thanks to everyone who has submitted Errata. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Finished recording RESTful and HTTP Services in Pyramid AND MongoDB for Python Developers. Add your email address at &lt;a href="https://training.talkpython.fm"&gt;https://training.talkpython.fm&lt;/a&gt; to get notified upon release of each.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#32 8 ways to contribute to open source when you have no time</title><link>https://pythonbytes.fm/episodes/show/32/8-ways-to-contribute-to-open-source-when-you-have-no-time</link><guid>f3f51bb4-3e11-4fa5-9b6d-4096e381c08f</guid><enclosure url="https://pythonbytes.fm/episodes/download/32/8-ways-to-contribute-to-open-source-when-you-have-no-time.mp3" length="55739172" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Sat, 01 Jul 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>8 ways to contribute to open source when you have no time</itunes:title><itunes:episode>32</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:23:10</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt;  &lt;a href="https://medium.com/@plotlygraphs/introducing-dash-5ecf7191b503"&gt;&lt;strong&gt;Introducing Dash&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UI library for analytical web applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://lwn.net/Articles/723949/"&gt;&lt;strong&gt;Keeping Python competitive&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Article on LWN, interview with Victor Stinner&lt;/li&gt;
&lt;li&gt;He sees a need to improve Python performance in order to keep it competitive with other languages.&lt;/li&gt;
&lt;li&gt;Not as easy to optimize as other languages. For one thing, the C API blocks progress in this area&lt;/li&gt;
&lt;li&gt;Python 3.7 is as fast as Python 2.7 on most benchmarks, but 2.7 was released in 2010. Users are now comparing Python performance to that of Rust or Go, which had only been recently announced in 2010. &lt;/li&gt;
&lt;li&gt;In his opinion, the Python core developers need to find a way to speed Python up by a factor of two in order for it to continue to be successful.&lt;/li&gt;
&lt;li&gt;JITs may be part of the answer, notably Pyjion by Dino Viehland and Brett Cannon&lt;/li&gt;
&lt;li&gt;An attendee suggested Cython, which does AoT compilation, but its types are not Pythonic. He suggested that it might be possible to use the new type hints and Cython to create something more Pythonic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/"&gt;&lt;strong&gt;PyPI Quick and Dirty&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A completely incomplete guide to packaging a Python module and sharing it with the world on PyPI. - Hynek Schlawack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://github.com/keon/algorithms"&gt;&lt;strong&gt;Minimal examples of data structures and algorithms in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple algorithmic examples in Python, including
&lt;ul&gt;
&lt;li&gt;linked lists&lt;/li&gt;
&lt;li&gt;reversing linked lists&lt;/li&gt;
&lt;li&gt;GCD&lt;/li&gt;
&lt;li&gt;Queues&lt;/li&gt;
&lt;li&gt;Binary search&lt;/li&gt;
&lt;li&gt;depth first search&lt;/li&gt;
&lt;li&gt;many, many more&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://opensource.com/article/17/6/find-time-contribute"&gt;&lt;strong&gt;8 ways to contribute to open source when you have no time&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.numfocus.org/blog/numpy-receives-first-ever-funding-thanks-to-moore-foundation/"&gt;&lt;strong&gt;NumPy receives first ever funding, thanks to Moore Foundation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the first time ever, NumPy—a core project for the Python scientific computing stack—has received grant funding.&lt;/li&gt;
&lt;li&gt;The proposal, “&lt;a href="https://www.moore.org/grant-detail?grantId=GBMF5447"&gt;Improving NumPy for Better Data Science&lt;/a&gt;” will receive $645,020 from the Moore Foundation over 2 years, with the funding going to UC Berkeley Institute for Data Science. &lt;/li&gt;
&lt;li&gt;The principal investigator is &lt;a href="https://bids.berkeley.edu/people/nathaniel-smith"&gt;Dr. Nathaniel Smith&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The NumPy project was started in 2006 by &lt;a href="https://www.numfocus.org/about/people/advisory-council/"&gt;Travis Oliphant&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#33 You should build an Alexa skill</title><link>https://pythonbytes.fm/episodes/show/33/you-should-build-an-alexa-skill</link><guid>5a83c8d5-8259-448e-88eb-82a76601e82d</guid><enclosure url="https://pythonbytes.fm/episodes/download/33/you-should-build-an-alexa-skill.mp3" length="13044969" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 06 Jul 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>You should build an Alexa skill</itunes:title><itunes:episode>33</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:17:49</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Rollbar! &lt;a href="https://pythonbytes.fm/rollbar"&gt;pythonbytes.fm/rollbar&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://dev.to/sethmichaellarson/linting-as-lightweight-defect-detection-for-python"&gt;&lt;strong&gt;Linting as Lightweight Defect Detection for Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;flake8, &lt;/li&gt;
&lt;li&gt;pycodestyle, formerly pep8 tool &lt;a href="https://pycodestyle.readthedocs.io/en/latest/"&gt;https://pycodestyle.readthedocs.io/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pep257 can be checked with flake8-docstrings&lt;/li&gt;
&lt;li&gt;pydocstyle, &lt;a href="http://www.pydocstyle.org/"&gt;http://www.pydocstyle.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://medium.com/@jacquelinewilson/amazon-alexa-skill-recipe-1444e6ee45a6"&gt;&lt;strong&gt;You should build an Alexa skill&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jacqueline Wilson wrote &lt;em&gt;Amazon Alexa Skill Recipe with Python 3.6&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Ingredients:
&lt;ul&gt;
&lt;li&gt;A developer account on &lt;a href="https://developer.amazon.com"&gt;https://developer.amazon.com&lt;/a&gt; (“Amazon Developer Console”)&lt;/li&gt;
&lt;li&gt;An AWS account on &lt;a href="https://aws.amazon.com"&gt;https://aws.amazon.com&lt;/a&gt; (“AWS Console”)&lt;/li&gt;
&lt;li&gt;Beginner knowledge of Python 3.x syntax&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create a “What’s for dinner” bot&lt;/li&gt;
&lt;li&gt;Amazon calls these utterances:
&lt;ul&gt;
&lt;li&gt;“What should I have for dinner?”&lt;/li&gt;
&lt;li&gt;“Do you have a dinner idea?”&lt;/li&gt;
&lt;li&gt;“What’s for dinner?”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Tie the commands to an AWS Lambda function (returns a JSON response)&lt;/li&gt;
&lt;li&gt;Test via &lt;a href="https://echosim.io"&gt;Alexa Skill Testing Tool&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://github.com/damianavila/RISE"&gt;&lt;strong&gt;RISE&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reveal IPython Slide Extension&lt;/li&gt;
&lt;li&gt;Making slides with Jupyter notebooks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://haarcuba.github.io/closer/"&gt;&lt;strong&gt;Closer&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run, monitor and close remote SSH processes automatically&lt;/li&gt;
&lt;li&gt;Closer was born because I had trouble with killing up processes I set up remotely via SSH. That is, you want to run some SSH process in the background, and then you want to kill it, just like you would a local subprocess.&lt;/li&gt;
&lt;li&gt;Main features:
&lt;ul&gt;
&lt;li&gt;kill the remote process (either by choice, or automatically at the end of the calling process)&lt;/li&gt;
&lt;li&gt;capture the remote process’s output&lt;/li&gt;
&lt;li&gt;live monitoring of remote process output&lt;/li&gt;
&lt;li&gt;get a callback upon remote process’ death&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="http://python.apichecklist.com/"&gt;&lt;strong&gt;Checklist for&lt;/strong&gt;&lt;/a&gt; &lt;a href="http://python.apichecklist.com/"&gt;&lt;strong&gt;&lt;em&gt;*&lt;/a&gt;&lt;a href="http://python.apichecklist.com/"&gt;&lt;/strong&gt;Python libraries APIs&lt;/em&gt;*&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://fades.readthedocs.io/en/release_6_0/readme.html"&gt;&lt;strong&gt;Fades&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fades is a system that automatically handles the virtualenvs in the cases normally found when writing scripts and simple programs, and even helps to administer big projects.&lt;/li&gt;
&lt;li&gt;fades will automagically create a new virtualenv (or reuse a previous created one), installing the necessary dependencies, and execute your script inside that virtualenv, with the only requirement of executing the script with fades and also marking the required dependencies.&lt;/li&gt;
&lt;li&gt;At the moment you execute the script, fades will search a virtualenv with the marked dependencies, if it doesn’t exists fades will create it, and execute the script in that environment.&lt;/li&gt;
&lt;li&gt;Indicating dependencies (in code or via CLI)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    import somemodule   # fades == 3
    import somemodule   # fades &amp;gt;= 2.1
    import somemodule   # fades &amp;gt;=2.1,&amp;amp;lt;2.8,!=2.6.5
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Can control the Python version the env is based upon&lt;/li&gt;
&lt;li&gt;Can ask for a “refresh” on the virtual env&lt;/li&gt;
&lt;li&gt;You can also configure fades using .ini config files.&lt;/li&gt;
&lt;li&gt;How to clean up old virtualenvs?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Listener comment,&lt;/strong&gt; &lt;a href="https://pythonbytes.fm/episodes/show/32/8-ways-to-contribute-to-open-source-when-you-have-no-time#comment-3400891427"&gt;&lt;strong&gt;RE: Episode 32&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jan Oglop:  &lt;/p&gt;

&lt;p&gt;Hello Michael and Brian, I wanted to thank you for amazing work you do. And let you know that you have helped me to find the working place from my dreams! My colleagues has similar hobbies and loves python as much as I do!&lt;/p&gt;

&lt;p&gt;Thank you again!&lt;/p&gt;</description></item><item><title>#34 The Real Threat of Artificial Intelligence</title><link>https://pythonbytes.fm/episodes/show/34/the-real-threat-of-artificial-intelligence</link><guid>3fc90e8b-65ab-4bf7-9700-aba187b96713</guid><enclosure url="https://pythonbytes.fm/episodes/download/34/the-real-threat-of-artificial-intelligence.mp3" length="16707368" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 13 Jul 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>The Real Threat of Artificial Intelligence</itunes:title><itunes:episode>34</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:22:57</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Rollbar! Get the bootstrap plan at &lt;a href="https://pythonbytes.fm/rollbar"&gt;pythonbytes.fm/rollbar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://julien.danjou.info/blog/python-logging-easy-with-daiquiri"&gt;&lt;strong&gt;Easy Python logging with daiquiri&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Standard library logging package is non-intuitive. &lt;/li&gt;
&lt;li&gt;Daiquiri is better.&lt;/li&gt;
&lt;li&gt;Logs to stderr by default.&lt;/li&gt;
&lt;li&gt;Use colors if logging to a terminal.&lt;/li&gt;
&lt;li&gt;Support file logging.&lt;/li&gt;
&lt;li&gt;Use program name as the name of the logging file so providing just a directory for logging will work.&lt;/li&gt;
&lt;li&gt;Support syslog.&lt;/li&gt;
&lt;li&gt;Support journald.&lt;/li&gt;
&lt;li&gt;JSON output support.&lt;/li&gt;
&lt;li&gt;Support of arbitrary key/value context information providing.&lt;/li&gt;
&lt;li&gt;Capture the warnings emitted by the warnings module.&lt;/li&gt;
&lt;li&gt;Native logging of any exception.&lt;/li&gt;
&lt;li&gt;This works:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    import daiquiri
    daiquiri.setup()
    logger = daiquiri.getLogger()
    logger.error("something wrong happened")
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Also check out &lt;a href="https://github.com/metachris/logzero/blob/master/README.rst"&gt;logzero&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
    from logzero import logger
    logger.debug("hello")
    logger.info("info")
    logger.warn("warn")
    logger.error("error")
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.nytimes.com/2017/06/24/opinion/sunday/artificial-intelligence-economic-inequality.html"&gt;&lt;strong&gt;The Real Threat of Artificial Intelligence&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What worries you about the coming world of artificial intelligence?&lt;/li&gt;
&lt;li&gt;Too often the answer to this question resembles the plot of a sci-fi thriller. People worry that developments in A.I. will bring about the “singularity”&lt;/li&gt;
&lt;li&gt;This doesn’t mean we have nothing to worry about. &lt;/li&gt;
&lt;li&gt;On the contrary, the A.I. products that now exist are improving faster than most people realize and promise to radically transform our world, not always for the better&lt;/li&gt;
&lt;li&gt;AI will reshape what work means and how wealth is created, leading to unprecedented economic inequalities and even altering the global balance of power&lt;/li&gt;
&lt;li&gt;This kind of A.I. is spreading to thousands of domains (not just loans), and as it does, it will eliminate many jobs. Bank tellers, customer service representatives, telemarketers, stock and bond traders, even paralegals and radiologists will gradually be replaced by such software.&lt;/li&gt;
&lt;li&gt;Part of the answer will involve educating or retraining people in tasks A.I. tools aren’t good at. Artificial intelligence is poorly suited for jobs involving creativity, planning and “cross-domain” thinking — for example, the work of a trial lawyer. &lt;/li&gt;
&lt;li&gt;The solution to the problem of mass unemployment, I suspect, will involve “service jobs of love.” These are jobs that A.I. cannot do, that society needs and that give people a sense of purpose. Examples include accompanying an older person to visit a doctor, mentoring at an orphanage&lt;/li&gt;
&lt;li&gt;This leads to the final and perhaps most consequential challenge of A.I. The Keynesian approach I have sketched out may be feasible in the United States and China, which will have enough successful A.I. businesses to fund welfare initiatives via taxes. But what about other countries?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://blog.buildo.io/the-three-laws-of-config-dynamics-1e9724593aa9"&gt;&lt;strong&gt;The three laws of config dynamics&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The birth of configuration files&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Law 1&lt;/strong&gt; Config values can be transformed from one form to another, but can be neither created nor destroyed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Law 2&lt;/strong&gt; The total length of a config file can only increase over time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Law 3&lt;/strong&gt; The length of a perfect config file in a development environment is exactly equal to zero.&lt;/li&gt;
&lt;li&gt;Docker can help&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://medium.com/arcgis-api-for-python-explorers-corner/a-few-tips-to-get-you-started-with-jupyter-notebook-8f9b172d98cb"&gt;&lt;strong&gt;Five Tips To Get You Started With Jupyter Notebook&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don’t Put Your Entire Code in a Single Cell&lt;/li&gt;
&lt;li&gt;There are different types of cells&lt;/li&gt;
&lt;li&gt;Executing Cells (shift + enter)&lt;/li&gt;
&lt;li&gt;Explore Interactive Mapping Options (via ArcGIS)&lt;/li&gt;
&lt;li&gt;To explore new modules, use questions and TAB auto-complete (Object?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://m.facebook.com/notes/kent-beck/cost-of-coupling-versus-cost-of-de-coupling/1578239345542257/"&gt;&lt;strong&gt;Cost of Coupling Versus Cost of De-coupling&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two elements are coupled wrt a given change iff changing one element implies changing the other.&lt;/li&gt;
&lt;li&gt;Decoupled code, or loosely coupled, follows DRY principles, uses smaller components, is more modular, etc. But also has more files, more classes, handles more cases, and takes longer to write.&lt;/li&gt;
&lt;li&gt;There is a place for both. &lt;/li&gt;
&lt;li&gt;Kent describes two phases, Explore and Extract.&lt;/li&gt;
&lt;li&gt;Explore
&lt;ul&gt;
&lt;li&gt;more learning&lt;/li&gt;
&lt;li&gt;tracer bullets, spike projects, first drafts, happy path implementation&lt;/li&gt;
&lt;li&gt;coupled code, copy/paste coding, etc work fine and are faster because the design and architecture aren’t the goal, learning is the goal&lt;/li&gt;
&lt;li&gt;answer questions quickly&lt;/li&gt;
&lt;li&gt;ask better questions based on learnings&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Extract
&lt;ul&gt;
&lt;li&gt;Candidate Release, final draft, architected&lt;/li&gt;
&lt;li&gt;Economies of scale take over&lt;/li&gt;
&lt;li&gt;Return on investment&lt;/li&gt;
&lt;li&gt;Minimize cost of changes as code base grows.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://pybit.es/special-100days-of-code.html"&gt;&lt;strong&gt;100 Days of Code at PyBites&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Challenge: &lt;a href="https://medium.freecodecamp.org/join-the-100daysofcode-556ddb4579e4"&gt;Join the #100DaysOfCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stats: &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/100"&gt;We wrote roughly 5K lines of code&lt;/a&gt;, divided into 100 scripts, one each day&lt;/li&gt;
&lt;li&gt;We &lt;a href="https://github.com/pybites/100DaysOfCode/tree/master/007"&gt;auto-tweeted&lt;/a&gt; our progress each day which was tracked in our &lt;a href="https://github.com/pybites/100DaysOfCode/blob/master/LOG.md"&gt;log file&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Module Index: We ended up using exactly 100 modules as well (weird coincidence LOL)&lt;/li&gt;
&lt;li&gt;Showcase of 10 Utilities&lt;/li&gt;
&lt;li&gt;The rumors are true: our next 100 days project will be around learning Django&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extra:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First book review of up, &lt;a href="http://chrisshaver64.ddns.net/bl0046"&gt;http://chrisshaver64.ddns.net/bl0046&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python for Entrepreneurs has officially launch! Over 19 hours of content. Get it at &lt;a href="https://talkpython.fm/launch"&gt;https://talkpython.fm/launch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#35 How developers change programming languages over time</title><link>https://pythonbytes.fm/episodes/show/35/how-developers-change-programming-languages-over-time</link><guid>123a1d7f-4d62-4465-874c-5274e42d346b</guid><enclosure url="https://pythonbytes.fm/episodes/download/35/how-developers-change-programming-languages-over-time.mp3" length="17872991" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 19 Jul 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>How developers change programming languages over time</itunes:title><itunes:episode>35</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:24:44</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://medium.com/@PhilipTrauner/python-quirks-comments-324bbf88612c"&gt;&lt;strong&gt;Python Quirks&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://medium.com/@PhilipTrauner/python-quirks-comments-324bbf88612c"&gt;&lt;strong&gt;: Comments&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python developers put comments in their code.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    # Like this
    """
    And like this
    """
    "And like this."
    ["Not usually like this","but it's possible"]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Philip Trauner timed all of these.&lt;/li&gt;
&lt;li&gt;Actual # comments are obviously way faster.&lt;/li&gt;
&lt;li&gt;He also shows the AST difference.&lt;/li&gt;
&lt;li&gt;Don’t abuse the language. Unused unreferenced strings are not free.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://docs.python.org/3.6/whatsnew/changelog.html#python-3-6-2"&gt;&lt;strong&gt;Python 3.6.2 is out!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;bpo-30730: Prevent environment variables injection in subprocess on Windows. Prevent passing other environment variables and command arguments.&lt;/li&gt;
&lt;li&gt;bpo-30694: Upgrade expat copy from 2.2.0 to 2.2.1 to get fixes of multiple security vulnerabilities including: CVE-2017-9233 (External entity infinite loop DoS), CVE-2016-9063 (Integer overflow, re-fix), CVE-2016-0718 (Fix regression bugs from 2.2.0’s fix to CVE-2016-0718) and CVE-2012-0876 (Counter hash flooding with SipHash). Note: the CVE-2016-5300 (Use os-specific entropy sources like getrandom) doesn’t impact Python, since Python already gets entropy from the OS to set the expat secret using XML_SetHashSalt().&lt;/li&gt;
&lt;li&gt;bpo-30500: Fix urllib.parse.splithost() to correctly parse fragments. For example, splithost('//127.0.0.1#@evil.com/') now correctly returns the 127.0.0.1 host, instead of treating @evil.com as the host in an authentification (login@host).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Core and Builtins&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;bpo-29104: Fixed parsing backslashes in f-strings.&lt;/li&gt;
&lt;li&gt;bpo-27945: Fixed various segfaults with dict when input collections are mutated during searching, inserting or comparing. Based on patches by Duane Griffin and Tim Mitchell.&lt;/li&gt;
&lt;li&gt;bpo-30039: If a KeyboardInterrupt happens when the interpreter is in the middle of resuming a chain of nested ‘yield from’ or ‘await’ calls, it’s now correctly delivered to the innermost frame.&lt;/li&gt;
&lt;li&gt;Library&lt;/li&gt;
&lt;li&gt;bpo-30038: Fix race condition between signal delivery and wakeup file descriptor. Patch by Nathaniel Smith.&lt;/li&gt;
&lt;li&gt;bpo-23894: lib2to3 now recognizes rb'...' and f'...' strings.&lt;/li&gt;
&lt;li&gt;bpo-24484: Avoid race condition in multiprocessing cleanup (#2159)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;bpo-30687: Locate msbuild.exe on Windows when building rather than vcvarsall.bat&lt;/li&gt;
&lt;li&gt;bpo-30450: The build process on Windows no longer depends on Subversion, instead pulling external code from GitHub via a Python script. If Python 3.6 is not found on the system (via py -3.6), NuGet is used to download a copy of 32-bit Python.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plus about 40 more fixes / changes&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://github.com/adriennefriend/imposter-syndrome-disclaimer"&gt;&lt;strong&gt;Contributing to Open Source Projects: Imposter Syndrome Disclaimer&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“How to contribute” often part of OSS projects.&lt;/li&gt;
&lt;li&gt;Adrienne Lowe of codingwithknives.com has an “Imposter Syndrome Disclaimer” to include in your contributing documentation that’s pretty great.&lt;/li&gt;
&lt;li&gt;She’s also &lt;a href="https://github.com/adriennefriend/imposter-syndrome-disclaimer/blob/master/examples.md"&gt;collecting examples&lt;/a&gt; of people using it, or similar.&lt;/li&gt;
&lt;li&gt;From the disclaimer: &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;“&lt;em&gt;Imposter syndrome disclaimer&lt;/em&gt;: I want your help. No really, I do.
  There might be a little voice inside that tells you you're not ready; that you need to do one more tutorial, or learn another framework, or write a few more blog posts before you can help me with this project.
  I assure you, that's not the case.
  …
  And you don't just have to write code. You can help out by writing documentation, tests, or even by giving feedback about this work. (And yes, that includes giving feedback about the contribution guidelines.)“&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.technologyreview.com/s/604087/the-dark-secret-at-the-heart-of-ai/"&gt;&lt;strong&gt;The Dark Secret at the Heart of AI&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via MIT Technology Review&lt;/li&gt;
&lt;li&gt;There’s a big problem with AI: even its creators can’t explain how it works&lt;/li&gt;
&lt;li&gt;Last year, an experimental vehicle, developed by researchers at the chip maker Nvidia, didn’t look different from other autonomous cars, but it was unlike anything demonstrated by Google, Tesla, or General Motors, and it showed the rising power of artificial intelligence. The car didn’t follow a single instruction provided by an engineer or programmer. Instead, it relied entirely on an algorithm that had taught itself to drive by watching a human do it.&lt;/li&gt;
&lt;li&gt;The result seems to match the responses you’d expect from a human driver. But what if one day it did something unexpected—crashed into a tree, or sat at a green light? &lt;/li&gt;
&lt;li&gt;As things stand now, it might be difficult to find out why.&lt;/li&gt;
&lt;li&gt;And you can’t ask it: there is no obvious way to design such a system so that it could always explain why it did what it did.&lt;/li&gt;
&lt;li&gt;There’s already an argument that being able to interrogate an AI system about how it reached its conclusions is a fundamental legal right&lt;/li&gt;
&lt;li&gt;We’ve never before built machines that operate in ways their creators don’t understand. How well can we expect to communicate—and get along with—intelligent machines that could be unpredictable and inscrutable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt;  &lt;a href="http://jamescooke.info/arrange-act-assert-pattern-for-python-developers.html"&gt;&lt;strong&gt;Arrange Act Assert pattern for Python developers&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;James Cooke&lt;/li&gt;
&lt;li&gt;Good introduction to test case structure.&lt;/li&gt;
&lt;li&gt;Split your tests into setup, action, assertions.&lt;/li&gt;
&lt;li&gt;Pattern also known by:
&lt;ul&gt;
&lt;li&gt;Given, When, Then&lt;/li&gt;
&lt;li&gt;Setup, Test, Teardown&lt;/li&gt;
&lt;li&gt;Setup, Exercise, Verify, Teardown&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Also covered in:
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://testandcode.com/10"&gt;testandcode.com/10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythontesting.net/strategy/given-when-then-2/"&gt;pythontesting.net/strategy/given-when-then-2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://blog.sourced.tech/post/language_migrations/"&gt;&lt;strong&gt;Analyzing GitHub, how developers change programming languages over time&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From source{d}: Building the first AI that understands code&lt;/li&gt;
&lt;li&gt;Have you ever been struggling with an nth obscure project, thinking : “I could do the job with this language but why not switch to another one which would be more enjoyable to work with” ?&lt;/li&gt;
&lt;li&gt;Derived from &lt;a href="https://erikbern.com/2017/03/15/the-eigenvector-of-why-we-moved-from-language-x-to-language-y.html"&gt;&lt;strong&gt;The eigenvector of “Why we moved from language X to language Y”&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;,&lt;/strong&gt; &lt;a href="https://github.com/erikbern/eigenstuff"&gt;&lt;strong&gt;Erik Bernhardsson&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;*&lt;/em&gt;*&lt;/li&gt;
&lt;li&gt;Dataset available
&lt;ul&gt;
&lt;li&gt;4.5 Million GitHub users&lt;/li&gt;
&lt;li&gt;393 different languages&lt;/li&gt;
&lt;li&gt;10 TB of source code in total&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I find it nice to visualize developer’s language usage history with a kind of &lt;a href="https://en.wikipedia.org/wiki/Gantt_chart"&gt;&lt;strong&gt;Gantt diagram&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We did not include Javascript because&lt;/li&gt;
&lt;li&gt;Most popular languages on GitHub&lt;/li&gt;
&lt;li&gt;At last! Here is the reward: the stationary distribution of our Markov chain. This probability distribution is independent of the initial distribution. It gives information about the stability of the process of random switching between languages. &lt;/li&gt;
&lt;li&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
  &lt;th&gt;Rank&lt;/th&gt;
  &lt;th&gt;Language&lt;/th&gt;
  &lt;th&gt;Popularity, %&lt;/th&gt;
  &lt;th&gt;Source code, %&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
  &lt;td&gt;1.&lt;/td&gt;
  &lt;td&gt;Python&lt;/td&gt;
  &lt;td&gt;16.1&lt;/td&gt;
  &lt;td&gt;11.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;2.&lt;/td&gt;
  &lt;td&gt;Java&lt;/td&gt;
  &lt;td&gt;15.3&lt;/td&gt;
  &lt;td&gt;16.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;3.&lt;/td&gt;
  &lt;td&gt;C&lt;/td&gt;
  &lt;td&gt;9.2&lt;/td&gt;
  &lt;td&gt;17.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;4.&lt;/td&gt;
  &lt;td&gt;C++&lt;/td&gt;
  &lt;td&gt;9.1&lt;/td&gt;
  &lt;td&gt;12.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;5.&lt;/td&gt;
  &lt;td&gt;PHP&lt;/td&gt;
  &lt;td&gt;8.5&lt;/td&gt;
  &lt;td&gt;24.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;6.&lt;/td&gt;
  &lt;td&gt;Ruby&lt;/td&gt;
  &lt;td&gt;8.3&lt;/td&gt;
  &lt;td&gt;2.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;7.&lt;/td&gt;
  &lt;td&gt;C#&lt;/td&gt;
  &lt;td&gt;6.1&lt;/td&gt;
  &lt;td&gt;6.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python (16.1 %) appears to be the most attractive language, followed closely by Java (15.3 %). It’s especially interesting since only 11.3 % of all source code on GitHub is written in Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Although there are ten times more lines of code on GitHub in PHP than in Ruby, they have the same stationary distribution.&lt;/li&gt;
&lt;li&gt;What about sticking to a language ?
&lt;ul&gt;
&lt;li&gt;Developers coding in one of the 5 most popular languages (Java, C, C++, PHP, Ruby) are most likely to switch to Python with approx. 22% chance on average.&lt;/li&gt;
&lt;li&gt;Similarly, a Visual Basic developer has more chance (24%) to move to C# while Erik’s is almost sure in this transition with 92% chance.&lt;/li&gt;
&lt;li&gt;People using numerical and statistical environments such as Fortran (36 %), Matlab (33 %) or R (40 %) are most likely to switch to Python in contrast to Erik’s matrix which predicts C as their future language.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#36 Craft Your Python Like Poetry and Other Musings</title><link>https://pythonbytes.fm/episodes/show/36/craft-your-python-like-poetry-and-other-musings</link><guid>bbfccbbe-58bf-4337-abc1-895f62a0e349</guid><enclosure url="https://pythonbytes.fm/episodes/download/36/craft-your-python-like-poetry-and-other-musings.mp3" length="16301618" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 28 Jul 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Craft Your Python Like Poetry and Other Musings</itunes:title><itunes:episode>36</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:22:34</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Brought to you by &lt;strong&gt;Rollbar&lt;/strong&gt;! Create an account and get special credits at &lt;a href="https://pythonbytes.fm/rollbar"&gt;pythonbytes.fm/rollbar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="http://treyhunner.com/2017/07/craft-your-python-like-poetry/"&gt;&lt;strong&gt;Craft Your Python Like Poetry&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Line length is important. Shorter is often more readable.&lt;/li&gt;
&lt;li&gt;line break placement makes a huge difference in readability and applies to
&lt;ul&gt;
&lt;li&gt;comprehensions&lt;/li&gt;
&lt;li&gt;function call parameters&lt;/li&gt;
&lt;li&gt;chained function calls. (Dot alignment is pleasing and nothing I have considered previously)&lt;/li&gt;
&lt;li&gt;dictionary literals&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://trello.com/c/ME7ijnKw/88-https-devguidepythonorg"&gt;&lt;/a&gt;
&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://labs.fedoraproject.org/en/python-classroom/"&gt;&lt;strong&gt;The Fedora Python Classroom Lab&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Makes it easy for teachers and instructors to use Fedora in their classrooms or workshops.&lt;/li&gt;
&lt;li&gt;Ready to use operating system with important stuff pre-installed&lt;/li&gt;
&lt;li&gt;With GNOME or as a headless environment for Docker or Vagrant&lt;/li&gt;
&lt;li&gt;Lots of prebuilt goodies, especially around data science:
&lt;ul&gt;
&lt;li&gt;IPython, Jupyter Notebook, multiple Pythons, virtualenvs, tox, git and more&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://theoutline.com/post/1953/how-a-vc-funded-company-is-undermining-the-open-source-community"&gt;&lt;strong&gt;How a VC-funded company is undermining the open-source community&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A San Francisco startup called Kite is being accused of underhanded tactics.&lt;/li&gt;
&lt;li&gt;An Atom plugin called Minimap, downloaded more than 3.5 M times, open source, and developed primarily by one person. @abe33&lt;/li&gt;
&lt;li&gt;abe33 hired by Kite, then adds a “Kite Promotion” “feature” to Minimap that examines user code and inserts links to related parts of Kite website. (Presumably in the minimap?)&lt;/li&gt;
&lt;li&gt;Users rightfully ticked.&lt;/li&gt;
&lt;li&gt;Next. autocomplete-Python, also an Atom addon, seems to be taken over by Kite engineers and changes the autocomplete from local Jedi engine to cloud Kite engine (also therefore sending users code to Kite). &lt;/li&gt;
&lt;li&gt;Seems like that ought to have been a separate plugin, not a take over of an existing one.&lt;/li&gt;
&lt;li&gt;Again, users not exactly supportive of the changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://github.com/codelucas/newspaper/"&gt;&lt;strong&gt;Newspaper Python Package&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;News, full-text, and article metadata extraction in Python 3&lt;/li&gt;
&lt;li&gt;Behold the example code:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    from newspaper import Article
    url = 'http://fox13now.com/2013/12/30/new-year-new-laws-obamacare-pot-guns-and-drones/'
    article = Article(url)

    article.download()

    article.parse()
    article.authors
    # ['Leigh Ann Caldwell', 'John Honway']
    article.publish_date
    # datetime.datetime(2013, 12, 30, 0, 0)

    article.nlp()
    article.keywords
    # ['New Years', 'resolution', ...]
    article.summary
    # 'The study shows that 93% of people ...'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="http://spectrum.ieee.org/static/interactive-the-top-programming-languages-2017"&gt;&lt;strong&gt;IEEE Spectrum:&lt;/strong&gt;&lt;/a&gt; &lt;a href="http://spectrum.ieee.org/static/interactive-the-top-programming-languages-2017"&gt;&lt;strong&gt;The Top Programming Languages 2017&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We’re #1. We’re #1.&lt;/li&gt;
&lt;li&gt;Python on top of the list&lt;/li&gt;
&lt;li&gt;IEEE very open about &lt;a href="http://spectrum.ieee.org/ns/IEEE_TPL_2017/methods.html"&gt;their methodology.&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Combo of Google, Google Trends, GitHub, Twitter, Reddit, StackOverflow, HackerNews, CareerBuilder, Dice, and IEEE Xplore Digital Library&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python #1 in lots of categories. Java still has more job openings, supposedly. Although I think it’s because Java people are quitting to go work on Python projects. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.youtube.com/playlist?list=PLYx7XA2nY5GfdAFycPLBdUDOUtdQIVoMf"&gt;&lt;strong&gt;SciPy 2017 videos are out&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bunch of tutorials&lt;/li&gt;
&lt;li&gt;Keynote - Coding for Science and Innovation, Gaël Varoquaux&lt;/li&gt;
&lt;li&gt;Dash - A New Framework for Building User Interfaces for Technical Computing, &lt;/li&gt;
&lt;li&gt;Dask - Advanced Techniques, Matthew Rocklin&lt;/li&gt;
&lt;li&gt;Scientific Analysis at Scale - a Comparison of Five Systems, Jake V.&lt;/li&gt;
&lt;li&gt;Keynote - Academic Open Source, Kathryn Huff&lt;/li&gt;
&lt;li&gt;Plus lots more&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#37 Rule over the shells with Sultan</title><link>https://pythonbytes.fm/episodes/show/37/rule-over-the-shells-with-sultan</link><guid>7c42c762-c79f-4c9b-9bb7-8d2e42dcda76</guid><enclosure url="https://pythonbytes.fm/episodes/download/37/rule-over-the-shells-with-sultan.mp3" length="13634489" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 02 Aug 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Rule over the shells with Sultan</itunes:title><itunes:episode>37</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:18:15</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://devguide.python.org/"&gt;&lt;strong&gt;New URL for Python Developer’s Guide&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to contribute to CPython&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some really useful links that I hadn’t noticed before. Also great ideas to include in a contributing guide for any large open source project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Core developers and contributors alike will find the following guides useful:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.guide/how-to-contribute/"&gt;How to Contribute to Open Source&lt;/a&gt; (from https://opensource.guide)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.guide/building-community/"&gt;Building Welcoming Communities&lt;/a&gt; (from https://opensource.guide)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Guide for contributing to Python:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/setup/"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/help/"&gt;Where to Get Help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/pullrequest/"&gt;Lifecycle of a Pull Request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/runtests/"&gt;Running &amp;amp; Writing Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Beginner tasks to become familiar with the development process&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/docquality/"&gt;Helping with Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/coverage/"&gt;Increase Test Coverage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Advanced tasks for once you are comfortable&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/silencewarnings/"&gt;Silence Warnings From the Test Suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fixing issues found by the &lt;a href="https://devguide.python.org/buildbots/"&gt;buildbots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/fixingissues/"&gt;Fixing “easy” Issues (and Beyond)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/tracker/#tracker"&gt;Using the Issue Tracker&lt;/a&gt; and &lt;a href="https://devguide.python.org/tracker/#helptriage"&gt;Helping Triage Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/triaging/"&gt;Triaging an Issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/experts/"&gt;Experts Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/communication/"&gt;Following Python’s Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/coredev/"&gt;How to Become a Core Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/committing/"&gt;Committing and Pushing Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/devcycle/"&gt;Development Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/buildbots/"&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devguide.python.org/gitbootcamp/"&gt;Git Bootcamp and Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://sultan.readthedocs.io/en/latest/"&gt;&lt;strong&gt;Sultan: Command and Rule Over Your Shell&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python package for interfacing with command-line utilities, like yum, apt-get, or ls, in a Pythonic manner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simple example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from sultan.api import Sultan
s = Sultan()
s.sudo("yum install -y tree").run()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Better in a context manager:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from sultan.api import Sultan

with Sultan.load(sudo=True) as s:
  s.yum("install -y tree").run()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even works remotely:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from sultan.api import Sultan

with Sultan.load(sudo=True, hostname="myserver.com") as sultan:
  sultan.yum("install -y tree").run()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://github.com/dreadatour/Flake8Lint"&gt;&lt;strong&gt;Flake8Lint&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sublime Text plugin for lint Python files.&lt;/li&gt;
&lt;li&gt;Includes these linters and style checkers:
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pypi.python.org/pypi/flake8"&gt;&lt;strong&gt;Flake8&lt;/strong&gt;&lt;/a&gt; (used in "Python Flake8 Lint") is a wrapper around these tools:&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pypi.python.org/pypi/pep8"&gt;&lt;strong&gt;pep8&lt;/strong&gt;&lt;/a&gt; is a tool to check your Python code against some of the style conventions in &lt;a href="http://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://launchpad.net/pyflakes"&gt;&lt;strong&gt;PyFlakes&lt;/strong&gt;&lt;/a&gt; checks only for logical errors in programs; it does not perform any check on style.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html"&gt;&lt;strong&gt;mccabe&lt;/strong&gt;&lt;/a&gt; is a code complexity checker. It is quite useful to detect over-complex code. According to McCabe, anything that goes beyond 10 is too complex. See &lt;a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;Cyclomatic_complexity&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There are additional tools used to lint Python files:&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/pydocstyle"&gt;&lt;strong&gt;pydocstyle&lt;/strong&gt;&lt;/a&gt; is a static analysis tool for checking compliance with Python &lt;a href="http://www.python.org/dev/peps/pep-0257/"&gt;PEP257&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/flintwork/pep8-naming"&gt;&lt;strong&gt;pep8-naming&lt;/strong&gt;&lt;/a&gt; is a naming convention checker for Python.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JBKahn/flake8-debugger"&gt;&lt;strong&gt;flake8-debugger&lt;/strong&gt;&lt;/a&gt; is a flake8 debug statement checker.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/public/flake8-import-order"&gt;&lt;strong&gt;flake8-import-order&lt;/strong&gt;&lt;/a&gt; is a flake8 plugin that checks import order in the fashion of the Google Python Style Guide (turned off by default).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://github.com/warner/magic-wormhole"&gt;&lt;strong&gt;Magic Wormhole&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get things from one computer to another, safely.&lt;/li&gt;
&lt;li&gt;A library and a command-line tool named &lt;code&gt;wormhole&lt;/code&gt;, which makes it possible to get arbitrary-sized files and directories (or short pieces of text) from one computer to another.&lt;/li&gt;
&lt;li&gt;The two endpoints are identified by using identical "wormhole codes”&lt;/li&gt;
&lt;li&gt;Video from PyCon 2016: &lt;a href="https://www.youtube.com/watch?v=oFrTqQw0_3c"&gt;https://www.youtube.com/watch?v=oFrTqQw0_3c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The codes are short and human-pronounceable, using a phonetically-distinct wordlist.&lt;/li&gt;
&lt;li&gt;As a library too: The wormhole module makes it possible for other applications to use these code-protected channels. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://realpython.com/blog/python/python-virtual-environments-a-primer/"&gt;&lt;strong&gt;Python Virtual Environments Primer&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;why do we need virtual environments&lt;/li&gt;
&lt;li&gt;what are they&lt;/li&gt;
&lt;li&gt;how to use them / how do they work&lt;/li&gt;
&lt;li&gt;also
&lt;ul&gt;
&lt;li&gt;virtualenvwrapper&lt;/li&gt;
&lt;li&gt;using different versions of python&lt;/li&gt;
&lt;li&gt;pyvenv&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="http://www.infoworld.com/article/3208391/python/how-rust-can-replace-c-with-pythons-help.html"&gt;&lt;strong&gt;How Rust can replace C, with Python's help&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why Rust? Rust has
&lt;ul&gt;
&lt;li&gt;a type system feature that helps eliminate memory leaks,&lt;/li&gt;
&lt;li&gt;proper interfaces, called 'traits',&lt;/li&gt;
&lt;li&gt;better type inference,&lt;/li&gt;
&lt;li&gt;better support for concurrency,&lt;/li&gt;
&lt;li&gt;(almost) first-class functions that can be passed as arguments.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;It isn’t difficult to expose Rust code to Python. A Rust library can expose a C ABI (application binary interface) to Python without too much work. &lt;/li&gt;
&lt;li&gt;Some Rust crates (as Rust packages are called) already expose Python bindings to make them useful in Python.&lt;/li&gt;
&lt;li&gt;A new spate of projects are making it easier to develop Rust libraries with convenient bindings to Python – and to deploy Python packages that have Rust binaries&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dgrunwald/rust-cpython"&gt;&lt;strong&gt;Rust-CPython&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt; 
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What it is:&lt;/strong&gt; A set of bindings in Rust for the CPython runtime. This allows a Rust program to connect to CPython, use its ABI, run Python programs through it, and work with representations of Python objects in Rust itself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Who it’s for:&lt;/strong&gt; Rust programmers who want to hook into CPython and control it from the inside out.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyO3/PyO3"&gt;&lt;strong&gt;PyO3&lt;/strong&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What it is:&lt;/strong&gt; For Rust developers, the PyO3 project provides a basic way to write Rust software with bindings to Python in both directions. A Rust program can interface with Python objects and the Python interpreter, and can expose Rust methods to a Python program in the same way a C module does.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Who it’s for:&lt;/strong&gt; Those writing modules that work closely with the Python runtime, and need to interact directly with it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mitsuhiko/snaek/"&gt;&lt;strong&gt;Snaek&lt;/strong&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What it is:&lt;/strong&gt; Another project in the early stages, Snaek lets developers create Rust libraries that are loaded dynamically into Python as needed, but don’t rely on being linked statically against Python’s runtime.&lt;/li&gt;
&lt;li&gt;Doesn’t use CTypes but CFFI&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Who it’s for:&lt;/strong&gt; Those who want to expose methods written in Rust to a Python script, or for Rust developers who don’t want or need to become familiar with Python.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;And there is a cookiecutter project / template too
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mckaymatt/cookiecutter-pypackage-rust-cross-platform-publish"&gt;https://github.com/mckaymatt/cookiecutter-pypackage-rust-cross-platform-publish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“A very important goal of the project,” writes its maintainers, “is that it be able to produce a binary distribution (Wheel) which will not require the end user to actually compile the Rust code themselves.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#38 Hacking Classic Nintendo Games with Python</title><link>https://pythonbytes.fm/episodes/show/38/hacking-classic-nintendo-games-with-python</link><guid>5acbb635-31a6-480b-bd02-5d8dfa2bcdb1</guid><enclosure url="https://pythonbytes.fm/episodes/download/38/hacking-classic-nintendo-games-with-python.mp3" length="17477632" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 09 Aug 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Hacking Classic Nintendo Games with Python</itunes:title><itunes:episode>38</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:24:57</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;&lt;strong&gt;Matt #1: &lt;a href="https://www.youtube.com/watch?v=v75rNdPukuI"&gt;Hacking Classic Nintendo Games with Python&lt;/a&gt; &lt;a href="https://www.youtube.com/watch?v=v75rNdPukuI"&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gist: used the FCEUX (&lt;a href="http://www.fceux.com/web/home.html"&gt;http://www.fceux.com/web/home.html&lt;/a&gt;) Nintendo emulator’s debugger to hex edit memory and change what’s happening during play&lt;/li&gt;
&lt;li&gt;Hex changing is how the old school Game Genie worked&lt;/li&gt;
&lt;li&gt;Given by my Twilio colleague Sam Agnew at PyCon 2017, and all the talks are up on YouTube&lt;/li&gt;
&lt;li&gt;Sam was inspired by Guto Maia’s PyNES: &lt;a href="https://gutomaia.net/pyNES/"&gt;https://gutomaia.net/pyNES/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sam uses the Lua programming language to automate changing the Mario and Zelda’s hex values. &lt;/li&gt;
&lt;li&gt;He then creates a Flask app where PyCon attendees could send a text message containing a hex address and 2 digit hex value to a phone number. the input would then be read into the game as he was playing&lt;/li&gt;
&lt;li&gt;What I particularly enjoyed about this talk is that it takes a bunch of topics that sound really complicated, like hex editing memory values, and makes it more accessible to less experienced developers because they can see the results&lt;/li&gt;
&lt;li&gt;Follow along with this blog post: &lt;a href="https://www.twilio.com/blog/2015/08/romram-hacking-building-an-sms-powered-game-genie-with-lua-and-python.html"&gt;https://www.twilio.com/blog/2015/08/romram-hacking-building-an-sms-powered-game-genie-with-lua-and-python.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian&lt;/strong&gt; &lt;strong&gt;#2&lt;/strong&gt;: &lt;a href="http://ericholscher.com/blog/2017/aug/2/pacman-rule-conferences/"&gt;&lt;strong&gt;The Pac-Man Rule at Conferences&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Eric Holscher&lt;/li&gt;
&lt;li&gt;“When standing as a group of people, always leave room for 1 person to join your group.”&lt;/li&gt;
&lt;li&gt;“Leaving room for new people when standing in a group is a physical way to show an inclusive and welcoming environment. “&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Matt #3:&lt;/strong&gt; &lt;strong&gt;Bokeh&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python data visualization library where the visualization output is designed for presentation in web browsers&lt;/li&gt;
&lt;li&gt;Just released v0.12.6 in June, which has a slew of improvements. awesome development team and constantly improving&lt;/li&gt;
&lt;li&gt;v0.12.6 is last planned release before 1.0&lt;/li&gt;
&lt;li&gt;Wide range of visualizations you can create with Bokeh, including classic ones just bar charts box plots, and also interactive visuals&lt;/li&gt;
&lt;li&gt;Basically if you thought d3.js visualizations were awesome but didnt want to spend that much time hand crafting some complicated JavaScript, Bokeh will be your jam&lt;/li&gt;
&lt;li&gt;Flask-based tutorial: &lt;a href="https://www.fullstackpython.com/blog/responsive-bar-charts-bokeh-flask-python-3.html"&gt;https://www.fullstackpython.com/blog/responsive-bar-charts-bokeh-flask-python-3.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #4:&lt;/strong&gt; &lt;a href="https://mosh.org/"&gt;&lt;strong&gt;Mosh (mobile shell)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Persuasive video: &lt;a href="https://www.youtube.com/watch?v=XsIxNYl0oyU"&gt;https://www.youtube.com/watch?v=XsIxNYl0oyU&lt;/a&gt; from 2012&lt;/li&gt;
&lt;li&gt;From the main page:
&lt;ul&gt;
&lt;li&gt;Remote terminal application that allows &lt;strong&gt;roaming&lt;/strong&gt;, supports &lt;strong&gt;intermittent connectivity&lt;/strong&gt;, and provides intelligent &lt;strong&gt;local echo&lt;/strong&gt; and line editing of user keystrokes.&lt;/li&gt;
&lt;li&gt;Mosh is a replacement for SSH. It's more robust and responsive, especially over Wi-Fi, cellular, and long-distance links.&lt;/li&gt;
&lt;li&gt;Mosh is free software, available for GNU/Linux, BSD, macOS, Solaris, Android, Chrome, and iOS.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;This has been around since 2012. I just heard of it. Are people using it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Matt&lt;/strong&gt; &lt;strong&gt;#5:&lt;/strong&gt; &lt;a href="https://github.com/getpelican/pelican/tree/3.7.1"&gt;&lt;strong&gt;Pelican static site generator&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Static site generators take in a markup format such as reStructuredText or Markdown, along with a template engine such as Jinja and output HTML (or XML, JSON, etc) files that can be hosted anywhere&lt;/li&gt;
&lt;li&gt;It’s kind of a throw back to the early days of the web when everything was snappy&lt;/li&gt;
&lt;li&gt;Major new version 3.7.0 released at the end of 2016 with a minor v3.7.1 bump released early this year&lt;/li&gt;
&lt;li&gt;Lots of improvements to Python 3 compatibility. I use Pelican with Python 3.6.2. exclusively now.&lt;/li&gt;
&lt;li&gt;Significant customization by changing the configuration files.&lt;/li&gt;
&lt;li&gt;Lots of folks think static site generators are just for blogs, which is what most of the original static generators were built to create, but you really can create any type of site, including single page apps (when you combine a static site generator with a front end JavaScript framework).&lt;/li&gt;
&lt;li&gt;Just wrote a getting started tutorial: &lt;a href="https://www.fullstackpython.com/blog/generating-static-websites-pelican-jinja2-markdown.html"&gt;How to Create Your First Static Site with Pelican and Jinja2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian&lt;/strong&gt; &lt;strong&gt;#6:&lt;/strong&gt;  &lt;a href="https://pypi.python.org/pypi/pytest-watch"&gt;&lt;strong&gt;pytest-watch&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/latest/changelog.html"&gt;pytest 3.2.0&lt;/a&gt; was released recently.&lt;/li&gt;
&lt;li&gt;Great for pytest users. Bummer for me that just recently tested all the code examples in the &lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;Python Testing with pytest&lt;/a&gt; book against pytest 3.1.3.&lt;/li&gt;
&lt;li&gt;So I wrote a bunch of tests to check every invocation of pytest in the book.&lt;/li&gt;
&lt;li&gt;I’m running it against both pytest 3.1.3 and pytest 3.2.0&lt;/li&gt;
&lt;li&gt;I’m automating this by running both versions every time I save a new test with pytest-watch&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    $ pip install pytest-watch
    $ cd [HTML_REMOVED]
    $ ptw .
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;ptw .&lt;/code&gt; in two windows, each with a virtualenv with different pytest versions, and I can test both constantly as I save tests.&lt;/li&gt;
&lt;li&gt;Will later convert this to tox, but for now, this is a huge timesaver.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;(bonus) Matt #7: &lt;a href="http://www.twiliovoices.com"&gt;Twilio Voices&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New program where you get paid $500 for each published technical blog post you write for the Twilio blog. Every post has the code and walks the reader through how to recreate something you built.&lt;/li&gt;
&lt;li&gt;Examples: &lt;a href="https://www.twilio.com/blog/2017/04/wedding-at-scale-how-i-used-twilio-python-and-google-to-automate-my-wedding.html"&gt;Wedding at Scale&lt;/a&gt;, &lt;a href="https://www.twilio.com/blog/2017/06/hacked-my-universitys-registration-system-python-twilio.html"&gt;How I Hack My University Registration System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tell stories with code&lt;/li&gt;
&lt;li&gt;We put each post through a rigorous outline, voice and tech review process&lt;/li&gt;
&lt;li&gt;Doesn’t have to use Twilio, so you can write a post on pytest-watch, Mosh, Pelican, Bokeh, or any other library you’ve been meaning to work with and get paid when the post is published&lt;/li&gt;
&lt;li&gt;This is what I’ve been working on at Twilio for the past couple of months so we’ll work directly together on the posts&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#39 The new PyPI</title><link>https://pythonbytes.fm/episodes/show/39/the-new-pypi</link><guid>b7f00e66-cdd9-41e2-87ae-8b95dc0b6a56</guid><enclosure url="https://pythonbytes.fm/episodes/download/39/the-new-pypi.mp3" length="30894662" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 17 Aug 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>The new PyPI</itunes:title><itunes:episode>39</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:43:06</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;&lt;strong&gt;Mahmoud #1:&lt;/strong&gt; &lt;a href="https://pypi.org/"&gt;&lt;strong&gt;The New PyPI&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Donald Stufft and his PyPA team have been hard at work replacing the old pypi.python.org&lt;/li&gt;
&lt;li&gt;The new site is now handling almost all the old functionality (excepting deprecated features, of course): &lt;a href="https://pypi.org/"&gt;https://pypi.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The new site has handled downloads (presently exceeding 1PB monthly bandwidth) for a while now, and uploads as of recently.&lt;/li&gt;
&lt;li&gt;A nice full-fledged, open-source Python application, eagerly awaiting your review and contribution: &lt;a href="https://github.com/pypa/warehouse/"&gt;https://github.com/pypa/warehouse/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More updates at: &lt;a href="https://mail.python.org/pipermail/distutils-sig/"&gt;https://mail.python.org/pipermail/distutils-sig/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #2:&lt;/strong&gt; &lt;a href="http://makezine.com/2017/08/11/circuitpython-snakes-way-adafruit-hardware/"&gt;&lt;strong&gt;CircuitPython Snakes its Way onto Adafruit Hardware&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.adafruit.com/2017/01/09/welcome-to-the-adafruit-circuitpython-beta/"&gt;Adafruit announced CircuitPython in January&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;“CircuitPython is based on the &lt;a href="https://github.com/micropython/micropython"&gt;open-source&lt;/a&gt; &lt;a href="https://micropython.org/"&gt;MicroPython&lt;/a&gt; which brings the popular Python language to microcontrollers. The goal of CircuitPython is to make hardware as simple and easy as possible.”&lt;/li&gt;
&lt;li&gt;Already runs on &lt;a href="https://www.adafruit.com/product/3505"&gt;Metro M0 Express&lt;/a&gt;, &lt;a href="https://www.adafruit.com/product/3403"&gt;Feather M0 Express&lt;/a&gt;, and they are working on support for &lt;a href="https://www.adafruit.com/product/3333"&gt;Circuit Playground Express&lt;/a&gt;, and now Gemma M0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;New product is &lt;a href="https://www.adafruit.com/product/3501"&gt;Gemma M0&lt;/a&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.adafruit.com/2017/07/27/new-product-adafruit-gemma-m0-miniature-wearable-electronic-platform/"&gt;Announced&lt;/a&gt; at the end of July.&lt;/li&gt;
&lt;li&gt;It’s about the size of a quarter and is considered a wearable computer.&lt;/li&gt;
&lt;li&gt;“When you plug it in, it will show up as a very small disk drive with &lt;strong&gt;main.py&lt;/strong&gt; on it. Edit &lt;strong&gt;main.py&lt;/strong&gt; with your favorite text editor to build your project using Python, the most popular programming language. No installs, IDE or compiler needed, so you can use it on any computer, even ChromeBooks or computers you can’t install software on. When you’re done, unplug the Gemma M0 and your code will go with you."&lt;/li&gt;
&lt;li&gt;They’re under $10. I gotta get one of these and play with it. (Anyone from Adafruit listening, want to send me one?)&lt;/li&gt;
&lt;li&gt;Here's the intro video for it: &lt;a href="https://www.youtube.com/watch?v=nRE_cryQJ5c&amp;amp;feature=youtu.be"&gt;https://www.youtube.com/watch?v=nRE_cryQJ5c&amp;amp;feature=youtu.be&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.adafruit.com/creating-and-sharing-a-circuitpython-library"&gt;Creating and sharing a CircuitPython Library&lt;/a&gt; is a good introduction to the Python open source community, including:
&lt;ul&gt;
&lt;li&gt;Creating a library (package or module)&lt;/li&gt;
&lt;li&gt;Sharing on GitHub&lt;/li&gt;
&lt;li&gt;Sharing docs on ReadTheDocs&lt;/li&gt;
&lt;li&gt;Testing with Travis CI&lt;/li&gt;
&lt;li&gt;Releasing on GitHub&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Mahmoud #3:&lt;/strong&gt; &lt;strong&gt;Dataclasses&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python has had classes for a long time, but maybe it’s time for some updated syntax and semantics, something higher level perhaps?&lt;/li&gt;
&lt;li&gt;dataclasses is an interesting case of Python’s core dev doing their own take on community innovation (Hynek’s attrs: https://attrs.org)&lt;/li&gt;
&lt;li&gt;Code, issues, and draft PEP at https://github.com/ericvsmith/dataclasses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #4:&lt;/strong&gt; &lt;a href="http://kanoki.org/2017/07/16/pandas-in-a-nutshell/"&gt;&lt;strong&gt;Pandas in a Nutshell&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jupyter Notebook style post. Tutorial by example with just a bit of extra text for explanation.&lt;/li&gt;
&lt;li&gt;Data structures:
&lt;ul&gt;
&lt;li&gt;Series – it’s a one dimensional array with indexes, it stores a single column or row of data in a Dataframe&lt;/li&gt;
&lt;li&gt;Dataframe – it’s a tabular spreadsheet like structure representing rows each of which contains one or multiple columns&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Series: Custom indices, adding two series, naming series, …&lt;/li&gt;
&lt;li&gt;Dataframes: using .head() and .tail(), info(), adding columns, adding a column as a calculation of another column, deleting a column, creating a dataframe from a dictionary, reindexing, summing columns and rows, .describe() for simple statistics, corr() for correlations, dealing with missing values, dropping rows, selecting, sorting, multi-indexing, grouping, &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Mahmoud&lt;/strong&gt; &lt;strong&gt;#5:&lt;/strong&gt; &lt;strong&gt;Static Typing&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PyBay 2017, which ended a day before recording, featured a neat panel on static typing in Python.&lt;/li&gt;
&lt;li&gt;One member each from Google, Quora, PyCharm, Facebook, and University of California&lt;/li&gt;
&lt;li&gt;Three different static analysis tools (four, if you count PyLint)&lt;/li&gt;
&lt;li&gt;They’re all collaborating already, and open to much more, as we can see on this collection of the stdlib’s type defs: &lt;a href="https://github.com/python/typeshed"&gt;https://github.com/python/typeshed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A fair degree of consensus around static types being most useful for testable documentation, like doctests, but with more systemic implications&lt;/li&gt;
&lt;li&gt;Not intended to be an algebraic type system (like Haskell, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian&lt;/strong&gt; &lt;strong&gt;#6:&lt;/strong&gt;  &lt;a href="https://www.fullstackpython.com/object-relational-mappers-orms.html"&gt;&lt;strong&gt;Full Stack Python Explains ORMs&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What are Object Relational Mappers?
&lt;ul&gt;
&lt;li&gt;“An object-relational mapper (ORM) is a code library that automates the transfer of data stored in relational databases tables into objects that are more commonly used in application code.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Why are they useful?
&lt;ul&gt;
&lt;li&gt;“ORMs provide a high-level abstraction upon a relational database that allows a developer to write Python code instead of SQL to create, read, update and delete data and schemas in their database.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Do you need to use them?&lt;/li&gt;
&lt;li&gt;Downsides to ORMs:
&lt;ul&gt;
&lt;li&gt;Impedance mismatch : “the way a developer uses objects is different from how data is stored and joined in relational tables”&lt;/li&gt;
&lt;li&gt;Potential for reduced performance: code in the middle isn’t free&lt;/li&gt;
&lt;li&gt;Shifting complexity from the database into the application code : people usually don’t use database stored procedures when working with ORMs.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A handful of popular ones including Django ORM, SQLAlchemy, Peewee, Pony, and SQLObject. Mostly listed as pointing out that they are active projects, brief description, and links for more info.&lt;/li&gt;
&lt;li&gt;Matt also has a &lt;a href="https://www.fullstackpython.com/sqlalchemy.html"&gt;SQLAlchemy page&lt;/a&gt; and a &lt;a href="https://www.fullstackpython.com/peewee.html"&gt;peewee page&lt;/a&gt; for more info on them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Extra Mahmoud:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python-hyper/hyperlink"&gt;hyperlink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://riot.im"&gt;riot.im&lt;/a&gt; + &lt;a href="https://riot.im"&gt;&lt;/a&gt;&lt;a href="https://github.com/matrix-org/synapse"&gt;(server code in Python)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Extra Brian:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;Python Testing with pytest&lt;/a&gt; has a &lt;a href="https://forums.pragprog.com/forums/438"&gt;Discussion Forum&lt;/a&gt;. It’s something that I think all Pragmatic books have. Just this morning I answered a question about the difference between monkeypatch and mock and when you would use one over the other.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#40 Packet Manipulation with Scapy</title><link>https://pythonbytes.fm/episodes/show/40/packet-manipulation-with-scapy</link><guid>230368b0-c438-466a-a10f-7a5813dc17a7</guid><enclosure url="https://pythonbytes.fm/episodes/download/40/packet-manipulation-with-scapy.mp3" length="16862391" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 24 Aug 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Packet Manipulation with Scapy</itunes:title><itunes:episode>40</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:22:59</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;We have guest hosts filling in for  Michael while he is on vacation.  This week we have &lt;a href="https://twitter.com/ericchou"&gt;Eric Chou&lt;/a&gt;, author of the book “Mastering Python Networking” and a self-proclaimed Network Automation Nerd. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Eric #1:&lt;/strong&gt; &lt;a href="https://www.ansible.com/"&gt;&lt;strong&gt;DevOps Automation Tool: Ansible&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DevOps Automation framework written in Python, code hosted on &lt;a href="https://github.com/ansible/ansible"&gt;GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/business/14/12/top-10-open-source-projects-2014"&gt;Top 10 OpenSource projects in 2014 by OpenSource.com&lt;/a&gt;, along with Docker, Kubernetes, Apache Hadoop, OpenStack, and OpenDaylight, etc. &lt;/li&gt;
&lt;li&gt;Excellent &lt;a href="http://docs.ansible.com/ansible/latest/index.html"&gt;documentation&lt;/a&gt; for all modules. &lt;/li&gt;
&lt;li&gt;Agentless, ‘networking vendor’ friendly, execute code locally that interacts with the device via SSH and API. &lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.ansible.com/ansible/latest/list_of_network_modules.html"&gt;Lots of Network modules&lt;/a&gt;, including Cisco, Juniper, Arista, etc. In fact, you can find Cisco and Juniper testimonial on the Ansible site.  &lt;/li&gt;
&lt;li&gt;Easy to learn and extend if you already know a little bit about Python, YAML, and Jinja2. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #2:&lt;/strong&gt; &lt;a href="https://www.codementor.io/satwikkansal/python-practices-for-efficient-code-performance-memory-and-usability-aze6oiq65"&gt;&lt;strong&gt;Python Practices for Efficient Code: Performance, Memory, and Usability&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(I’m too opinionated to leave out my thoughts when covering this article, even though it’s very well written and I mean no disrespect to Satwik Kansal)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Try not to blow off memory
&lt;ul&gt;
&lt;li&gt;use generators to calculate large sets of results&lt;/li&gt;
&lt;li&gt;for big number crunching, use &lt;a href="http://www.numpy.org/"&gt;numpy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use format instead of + for large strings. (or f-strings - Brian)&lt;/li&gt;
&lt;li&gt;Use slots for classes (psshh, use attrs - Brian)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python 2 or 3
&lt;ul&gt;
&lt;li&gt;Write code compatible with both. (disagree, use 3 unless you can’t for a very good reason, then write code that’s easy to convert to 3 later. - Brian)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Write Beautiful code because “The first impression is the last impression."
&lt;ul&gt;
&lt;li&gt;follow style guides&lt;/li&gt;
&lt;li&gt;use static analysis tools. Recommended using something called coala that’s installed as “coala-bears.&lt;/li&gt;
&lt;li&gt;(Brian: Maintenance cost is a real thing. Make your code look good because it’s cheaper in the long run. Use pycodestyle, pydocstyle, flake8, and if using sublime, use &lt;a href="https://github.com/dreadatour/Flake8Lint"&gt;Flake8Lint&lt;/a&gt;) &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Speed up your performance
&lt;ul&gt;
&lt;li&gt;Multiprocess, not Multi-thread&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Analyzing your code
&lt;ul&gt;
&lt;li&gt;Use cProfile, memory_profiler, objgraph, resource&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Testing and CI
&lt;ul&gt;
&lt;li&gt;nose or pytest  or doctest&lt;/li&gt;
&lt;li&gt;(Brian: BTW, I really appreciate the links to pythontesting.net for tutorials on these.)&lt;/li&gt;
&lt;li&gt;(Brian: No. Use pytest)&lt;/li&gt;
&lt;li&gt;measure coverage and and try for 100%&lt;/li&gt;
&lt;li&gt;(Brian: No. use coverage to be alerted of sudden changes, and of code that possibly needs more testing and/or deleted)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Eric #3:&lt;/strong&gt; &lt;a href="http://www.secdev.org/projects/scapy/"&gt;&lt;strong&gt;Packet Manipulation Program: Scapy&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free Python-based interactive packet manipulation program and library, &lt;a href="https://github.com/secdev/scapy"&gt;GitHub&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;Craft the packet from the ground up, you can use it to decode packets or craft packets. &lt;/li&gt;
&lt;li&gt;You are in control instead of limited to what the creator of the tool can imagine, i.e. hping3, curl. &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.secdev.org/projects/scapy/demo.html"&gt;Can be used together with the Python interpreter&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;Particularly useful for network security
&lt;ul&gt;
&lt;li&gt;Crafting common attacks: malformed packets (such as IP version 3), Ping of Death (large paylaod), Land Attack (redirect the client response back to the client itself) for denial-of-service. &lt;/li&gt;
&lt;li&gt;Penetration Testing (TCP port scan) and Fuzzing by providing invalid, unexpected, or random data.  &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #4:&lt;/strong&gt; &lt;a href="https://blog.miguelgrinberg.com/post/using-headless-chrome-with-selenium"&gt;&lt;strong&gt;Using Headless Chrome with Selenium&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Miguel Grinberg quick demo of using headless chrome with selenium and unittest.&lt;/li&gt;
&lt;li&gt;(Brian: Eventually I’ll get Miguel to use pytest more.)&lt;/li&gt;
&lt;li&gt;Replace the normal Firefox with Chrome in the webdriver of Selenium, and passing a ‘headless’ argument to make it so the window doesn’t keep popping up and down when testing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Eric&lt;/strong&gt; &lt;strong&gt;#5:&lt;/strong&gt; &lt;a href="http://www.graphviz.org/"&gt;&lt;strong&gt;Graph Visualization with Graphviz&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open Source graph visualization software.  &lt;/li&gt;
&lt;li&gt;Perfect for graphing the large datacenter topology automatically or any other network diagrams. &lt;/li&gt;
&lt;li&gt;Extensive &lt;a href="http://www.graphviz.org/Documentation.php"&gt;documentation&lt;/a&gt; and &lt;a href="http://www.graphviz.org/Gallery.php"&gt;gallery of examples&lt;/a&gt;.  &lt;/li&gt;
&lt;li&gt;Did I mention this is ‘automatible’? Thus avoid drifts between reality and actual network. &lt;/li&gt;
&lt;li&gt;Python package &lt;a href="https://pypi.python.org/pypi/graphviz"&gt;graphviz&lt;/a&gt; (lower case g) for Graphviz integration. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian&lt;/strong&gt; &lt;strong&gt;#6:&lt;/strong&gt; &lt;a href="https://www.pycascades.com/speakers/"&gt;&lt;strong&gt;PyCascades CFP still open until the 28th&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python conference in Vancouver, BC.&lt;/li&gt;
&lt;li&gt;Talks Jan 22, 23, Sprints Jan 24th&lt;/li&gt;
&lt;li&gt;Speakers get free admission. Talks are all 25 min slots. No Q&amp;amp;A after talks in front of full audience, but speakers will hang out up front for a few minutes for individual questions&lt;/li&gt;
&lt;li&gt;I’m going to submit at least one proposal. But I’m kinda swamped this week, so the proposal will unfortunately be rushed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Extra Eric:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/gp/product/1784397008/ref=as_li_ss_il?ie=UTF8&amp;amp;fpl=fresh&amp;amp;pd_rd_i=1784397008&amp;amp;pd_rd_r=BQZKFJ3QVF5A5T1ANVZ0&amp;amp;pd_rd_w=B4iFp&amp;amp;pd_rd_wg=7ypBL&amp;amp;pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_s=desktop-1&amp;amp;pf_rd_r=TBZN1MW3TEJYFE86QJ3N&amp;amp;pf_rd_r=TBZN1MW3TEJYFE86QJ3N&amp;amp;pf_rd_t=36701&amp;amp;pf_rd_p=781f4767-b4d4-466b-8c26-2639359664eb&amp;amp;pf_rd_p=781f4767-b4d4-466b-8c26-2639359664eb&amp;amp;pf_rd_i=desktop&amp;amp;linkCode=li3&amp;amp;tag=pythfornetwen-20&amp;amp;linkId=352f479d902e9d968e5d1832619de63e"&gt;Mastering Python Networking&lt;/a&gt; book &lt;/li&gt;
&lt;li&gt;Network Labs: &lt;a href="https://learningnetworkstore.cisco.com/virtual-internet-routing-lab-virl/cisco-personal-edition-pe-20-nodes-virl-20"&gt;Cisco Virtual Internet Routing Lab (VIRL)&lt;/a&gt;, &lt;a href="https://developer.cisco.com/site/devnet/home/index.gsp"&gt;Cisco DevNet&lt;/a&gt;, &lt;a href="https://www.gns3.com/"&gt;GNS3 (Graphic Network Simulator)&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Extra Brian:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Copy editing and final testing with most recent Python and pytest done for &lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;Python Testing with pytest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#41 Python Concurrency From the Ground Up and Caring for our Community</title><link>https://pythonbytes.fm/episodes/show/41/python-concurrency-from-the-ground-up-and-caring-for-our-community</link><guid>e508cc53-3383-41e5-8a93-ea907e03dfc8</guid><enclosure url="https://pythonbytes.fm/episodes/download/41/python-concurrency-from-the-ground-up-and-caring-for-our-community.mp3" length="15929832" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 31 Aug 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Python Concurrency From the Ground Up and Caring for our Community</itunes:title><itunes:episode>41</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:23:21</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Brought to you by &lt;strong&gt;Rollbar&lt;/strong&gt;! Create an account and get special credits at &lt;a href="https://pythonbytes.fm/rollbar"&gt;pythonbytes.fm/rollbar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Guest co-host: &lt;a href="https://blog.miguelgrinberg.com"&gt;Miguel Grinberg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Miguel #1:&lt;/strong&gt; &lt;a href="https://github.com/parrt/lolviz"&gt;&lt;strong&gt;lolviz&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generates graphical representations of Python data structures using graphviz.&lt;/li&gt;
&lt;li&gt;Great as a teaching tool!&lt;/li&gt;
&lt;li&gt;Currently supports dicts, lists, lists of lists, linked lists and binary trees.&lt;/li&gt;
&lt;li&gt;Jupyter knows how to render these graphics. In regular Python it can also be used, but it is a bit cumbersome.&lt;/li&gt;
&lt;li&gt;I hope the project grows to support more complex data structures in the future!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://odo.readthedocs.io/en/latest/overview.html"&gt;&lt;strong&gt;Odo for data transforms&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Odo migrates between many formats.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;odo(df, list)  # create new list from Pandas DataFrame
odo(df, [])  # append onto existing list
odo(df, 'myfile.json')  # Dump dataframe to line-delimited JSON
odo('myfiles.*.csv', Iterator) # Stream through many CSV files
odo(df, 'postgresql://hostname::tablename')  # Migrate dataframe to Postgres
odo('myfile.*.csv', 'postgresql://hostname::tablename')  # Load CSVs to Postgres
odo('postgresql://hostname::tablename', 'myfile.json') # Dump Postgres to JSON
odo('mongodb://hostname/db::collection', pd.DataFrame) # Dump Mongo to DataFrame
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Miguel #3:&lt;/strong&gt; &lt;a href="https://www.youtube.com/watch?v=MCs5OvhV9S4"&gt;&lt;strong&gt;Python Concurrency From the Ground Up&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is probably my favorite tech talk of all times.&lt;/li&gt;
&lt;li&gt;There are no slides, the entire talk is a live coding session.&lt;/li&gt;
&lt;li&gt;David Beazley covers concurrency with threads and processes, and then goes on to build an asynchronous framework along the lines of asyncio just using generators, all in front of your eyes.&lt;/li&gt;
&lt;li&gt;If you spend 45 minutes watching this talk you’ll end up with a much better understanding of Python concurrency.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://hackernoon.com/fat-python-the-next-chapter-in-python-optimization-69dc974bcca2"&gt;&lt;strong&gt;FAT Python : the next chapter in Python optimization&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Anthony Shaw&lt;/li&gt;
&lt;li&gt;The FAT Python project was started by Victor Stinner in October 2015 to try to solve issues of previous attempts of “static optimizers” for Python.&lt;/li&gt;
&lt;li&gt;The PEPs
&lt;ul&gt;
&lt;li&gt;PEP 511 is a proposal to add a process to optimize an AST instance. The AST instance is a object-oriented representation of your code. &lt;/li&gt;
&lt;li&gt;A bespoke optimizer could look at a set of domain specific changes, e.g. NumPy or Pandas “anti-patterns” and optimize them in the syntax tree. In replacement of a static linter that simply recommends changes, the optimizer could make those changes for you.&lt;/li&gt;
&lt;li&gt;PEP 509: Python is hard to optimize because almost everything is mutable: builtin functions, function code, global variables, local variables, … can be modified at runtime.&lt;/li&gt;
&lt;li&gt;The speedup of optimizations depends on the speed of guard checks. PEP 509 proposes to add a private version to dictionaries to implement fast guards on namespaces.&lt;/li&gt;
&lt;li&gt;PEP 510 proposes to add a public API to the Python C API to add specialized codes with guards to a function. When the function is called, a specialized code is used if nothing changed, otherwise use the original bytecode.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Can download and compile this variation of CPython&lt;/li&gt;
&lt;li&gt;Basic function with a return is 24% improvement over 3.6 (and 46% faster than 2.7)&lt;/li&gt;
&lt;li&gt;Combining these 3 PEPs, we could see both implementation of guards as well as well as a range of optimizers out on PyPi.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Miguel #5:&lt;/strong&gt; &lt;a href="http://sshuttle.readthedocs.io/"&gt;&lt;strong&gt;sshuttle&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You probably know that there are security risks when going online at public wi-fi hotspots at coffee shops, hotels or airports.&lt;/li&gt;
&lt;li&gt;Most people don’t realize this, but even if you access sites over https://, DNS queries made to connect to those sites are not encrypted, so they give away which sites you visit.&lt;/li&gt;
&lt;li&gt;sshuttle is fantastic tool (written in Python, BTW) that creates a secure tunnel between your machine and another machine (which can be in a secure location such as your home or office) and forwards all network traffic through that other system with strong encryption. A poor man’s VPN!&lt;/li&gt;
&lt;li&gt;All you need to use sshuttle is SSH access to the secure system. No need to install anything on the remote system besides SSH!&lt;/li&gt;
&lt;li&gt;Simply run &lt;strong&gt;sshuttle --dns --r username@your-server 0.0.0.0/0&lt;/strong&gt; and from then on all traffic will be tunneled to your secure server with strong encryption, including DNS queries!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.theregister.co.uk/2017/08/24/nodejs_forks_ayo_code_of_conduct/"&gt;&lt;strong&gt;Node.js forks again – this time it's a war of words over codes of conducts&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;After years of battling a string of systematic failures of governance and leadership, the Node.js community reached a breaking point.&lt;/li&gt;
&lt;li&gt;Monday saw a stream of resignations, one after the other throughout the day from Node.js' technical steering committee (TSC), a group that manages the day-to-day governance for the Node.js project.&lt;/li&gt;
&lt;li&gt;A third of the committee had quit their positions by the end of the day, including its first woman member.&lt;/li&gt;
&lt;li&gt;One person has left the project entirely.&lt;/li&gt;
&lt;li&gt;The resignations followed a single event -- a vote that failed to remove a former director, a longstanding member of the community, from the leadership group. Many of the complaints, since removed from the committee's pages, document a litany of violations of the community's code of conduct.&lt;/li&gt;
&lt;li&gt;The failure to have him removed from the position was seen as the embodiment of years of efforts to reform a pattern of harmful behaviors that was tearing the community apart.&lt;/li&gt;
&lt;li&gt;The inability for members of the TSC to "look at the entire picture" of a person's behavior rather than each broken rule is where trust in the system broke down, Kapke said.&lt;/li&gt;
&lt;li&gt;Moments after the failed leadership vote, Kat Marchán pushed the button that created Ayo.js, a new open-source project forked from Node.js.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Our news&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Miguel: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.miguelgrinberg.com"&gt;Blog&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kickstarter.com/projects/1124925856/the-new-and-improved-flask-mega-tutorial"&gt;The New and Improved Flask Mega-Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Michael: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://training.talkpython.fm/courses/explore_restful_pyramid_course/creating-a-restful-http-api-with-pyramid-and-python-mega-course"&gt;RESTful and HTTP APIs in Pyramid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#42 Behold: The Python 2 death clock</title><link>https://pythonbytes.fm/episodes/show/42/behold-the-python-2-death-clock</link><guid>b68dd158-b08b-42be-83eb-58145ad2da12</guid><enclosure url="https://pythonbytes.fm/episodes/download/42/behold-the-python-2-death-clock.mp3" length="21838276" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 08 Sep 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Behold: The Python 2 death clock</itunes:title><itunes:episode>42</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:23:52</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DataDog! &lt;a href="https://pythonbytes.fm/datadog"&gt;pythonbytes.fm/datadog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt;  &lt;strong&gt;What Kenneth Did Last Week (well, recently)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Kenneth Reitz&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Homebrew Python Tap&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 2.5 through 3.6 available through homebrew &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kennethreitz/homebrew-pythons"&gt;https://github.com/kennethreitz/homebrew-pythons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;$ brew tap kennethreitz/pythons

$ brew install python-2.5
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/requests/requests-threads/"&gt;https://github.com/requests/requests-threads/&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;“ Twisted Deferred Thread backend for Requests.”&lt;/li&gt;
&lt;li&gt;Can be used with async/await or with twisted.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kennethreitz/background"&gt;https://github.com/kennethreitz/background&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;“Runs things in the background.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kennethreitz/setup.py"&gt;https://github.com/kennethreitz/setup.py&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;“setup.py (for humans)”&lt;/li&gt;
&lt;li&gt;“This repo exists to provide an example setup.py file, that can be used to bootstrap your next Python project. It includes some advanced patterns and best practices for setup.py, as well as some commented–out nice–to–haves.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://pythonclock.org/"&gt;&lt;strong&gt;Python 2 Death Clock&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 2.7 will not be maintained past 2020. &lt;/li&gt;
&lt;li&gt;No official date has been given, so this clock counts down until April 12th, 2020, which will be roughly the time of the 2020 PyCon.&lt;/li&gt;
&lt;li&gt;I am hereby suggesting we make PyCon 2020 the official end-of-life date, and we throw a massive party to celebrate all that Python 2 has done for us.&lt;/li&gt;
&lt;li&gt;Python 2, thank you for your years of faithful service.&lt;/li&gt;
&lt;li&gt;Python 3, your time is now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://medium.com/@copyconstruct/small-functions-considered-harmful-91035d316c29"&gt;&lt;strong&gt;Small Functions considered Harmful&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cindy Sridharan&lt;/li&gt;
&lt;li&gt;"General programming advice doled out invariably seems to extoll the elegance and efficacy of small functions."&lt;/li&gt;
&lt;li&gt;This is sometimes pushed to the extreme of having one line functions that are only called from one place. Understand that doing this increases your code size by 4 lines every time you do it.
&lt;ul&gt;
&lt;li&gt;1 line for the function call isn't removed because you moved the guts into a function.&lt;/li&gt;
&lt;li&gt;2 lines for function definition and guts&lt;/li&gt;
&lt;li&gt;2 lines to properly space your new function around other functions.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Supposed Benefit: Do one thing; a function should only ever do one thing and do it well.&lt;/li&gt;
&lt;li&gt;Problems:
&lt;ul&gt;
&lt;li&gt;"Instead of a reasonably airtight abstraction that can be understood (and tested) as a single unit, we now end up with even smaller units that’ve been carved out to delineate each and every component of “the one thing” until it’s fully modular and entirely DRY."        &lt;/li&gt;
&lt;li&gt;"...pragmatism and reason are sacrificed at the altar of a dogmatic adherence to DRY, ..."&lt;/li&gt;
&lt;li&gt;premature abstractions. breaking up the code into smaller functions before you really understand the problem space can make it harder to refactor later.&lt;/li&gt;
&lt;li&gt;micro-functions tend to have longer names because you need more names. Longer names aren't always a good thing when you have many long names on a page.&lt;/li&gt;
&lt;li&gt;loss of locality: One bit of functionality that used to be in one function is now spread across many functions and possibly moved far away from use.&lt;/li&gt;
&lt;li&gt;class pollution: class interfaces grow with smaller functions and hide the real intended interface.&lt;/li&gt;
&lt;li&gt;harder to read, especially for newcomers.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;There is still a place for small functions. But use it in moderation. Communicating with future developers clearly is more important than following dogmatic rules about function size.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="http://whypy3.com/"&gt;&lt;strong&gt;Why Python 3&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All the cool Python 3 features that'll make you switch today!&lt;/li&gt;
&lt;li&gt;Presented as a random code sample surprise&lt;/li&gt;
&lt;li&gt;Examples:
&lt;ul&gt;
&lt;li&gt;Annotations: &lt;code&gt;def my_add(a: int, b: int) -&amp;gt; int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Keyword only arguments: &lt;code&gt;def f(a, b, *args, option=True)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Yield from: &lt;code&gt;yield from range(5)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Enums: &lt;code&gt;class Color(Enum)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;strong&gt;EANABs&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Equally Attractive Non-Alcoholic Beverage&lt;/li&gt;
&lt;li&gt;There is drinking that happens often when you get a bunch of adults together. Often with work or tech gatherings. That’s fine. But make sure you emphasize that drinking is not required. &lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/treyhunner"&gt;@treyhunner&lt;/a&gt; &lt;a href="https://twitter.com/treyhunner/status/896081298581635072"&gt;brought it up recently&lt;/a&gt; and suggested that all conferences and tech events should have this.
&lt;ul&gt;
&lt;li&gt;"I sometimes feel excluded when events include nice alcohol but only cheap soda"
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://alcohol.stanford.edu/alcohol-drug-info/staying-safe/eanabs"&gt;Stanford site&lt;/a&gt; has a bunch of great recipes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;“EANABS are required at all Stanford parties, …”
&lt;ul&gt;
&lt;li&gt;If you have specialty local beers, try to find specialty local sodas.&lt;/li&gt;
&lt;li&gt;If you have nice spiked punch, have a NA version also.&lt;/li&gt;
&lt;li&gt;If you have cocktails, advertise your ability to serve mocktails. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt;  &lt;a href="https://stackoverflow.blog/2017/09/06/incredible-growth-python/"&gt;&lt;strong&gt;The Incredible Growth of Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via StackOverflow&lt;/li&gt;
&lt;li&gt;Recently explored how wealthy countries (those defined as high-income by the World Bank) tend to visit a different set of technologies than the rest of the world. &lt;/li&gt;
&lt;li&gt;Largest differences we saw was in the programming language Python. &lt;/li&gt;
&lt;li&gt;High-income countries, the growth of Python is even larger than it might appear from tools like Stack Overflow Trends, or in other rankings.&lt;/li&gt;
&lt;li&gt;[StackOverflow] makes the case that Python has a solid claim to being the fastest-growing major programming language.&lt;/li&gt;
&lt;li&gt;June 2017 was the first month that Python was the most visited tag on Stack Overflow within high-income nations. (Grown has grown by 2.5-fold since 2012)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python compared to smaller, growing technologies&lt;/strong&gt; graph is incredible.&lt;/li&gt;
&lt;li&gt;Also: &lt;a href="http://www.kdnuggets.com/2017/08/python-overtakes-r-leader-analytics-data-science.html"&gt;&lt;strong&gt;Python overtakes R, becomes the leader in Data Science, Machine Learning platforms&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#43 Python string theory, v2</title><link>https://pythonbytes.fm/episodes/show/43/python-string-theory-v2</link><guid>8ec9baee-6915-4274-b172-85530719f468</guid><enclosure url="https://pythonbytes.fm/episodes/download/43/python-string-theory-v2.mp3" length="17336965" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 14 Sep 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Python string theory, v2</itunes:title><itunes:episode>43</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:18:48</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;h1&gt;Python Bytes 43&lt;/h1&gt;

&lt;p&gt;This episode is brought to you by Rollbar: &lt;a href="https://pythonbytes.fm/rollbar"&gt;&lt;strong&gt;pythonbytes.fm/rollbar&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://github.com/asottile/future-fstrings"&gt;&lt;strong&gt;future-fstrings&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A backport of fstrings to python &amp;lt; 3.6&lt;/li&gt;
&lt;li&gt;Include an encoding string the top of your file (this replaces the utf-8 line if you already have it)&lt;/li&gt;
&lt;li&gt;And then write python3.6 fstring code as usual!&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    # -*- coding: future_fstrings -*-
    thing = 'world'
    print(f'hello {thing}')
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;In action:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    $ python2.7 main.py
    hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;I’m still undecided if I like this sort of monkeying with the language through the encoding mechanism back door. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.youtube.com/watch?v=js_0wjzuMfc"&gt;&lt;strong&gt;The Fun of Reinvention&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keynote from PyCon Israel&lt;/li&gt;
&lt;li&gt;David Beazley rocks it again&lt;/li&gt;
&lt;li&gt;Let’s take Python 3.6 features and see how far we can push them&lt;/li&gt;
&lt;li&gt;Builds an aspect-oriented constraint system using just 3.6 features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://medium.com/@almeidneto/sound-pattern-recognition-with-python-9aff69edce5d"&gt;&lt;strong&gt;Sound Pattern Recognition with Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using&lt;code&gt;scipy.io.wavfile.read&lt;/code&gt; to read a .wav file.&lt;/li&gt;
&lt;li&gt;Looking for peaks (knocks).&lt;/li&gt;
&lt;li&gt;Using minimum values to classify peaks, and minimum distance between peaks.&lt;/li&gt;
&lt;li&gt;This is an interesting start into audio measurements using Python.&lt;/li&gt;
&lt;li&gt;Would be fun to extend to some basic scope measurements, like sampling with a resolution bandwidth, trigger thresholds, pre-trigger time guards, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.python.org/dev/peps/pep-0550/"&gt;&lt;strong&gt;PEP 550: Execution Context&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From the guys at &lt;a href="http://magic.io"&gt;&lt;strong&gt;magic.io&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adds a new generic mechanism of ensuring consistent access to non-local state in the context of out-of-order execution, such as in Python generators and coroutines.&lt;/li&gt;
&lt;li&gt;Thread-local storage, such as &lt;code&gt;threading.local()&lt;/code&gt;, is inadequate for programs that execute concurrently in the same OS thread. This PEP proposes a solution to this problem.&lt;/li&gt;
&lt;li&gt;A few examples of where Thread-local storage (TLS) is commonly relied upon:
&lt;ul&gt;
&lt;li&gt;Context managers like decimal contexts,&lt;code&gt;numpy.errstate&lt;/code&gt;, and &lt;code&gt;warnings.catch_warnings&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Request-related data, such as security tokens and request data in web applications, language context for&lt;code&gt;gettext&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;Profiling, tracing, and logging in large code bases.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The motivation from &lt;a href="https://github.com/magicstack/uvloop"&gt;&lt;strong&gt;uvloop&lt;/strong&gt;&lt;/a&gt; is obviously at work here.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://medium.com/@bfortuner/python-multithreading-vs-multiprocessing-73072ce5600b"&gt;&lt;strong&gt;Intro to Threads and Processes in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Beginner’s guide to parallel programming&lt;/li&gt;
&lt;li&gt;Threads and processes are both useful for different kinds of problems.&lt;/li&gt;
&lt;li&gt;This is a good quick explanation of when and where to use either. With pictures!&lt;/li&gt;
&lt;li&gt;Threads
&lt;ul&gt;
&lt;li&gt;Like mini processes that live inside one process.&lt;/li&gt;
&lt;li&gt;Share mem space with other threads.&lt;/li&gt;
&lt;li&gt;Cannot run simultaneously in Python (there are some workarounds), due to GIL.&lt;/li&gt;
&lt;li&gt;Good for tasks waiting on IO.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Processes
&lt;ul&gt;
&lt;li&gt;Controlled by OS&lt;/li&gt;
&lt;li&gt;Can run simultaneously&lt;/li&gt;
&lt;li&gt;Good for CPU intensive work because you can use multiple cores.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.pyfilesystem.org/"&gt;&lt;strong&gt;Alternative filesystems for Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PyFilesystem: Filesystem Abstraction for Python. &lt;/li&gt;
&lt;li&gt;Work with files and directories in archives, memory, the cloud etc. as easily as your local drive.&lt;/li&gt;
&lt;li&gt;Uses
&lt;ul&gt;
&lt;li&gt;Write code now, decide later where the data will be stored&lt;/li&gt;
&lt;li&gt;unit test without writing real files&lt;/li&gt;
&lt;li&gt;upload files to the cloud without learning a new API&lt;/li&gt;
&lt;li&gt;sandbox your file writing code&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;File system backends
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pyfilesystem.org/page/appfs/"&gt;AppFS&lt;/a&gt; Filesystems for application data.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pyfilesystem.org/page/s3fs/"&gt;S3FS&lt;/a&gt; Amazon S3 Filesystem.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pyfilesystem.org/page/ftpfs/"&gt;FTPFS&lt;/a&gt; File Transfer Protocol.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pyfilesystem.org/page/memoryfs/"&gt;MemoryFS&lt;/a&gt; An in-memory filesystem.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pyfilesystem.org/page/mountfs/"&gt;MountFS&lt;/a&gt; A virtual filesystem that can &lt;em&gt;mount&lt;/em&gt; other filesystems.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pyfilesystem.org/page/multifs/"&gt;MultiFS&lt;/a&gt; A virtual filesystem that combines other filesystems.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pyfilesystem.org/page/osfs/"&gt;OSFS&lt;/a&gt; OS Filesystem (hard-drive).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pyfilesystem.org/page/tarfs/"&gt;TarFS&lt;/a&gt; Read and write compressed Tar archives.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pyfilesystem.org/page/tempfs/"&gt;TempFS&lt;/a&gt; Contains temporary data.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pyfilesystem.org/page/zipfs/"&gt;ZipFS&lt;/a&gt; Read and write Zip files.&lt;/li&gt;
&lt;li&gt;and more&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Our news&lt;/h2&gt;

&lt;p&gt;Michael: switch statement extension to Python: &lt;a href="https://github.com/mikeckennedy/python-switch"&gt;&lt;strong&gt;github.com/mikeckennedy/python-switch&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</description></item><item><title>#44 pip install malicious-code</title><link>https://pythonbytes.fm/episodes/show/44/pip-install-malicious-code</link><guid>138c2e08-9b3c-44e5-bf75-e36313adb957</guid><enclosure url="https://pythonbytes.fm/episodes/download/44/pip-install-malicious-code.mp3" length="22562126" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 20 Sep 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>pip install malicious-code</itunes:title><itunes:episode>44</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:26:35</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;This episode is brought to you by Datadog: &lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.fm/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #1:&lt;/strong&gt; &lt;a href="https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/"&gt;&lt;strong&gt;Ten Malicious Libraries Found on PyPI&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code packages available in PyPI contained modified installation scripts.&lt;/li&gt;
&lt;li&gt;Vulnerabilities were introduced into the setup.py execution of packages for approximately 20 packages on PyPI&lt;/li&gt;
&lt;li&gt;Package names that closely resembled those used for packages found in the standard Python library (e.g. &lt;code&gt;urlib&lt;/code&gt; vs &lt;code&gt;urllib&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The packages contained the exact same code as the upstream libraries except for an installation script.&lt;/li&gt;
&lt;li&gt;Officials with the Slovak authority said they recently notified PyPI administrators of the activity, and all identified packages were taken down immediately. Removal of the infected libraries, however, does nothing to purge them from servers that installed them.&lt;/li&gt;
&lt;li&gt;From PSF: &lt;em&gt;Unlike some language package management systems, PyPI does not have any full time staff devoted to it. It is a volunteer run project with only two active administrators. As such, it doesn't currently have resources for some of the proposed solutions such as actively monitoring or approving every new project published to PyPI. Historically and by necessity we've relied on a reactive strategy of taking down potentially malicious projects as we've become aware of them.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Comments
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/?comments=1&amp;amp;post=33997861"&gt;pip gets more paranoid in the install process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/?comments=1&amp;amp;post=34000031"&gt;Downloads were not super bad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/?comments=1&amp;amp;post=33999957"&gt;Stestagg is sitting on lots of misspellings&lt;/a&gt;
-&lt;a href="https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/?comments=1&amp;amp;post=33999819"&gt;Undergrad thesis compromised Ruby and NodeJS too&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;related: 
&lt;ul&gt;
&lt;li&gt;original warning: &lt;a href="http://www.nbu.gov.sk/skcsirt-sa-20170909-pypi/"&gt;http://www.nbu.gov.sk/skcsirt-sa-20170909-pypi/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;stdlib names no longer allowed: &lt;a href="https://github.com/pypa/warehouse/pull/2409"&gt;https://github.com/pypa/warehouse/pull/2409&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #2: PyPI migration to Warehouse is in progress&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Thanks to Jonas Neubert for researching this topic and writing a blog post titled &lt;a href="https://jonemo.github.io/neubertify/2017/09/13/publishing-your-first-pypi-package/"&gt;Publishing your First PyPI Package by/for the Absolute Beginner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The steps to publish to PyPI have changed with the move to warehouse and pypi.org.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pypi.org/"&gt;pypi.org&lt;/a&gt; is no longer in read-only mode, it is where you publish packages&lt;/li&gt;
&lt;li&gt;The old APIs at &lt;a href="http://pypi.python.org/pypi"&gt;pypi.python.org/pypi&lt;/a&gt; are disabled, if you have a .pypirc file you'll have to update the URLs&lt;/li&gt;
&lt;li&gt;You no longer need to register package names before first uploading, the project gets created on the fly during the first upload of the package.&lt;/li&gt;
&lt;li&gt;The best way to update anything in a package is to change your local package and upload it again, see &lt;a href="https://github.com/pypa/warehouse/issues/2170"&gt;https://github.com/pypa/warehouse/issues/2170&lt;/a&gt;. 
&lt;ul&gt;
&lt;li&gt;This includes even just changes to the description.&lt;/li&gt;
&lt;li&gt;Manual file upload is gone.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;As of right now it looks like you still need to register through pypi.python.org, then do the rest of the interactions with pypi.org. See &lt;a href="https://github.com/pypa/warehouse/issues/2065"&gt;https://github.com/pypa/warehouse/issues/2065&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Markdown support for package descriptions, like README.md seems to be coming: &lt;a href="https://packaging.python.org/specifications/#description-content-type"&gt;https://packaging.python.org/specifications/#description-content-type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jonas’ &lt;a href="https://jonemo.github.io/neubertify/2017/09/13/publishing-your-first-pypi-package/"&gt;blog post&lt;/a&gt; is from 13 Sep 2017, so it might be the most up to date tutorial on all the steps to get a package onto PyPI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;strong&gt;Live coding in a presentation&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Last week’s discussion of &lt;a href="https://www.youtube.com/watch?v=js_0wjzuMfc"&gt;David Beazley’s Fun of Reinvention talk&lt;/a&gt; got me thinking about doing live coding during a presentation since he did it so well.&lt;/li&gt;
&lt;li&gt;Several links regarding how to do various levels of live coding:
&lt;ul&gt;
&lt;li&gt;Advice for live coding: &lt;a href="https://code.tutsplus.com/articles/the-holy-grail-of-conference-talks-live-coding--net-30217"&gt;https://code.tutsplus.com/articles/the-holy-grail-of-conference-talks-live-coding--net-30217&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Not quite live coding: &lt;a href="https://vanslaars.io/post/not-quite-live-coding/"&gt;https://vanslaars.io/post/not-quite-live-coding/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Avoiding live coding: &lt;a href="https://codeplanet.io/techniques-avoid-live-coding-part/"&gt;https://codeplanet.io/techniques-avoid-live-coding-part/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Live coding:
&lt;ul&gt;
&lt;li&gt;practice, have a backup plan, don’t forget to talk, plan content&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;not quite: 
&lt;ul&gt;
&lt;li&gt;use git tags&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;avoiding it:
&lt;ul&gt;
&lt;li&gt;My favorite effect is fade-in slideshows where part of the code is shown at a time so you can talk about it and people know which bit to look at&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4: Notable REST / Web Frameworks&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Falcon: &lt;a href="https://falconframework.org/"&gt;https://falconframework.org/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unburdening APIs for over 4.70 x 10-2 centuries. (4.7 years)&lt;/li&gt;
&lt;li&gt;Falcon is a bare-metal Python web API framework for building very fast app backends and microservices.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complementary:&lt;/strong&gt; Falcon complements more general Python web frameworks by providing bare-metal performance and flexibility wherever you need it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compatible&lt;/strong&gt;: Thanks to WSGI, Falcon runs on a large variety of web servers and platforms. Falcon works great with CPython 2.6, 2.7, and 3.3+. Try PyPy for an extra speed boost.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hug: &lt;a href="http://hug.rest"&gt;http://hug.rest&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Drastically simplify API development over multiple interfaces. &lt;/li&gt;
&lt;li&gt;With hug, design and develop your API once, then expose it however your clients need to consume it. Be it locally, over HTTP, or through the command line.&lt;/li&gt;
&lt;li&gt;Built-in documentation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;strong&gt;tox&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“The name of the &lt;a href="https://pypi.python.org/pypi/tox"&gt;tox automation project&lt;/a&gt; derives from "testing out of the box". It aims to "automate and standardize testing in Python". Conceptually it is one level above pytest and serves as a command line frontend for running tests and automate all kinds of tasks around the project. It also acts as a frontend for &lt;a href="https://en.wikipedia.org/wiki/Continuous_integration"&gt;Continuous Integration Systems&lt;/a&gt; to unify what you do locally and what happens in e.g. Jenkins or Travis CI.” - Oliver Bestwalter&lt;/li&gt;
&lt;li&gt;a small tox.ini file:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    [tox]
    envlist = py27,py35, py36
    [testenv]
    deps=pytest 
    commands=pytest
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;You place this in your package source directory and then run tox, which will:
&lt;ul&gt;
&lt;li&gt;Use setup.py to create a sdist&lt;/li&gt;
&lt;li&gt;create a virtual environment for each environment in envlist&lt;/li&gt;
&lt;li&gt;Install dependencies in the environments&lt;/li&gt;
&lt;li&gt;Install your package into the environment&lt;/li&gt;
&lt;li&gt;Run the tests&lt;/li&gt;
&lt;li&gt;Do this for multiple environments, so multiple Python versions (as an example)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Much more powerful than that, but that’s how many people use it.&lt;/li&gt;
&lt;li&gt;Further Reading:
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tox.readthedocs.io/en/latest/index.html"&gt;http://tox.readthedocs.io/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tox.readthedocs.io/en/latest/example/basic.html"&gt;http://tox.readthedocs.io/en/latest/example/basic.html&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.ionelmc.ro/2015/04/14/tox-tricks-and-patterns/"&gt;https://blog.ionelmc.ro/2015/04/14/tox-tricks-and-patterns/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6: flake8-tidy-imports&lt;/strong&gt; &lt;a href="https://pypi.python.org/pypi/flake8-tidy-imports#options"&gt;&lt;strong&gt;deprecated imports&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can declare {python2to3} as a banned-module import, and it will check against a long list of import moves and removals between python 2 and python 3, suggesting relevant replacements if available. &lt;/li&gt;
&lt;li&gt;I meticulously compiled this list by reading release notes from Python 3.0-3.6 as well as testing in a large legacy python codebase, but I presumably missed a few.&lt;/li&gt;
&lt;li&gt;Example:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    flake8 file.py
    file.py:1:1: I201 Banned import 'mock' used - use unittest.mock instead.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Michael #7 (bonus!):&lt;/strong&gt; &lt;a href="https://emptysqua.re/blog/coaching-for-first-time-pygotham-speakers/"&gt;&lt;strong&gt;Help Me Offer Coaching to First-Time PyGotham Speakers&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Via A. Jesse Jiru Davis&lt;/li&gt;
&lt;li&gt;I want to raise $1200 for public-speaking coaching for first-time speakers at PyGotham, the New York City Python conference. Will you chip in?&lt;/li&gt;
&lt;li&gt;Jesse is a PyGotham conference organizer, but I’m launching this fundraiser independently of PyGotham.&lt;/li&gt;
&lt;li&gt;As of September 19, I have raised my goal. Thanks to everyone who donated!
&lt;h2&gt;Our news&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finished writing my &lt;strong&gt;free MongoDB course&lt;/strong&gt; (subscribe to get notified of release at &lt;strong&gt;&lt;a href="https://training.talkpython.fm/getnotified"&gt;https://training.talkpython.fm/getnotified&lt;/a&gt;&lt;/strong&gt; )&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mikeckennedy/python-switch"&gt;&lt;strong&gt;python-switch&lt;/strong&gt;&lt;/a&gt; kind of went off the hook (see &lt;a href="https://github.com/mikeckennedy/python-switch"&gt;this&lt;/a&gt; and &lt;a href="https://www.reddit.com/r/Python/comments/70413x/adding_a_switch_statement_to_python/"&gt;that&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Book is shipping: &lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;Python Testing with pytest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#45 A really small web API and OS-level machine learning</title><link>https://pythonbytes.fm/episodes/show/45/a-really-small-web-api-and-os-level-machine-learning</link><guid>9a901b6c-5407-4fdd-953b-aca32d9b5c67</guid><enclosure url="https://pythonbytes.fm/episodes/download/45/a-really-small-web-api-and-os-level-machine-learning.mp3" length="15354788" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 29 Sep 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>A really small web API and OS-level machine learning</itunes:title><itunes:episode>45</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:19:33</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;This episode is brought to you by Rollbar: &lt;a href="http://pythonbytes.fm/rollbar"&gt;pythonbytes.fm/rollbar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="http://pico.readthedocs.io/"&gt;&lt;strong&gt;pico&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"a very small web application framework for Python" &lt;/li&gt;
&lt;li&gt;Recommended by Ivan Pejić&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=wyhAzM6TIrw&amp;amp;feature=youtu.be&amp;amp;t=5h54m44s"&gt;lightning talk from EuroPython 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This would be a good web framework for building internal services and tools that non-web developers need to interact with and modify.&lt;/li&gt;
&lt;li&gt;Very simple.&lt;/li&gt;
&lt;li&gt;Not REST, but not confusing either.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://arstechnica.com/gadgets/2017/09/macos-10-13-high-sierra-the-ars-technica-review/8/#h5"&gt;&lt;strong&gt;High Sierra ships, first major OS with machine learning built in?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;September 26th &lt;a href="https://www.apple.com/macos/high-sierra/"&gt;&lt;strong&gt;macOS High Sierra&lt;/strong&gt;&lt;/a&gt; was released (yay)&lt;/li&gt;
&lt;li&gt;Mostly a foundational release with barely visible changes but awesome things like APFS replacing HFS+, etc.&lt;/li&gt;
&lt;li&gt;Comes with &lt;strong&gt;CoreML&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Apple’s intent with the new CoreML framework is to package up prebuilt ML models and execution engines and make them possible for third-party apps to use. &lt;/li&gt;
&lt;li&gt;Developers can take a trained machine learning algorithm, package it up as an MLModel, and integrate it into their apps. &lt;/li&gt;
&lt;li&gt;Apple offers a few default machine learning models that developers can download and use too&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rather than sharing your data with a central server, grouping it together with a lot of other people's data, and improving machine learning models that way, Apple stresses that everything CoreML does is happening on the device.&lt;/li&gt;
&lt;li&gt;On Macs that support Metal—generally, Macs from 2012 and later—CoreML uses a mix of CPU processing and GPGPU processing, depending on the task.&lt;/li&gt;
&lt;li&gt;Add on the fact that High Sierra has &lt;a href="https://arstechnica.com/gadgets/2017/09/macos-10-13-high-sierra-the-ars-technica-review/7/#h2"&gt;&lt;strong&gt;external GPU support&lt;/strong&gt;&lt;/a&gt; now and you have a sweet combo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://opensource.com/article/17/9/python-logging"&gt;&lt;strong&gt;A guide to logging in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simply put, the best logging introduction I've read so far.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.chrisbarra.xyz/posts/let-me-introduce-slots/"&gt;&lt;strong&gt;Let me introduce: slots&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;So what are slots? __slots__ are a different way to define the attributes storage for classes in Python.&lt;/li&gt;
&lt;li&gt;for normal Python classes, a dict is used to store the instance's attributes.&lt;/li&gt;
&lt;li&gt;With &lt;code&gt;__slots__&lt;/code&gt; we don't have an attribute called &lt;code&gt;__dict__&lt;/code&gt; inside our instance. But we have a new attribute called &lt;code&gt;__slots__&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;But why would you need to use slots when you have a dict? Well the answer is that __slots__ are a lot lighter and slightly faster.&lt;/li&gt;
&lt;li&gt;Outcome:
&lt;ul&gt;
&lt;li&gt;~57% less memory usage thanks to just one line of code.&lt;/li&gt;
&lt;li&gt;__slots__ are also slightly faster.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Covered in depth in my &lt;a href="https://training.talkpython.fm/courses/explore_pythonic_code/write-pythonic-code-like-a-seasoned-developer"&gt;Write Pythonic Code Like a Seasoned Developer&lt;/a&gt; course.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://docs.pipenv.org/"&gt;&lt;strong&gt;pipenv revisited&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Covered in &lt;a href="https://pythonbytes.fm/"&gt;episode 11&lt;/a&gt;. However, there are some notable changes since then.&lt;/li&gt;
&lt;li&gt;Reminder:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pepenv&lt;/code&gt; handles virtualenv and pip interaction for you&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv install&lt;/code&gt; creates a virtualenv (if one doesn't exist) and installs stuff into a virtualenv.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv shell&lt;/code&gt; uses the virtualenv&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exit&lt;/code&gt; allows you to get out of the virtualenv&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv lock -r&lt;/code&gt; will generate a requirements.txt file for you, so you can use it even if you need a requirements.txt file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Notable changes:
&lt;ul&gt;
&lt;li&gt;New &lt;a href="https://vimeo.com/233134524"&gt;4 minute screencast&lt;/a&gt; with Kenneth demonstrating how to use it. Watching him use it makes it very simple to understand. &lt;/li&gt;
&lt;li&gt;Specify multiple package indexes, and even specify a particular index for particular packages. So you can combine both pypi with a company index and a group index and maybe one for your project.&lt;/li&gt;
&lt;li&gt;pipenv check will tell you about any known security vulnerabilities in your installed packages&lt;/li&gt;
&lt;li&gt;9 months old with 192 releases, so keep an eye on it for new features all the time.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://arstechnica.com/gadgets/2017/09/devops-and-data-science-are-the-big-software-dev-money-makers/"&gt;&lt;strong&gt;Stack Overflow gives an even closer look at developer salaries&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tabs and spaces aren't the only things that influence developer pay…&lt;/li&gt;
&lt;li&gt;Some of the broad trends are no big surprise; for example, the chosen cities tend to pay more than their respective nations do, for example.&lt;/li&gt;
&lt;li&gt;DevOps specialists and data scientists both earn well. &lt;/li&gt;
&lt;li&gt;Other aspects of the data are a little more surprising. Graphics programmers, for example, aren't particularly well paid, in spite of having a relatively specialized, complex niche.&lt;/li&gt;
&lt;li&gt;And while earnings in four of the countries are surprisingly similar, those in America are substantially higher, regardless of experience; in fact, the median salary of a developer in the US is comparable to that of someone with 20 years of experience in Canada or Germany and markedly higher than 20-year veterans in France and the UK. Even after taking into account the US' higher healthcare costs, America is the place to be if you're a programmer.&lt;/li&gt;
&lt;li&gt;Comments
&lt;ul&gt;
&lt;li&gt;I do have to wonder how much Silicon Valley skews that salary chart, as the Web 2.0 companies pay HUGE comparatively [&lt;a href="https://arstechnica.com/gadgets/2017/09/devops-and-data-science-are-the-big-software-dev-money-makers/?comments=1&amp;amp;post=34009615"&gt;ref&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;I asked Stack Overflow's data scientist that question, and she said not much; even without its outlier cities, the US pays much more than the rest of the world. [&lt;a href="https://arstechnica.com/gadgets/2017/09/devops-and-data-science-are-the-big-software-dev-money-makers/?comments=1&amp;amp;post=34009667"&gt;ref&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Healthcare cost are only part of it. I got paid about $600/month 9 months a year by my government to study in university. [&lt;a href="https://arstechnica.com/gadgets/2017/09/devops-and-data-science-are-the-big-software-dev-money-makers/?comments=1&amp;amp;post=34009803"&gt;ref&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;I feel like a lot of IT people lack soft skills, and it caps their salary at a lower end. [&lt;a href="https://arstechnica.com/gadgets/2017/09/devops-and-data-science-are-the-big-software-dev-money-makers/?comments=1&amp;amp;post=34009925"&gt;ref&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our news:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hardcopies of &lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;Python Testing with pytest&lt;/a&gt; now &lt;a href="http://amzn.to/2fUZJxi"&gt;shipping on Amazon&lt;/a&gt;, as well as &lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;Pragmatic&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;When you get your copy, let me know. Send a pic to &lt;a href="https://twitter.com/brianokken"&gt;@brianokken&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#46 Spicy lecture notes and unicorn console spinners</title><link>https://pythonbytes.fm/episodes/show/46/spicy-lecture-notes-and-unicorn-console-spinners</link><guid>f792f14f-7fda-4957-adcd-40e6d9578202</guid><enclosure url="https://pythonbytes.fm/episodes/download/46/spicy-lecture-notes-and-unicorn-console-spinners.mp3" length="14706542" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 05 Oct 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Spicy lecture notes and unicorn console spinners</itunes:title><itunes:episode>46</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:16:51</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to &lt;a href="https://do.co/python"&gt;&lt;strong&gt;do.co/python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="http://www.scipy-lectures.org/"&gt;&lt;strong&gt;Scipy lecture notes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“One document to learn numerics, science, and data with Python”&lt;/li&gt;
&lt;li&gt;Topics
&lt;ul&gt;
&lt;li&gt;Python language tutorial&lt;/li&gt;
&lt;li&gt;NumPy, Matplotlib, scipy&lt;/li&gt;
&lt;li&gt;Debugging, optimizing, image manipulation&lt;/li&gt;
&lt;li&gt;Statistics, scikit-image, scikit learn&lt;/li&gt;
&lt;li&gt;3D plotting&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Nice table of contents layout that makes it easy to jump right to whatever you need to learn.&lt;/li&gt;
&lt;li&gt;Just in time learning for scientific Python.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.codementor.io/dushyantbgs/building-a-desktop-notification-tool-using-python-bcpya9cwh"&gt;&lt;strong&gt;Building a desktop notification tool for Linux using python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The term desktop notifications refer to a graphical control element that communicates certain events to the user without forcing them to react to this notification immediately.&lt;/li&gt;
&lt;li&gt;Example: we are going to build a notification tool which displays the current rate of bitcoins in INR.&lt;/li&gt;
&lt;li&gt;Based on &lt;a href="https://notify2.readthedocs.io/en/latest/"&gt;notify2&lt;/a&gt; package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3&lt;em&gt;*&lt;/strong&gt;:&lt;/em&gt;* &lt;a href="https://pypi.python.org/pypi/pytest-benchmark"&gt;&lt;strong&gt;pytest-benchmark&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easily wrap some time constraints around some code to make sure certain parts of your system don’t slow down.&lt;/li&gt;
&lt;li&gt;Good table or graph based preliminary times with statistics&lt;/li&gt;
&lt;li&gt;Can generate golden sets of numbers, then compare against those and fail based on changes in particular stats like min, mean, etc.&lt;/li&gt;
&lt;li&gt;Can have max and min times for benchmarks even without previous training.&lt;/li&gt;
&lt;li&gt;Lots of fun flags and utilities.&lt;/li&gt;
&lt;li&gt;good integration with pytest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://veekaybee.github.io/2017/09/26/python-packaging/"&gt;&lt;strong&gt;Alice in Python projectland&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Vicki Boykis&lt;/li&gt;
&lt;li&gt;Python project structure and packaging standardization is still not a solved problem&lt;/li&gt;
&lt;li&gt;In the JVM, as long as you have your path structured correctly, build tools will understand it and create a package for you into an executable JAR.&lt;/li&gt;
&lt;li&gt;But, when I started looking for the same standardization in Python, it wasn’t as straightforward. Some questions I had as I worked: 
&lt;ul&gt;
&lt;li&gt;Should I be using virtualenvs? &lt;/li&gt;
&lt;li&gt;Pipenvs? &lt;/li&gt;
&lt;li&gt;Setuptools? &lt;/li&gt;
&lt;li&gt;Should I have a setup.cfg? &lt;/li&gt;
&lt;li&gt;What are wheels, or eggs, for that matter? &lt;/li&gt;
&lt;li&gt;Does each folder need an __init__.py? &lt;/li&gt;
&lt;li&gt;What does that file even do? &lt;/li&gt;
&lt;li&gt;How do I reference modules along the same PYTHONPATH?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hat tip to &lt;a href="https://github.com/bndr/pipreqs"&gt;pipreqs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Conclusion: Python project structure and packaging can be intimidating, but, if you take it step by step, it doesn’t have to be.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://jvns.ca/teach-tech-with-cartoons/"&gt;&lt;strong&gt;How to teach technical concepts with cartoons&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just draw more pictures.&lt;/li&gt;
&lt;li&gt;You don’t have to be a good artist for drawings to help with retention when you are trying to teach technical concepts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://github.com/ManrajGrover/halo"&gt;&lt;strong&gt;Halo: Beautiful terminal spinners in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We’ve talk about progressbars: tqdm: https://github.com/tqdm/tqdm&lt;/li&gt;
&lt;li&gt;doesn’t have to be.&lt;/li&gt;
&lt;li&gt;Cool methods like&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spinner.start([text])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spinner.succeed([text])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spinner.fail([text])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Windows File Progress Dialog Author: https://xkcd.com/612/&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Extras&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;releases: stay current. go upgrade
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/downloads/release/python-363/"&gt;Python 3.6.3 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/latest/changelog.html"&gt;pytest 3.2.3 released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;New Test &amp;amp; Code episodes 
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://testandcode.com/31"&gt;31: I'm so sick of the testing pyramid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://testandcode.com/32"&gt;32: David Hussman - Agile vs Agility, Dude's Law, and more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#47 PyPy now works with way more C-extensions and parking your package safely</title><link>https://pythonbytes.fm/episodes/show/47/pypy-now-works-with-way-more-c-extensions-and-parking-your-package-safely</link><guid>1f5d6bdd-658f-480b-8b3d-6977e8935063</guid><enclosure url="https://pythonbytes.fm/episodes/download/47/pypy-now-works-with-way-more-c-extensions-and-parking-your-package-safely.mp3" length="14913279" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 12 Oct 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>PyPy now works with way more C-extensions and parking your package safely</itunes:title><itunes:episode>47</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:16:44</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to &lt;a href="https://do.co/python"&gt;&lt;strong&gt;do.co/python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1&lt;/strong&gt;: &lt;a href="https://morepypy.blogspot.com/2017/10/pypy-v59-released-now-supports-pandas.html"&gt;&lt;strong&gt;PyPy v5.9 Released, Now Supports Pandas, NumPy&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NumPy and Pandas work on PyPy2.7 v5.9&lt;/li&gt;
&lt;li&gt;Cython 0.27.1 (released very recently) supports more projects with PyPy, both on PyPy2.7 and PyPy3.5 beta&lt;/li&gt;
&lt;li&gt;Optimized JSON parser for both memory and speed.&lt;/li&gt;
&lt;li&gt;CFFI updated&lt;/li&gt;
&lt;li&gt;Nice to see continued improvements and work on PyPy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://github.com/satwikkansal/wtfpython/blob/master/README.md"&gt;&lt;strong&gt;WTF Python?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python, being awesome by design high-level and interpreter-based programming language, provides us with many features for the programmer's comfort. &lt;/li&gt;
&lt;li&gt;But sometimes, the outcomes of a Python snippet may not seem obvious to a regular user at first sight.&lt;/li&gt;
&lt;li&gt;Here is a fun project attempting to collect such classic and tricky examples of unexpected behaviors in Python and discuss what exactly is happening under the hood!&lt;/li&gt;
&lt;li&gt;Examples:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/satwikkansal/wtfpython/blob/master/README.md#skipping-lines"&gt;&lt;strong&gt;Skipping lines?&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;​​&lt;/strong&gt;&lt;a href="https://github.com/satwikkansal/wtfpython/blob/master/README.md#modifying-a-dictionary-while-iterating-over-it"&gt;&lt;strong&gt;Modifying a dictionary while iterating over it&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/satwikkansal/wtfpython/blob/master/README.md#backslashes-at-the-end-of-string"&gt;&lt;strong&gt;Backslashes at the end of string&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/satwikkansal/wtfpython/blob/master/README.md#is-is-not-what-it-is"&gt;&lt;strong&gt;is is not what it is!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I’m thinking of doing some fun follow on projects with this. More on that later.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://www.ynonperek.com/2017/09/21/python-exercises/amp/"&gt;&lt;strong&gt;Python Exercises&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“… focus on the language itself and the standard library.”&lt;/li&gt;
&lt;li&gt;Some non-obvious Python exercises to help hone your Python skills, and possibly use in coding exercises of a job interview or maybe pre-interview screen.&lt;/li&gt;
&lt;li&gt;Topics
&lt;ul&gt;
&lt;li&gt;Basic syntax&lt;/li&gt;
&lt;li&gt;Text Processing&lt;/li&gt;
&lt;li&gt;OS Integration&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Decorators &amp;amp; Generators&lt;/li&gt;
&lt;li&gt;Classes, Modules, &lt;/li&gt;
&lt;li&gt;Exceptions, Lists, Dictionaries, Multiprocessing&lt;/li&gt;
&lt;li&gt;&amp;amp; Testing! always including testing when ~~interviewing someone~~ practicing your coding.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://blog.nelhage.com/2011/03/exploiting-pickle/"&gt;&lt;strong&gt;Exploiting misuse of Python's "pickle"&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you program in Python, you’re probably familiar with the pickle serialization library, which provides for efficient binary serialization and loading of Python datatypes.&lt;/li&gt;
&lt;li&gt;Hopefully, you’re also familiar with the warning printed prominently near the start of pickle’s documentation:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Warning: The pickle module is not intended to be secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;this blog post will describe exactly how trivial it is to exploit such a service, using a simplified version of the code I recently encountered as an example. &lt;/li&gt;
&lt;li&gt;Executing Code: So, what can we do with a vulnerable service? Well, pickle is supposed to allow us to represent arbitrary objects. An obvious target is Python’s &lt;code&gt;subprocess.Popen&lt;/code&gt; objects!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://simpleisbetterthancomplex.com/series/beginners-guide/1.11/"&gt;&lt;strong&gt;A Complete Beginner's Guide to Django&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lots of Django tutorials already, but this may appeal to folks with a more academic bent.&lt;/li&gt;
&lt;li&gt;Complete with wireframes, UML class hierarchies and use case diagrams.&lt;/li&gt;
&lt;li&gt;Series with 6 parts done, a 7th part planned, which will be the last part.&lt;/li&gt;
&lt;li&gt;Some fun comic like drawings, and lots of screenshots.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://github.com/mattsb42/pypi-parker"&gt;&lt;strong&gt;pypi-parker&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Helper tooling for parking PyPI namespaces to combat typosquatting.&lt;/li&gt;
&lt;li&gt;pypi-parker lets you easily park package names on PyPI to protect users of your packages from typosquatting.&lt;/li&gt;
&lt;li&gt;Typosquatting is a problem: in general, but also on PyPI. &lt;/li&gt;
&lt;li&gt;There are efforts being taken by pypa to protect core library names, but this does not (and really cannot and probably should not attempt to) help individual package owners.&lt;/li&gt;
&lt;li&gt;For example, &lt;code&gt;reqeusts&lt;/code&gt; rather than &lt;code&gt;requests&lt;/code&gt;, or &lt;code&gt;crytpography&lt;/code&gt; rather than &lt;code&gt;cryptography&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Why? Self-serve is a good thing. Let's not try and get rid of that. Work with it instead.&lt;/li&gt;
&lt;li&gt;What? pypi-parker provides a custom distutils command park that interprets a provided config file to generate empty Python package source distributables. These packages will always throw an ImportError when someone tries to install them. You can customize the ImportError message to help guide users to the correct package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our news&lt;/p&gt;

&lt;p&gt;Michael: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just launched &lt;a href="http://freemongodbcourse.com"&gt;&lt;strong&gt;freemongodbcourse.com&lt;/strong&gt;&lt;/a&gt; Come and sign up to learn MongoDB and some Python&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/dstufft/status/917703274966536192?t=1&amp;amp;cn=ZmxleGlibGVfcmVjc18y&amp;amp;refsrc=email&amp;amp;iid=94524f9448ff4f01905c15700bf2cc1c&amp;amp;uid=3098427092&amp;amp;nid=244 272699400"&gt;&lt;strong&gt;Python3 usage has doubled in the past year&lt;/strong&gt;&lt;/a&gt; (thanks Donald Stufft)&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#48 Garbage collection and memory management in Python</title><link>https://pythonbytes.fm/episodes/show/48/garbage-collection-and-memory-management-in-python</link><guid>d24c4837-23bf-4927-af3a-6abd0632108a</guid><enclosure url="https://pythonbytes.fm/episodes/download/48/garbage-collection-and-memory-management-in-python.mp3" length="14645597" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 19 Oct 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Garbage collection and memory management in Python</itunes:title><itunes:episode>48</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:17:50</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to &lt;a href="https://do.co/python"&gt;&lt;strong&gt;do.co/python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt;  &lt;a href="https://python-graph-gallery.com/"&gt;&lt;strong&gt;The Python Graph Gallery&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“cool graphs” x “head explodes with options”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://github.com/ticketea/pynesis"&gt;&lt;strong&gt;pynesis&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High level python library for using kinesis streams&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are Kinesis streams? &lt;a href="https://aws.amazon.com/kinesis/data-streams/"&gt;AWS Kinesis streams&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enables you to build custom applications that process or analyze &lt;a href="https://aws.amazon.com/streaming-data/"&gt;streaming data&lt;/a&gt; for specialized needs.&lt;/li&gt;
&lt;li&gt;Continuously capture and store terabytes of data per hour from hundreds of thousands of sources such as website clickstreams, financial transactions, social media feeds, IT logs, and location-tracking events.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High level kinesis client. Support python 2.7 and 3.6, and has helpers for using it within Django.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Some features:
&lt;ul&gt;
&lt;li&gt;Supports python 2 &amp;amp; 3&lt;/li&gt;
&lt;li&gt;Django helpers included&lt;/li&gt;
&lt;li&gt;Automatically detects shard count changes&lt;/li&gt;
&lt;li&gt;Checkpoints/sequences persistence can be customized&lt;/li&gt;
&lt;li&gt;Provided Checkpointer implementations for memory, django model and redis&lt;/li&gt;
&lt;li&gt;Provided Dummy kinesis implementation for development/testing&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt;  &lt;a href="https://rushter.com/blog/python-garbage-collector/"&gt;&lt;strong&gt;Things you need to know about garbage collection in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #4: WSGI Is Not Enough Anymore,&lt;/strong&gt; &lt;a href="https://medium.com/@amitn241/wsgi-is-not-enough-anymore-part-i-bc9713a79841"&gt;&lt;strong&gt;part 1&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;a href="https://medium.com/@amitn241/wsgi-is-not-enough-anymore-part-ii-b78b4cfdd09"&gt;&lt;strong&gt;part 2&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explores the factors that make WSGI a less attractive option for developing web applications with Python.&lt;/li&gt;
&lt;li&gt;Most major web frameworks use WSGI (Pyramid, Flask, Django, Bottle, etc.)&lt;/li&gt;
&lt;li&gt;This has been a major benefit / breakthrough&lt;/li&gt;
&lt;li&gt;The Web Server Gateway Interface (WSGI) is a &lt;a href="https://www.python.org/dev/peps/pep-3333/"&gt;specification&lt;/a&gt; which was first developed in 2003, and then revised in 2010, in order to create a standard for Python web frameworks to interact with web servers.&lt;/li&gt;
&lt;li&gt;The bad news is that WSGI comes with two major drawbacks:
&lt;ul&gt;
&lt;li&gt;WSGI compatible servers are synchronous&lt;/li&gt;
&lt;li&gt;WSGI compatible servers only supports the HTTP protocol&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Problem 1:  Concurrency
&lt;ul&gt;
&lt;li&gt;By design, a WSGI server is synchronous. This means it blocks each request until a response arrives from the application.&lt;/li&gt;
&lt;li&gt;Scaling is done necessarily via threads (with GIL limitations), web gardens (multiple processes per server), and web farms (multiple servers)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Problem 2: HTTP is the only protocol
&lt;ul&gt;
&lt;li&gt;HTML5 introduced, among other things, web sockets, which create a bi-directional communication layer between servers and clients.&lt;/li&gt;
&lt;li&gt;But they are not supported, so polling (yuck) is the only option&lt;/li&gt;
&lt;li&gt;Python frameworks which rely on WSGI do not implement web socket communication and must rely on 3rd party solutions and extra components and resources.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Part 2 discusses solutions via event driven programming&lt;/li&gt;
&lt;li&gt;Part 3 (pending) talks about libraries for solving the concurrent problem in Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt;  &lt;a href="https://dbader.org/blog/queues-in-python"&gt;&lt;strong&gt;Queues in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dan Bader&lt;/li&gt;
&lt;li&gt;I was in search of a LIFO queue and ran across this article by Dan.&lt;/li&gt;
&lt;li&gt;For LIFO:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    ### collections.deque as LIFO queue
    q = collections.deque()

    # insert elements
    q.appendleft(item)

    #iterate
    for item in q:
        print(item)

    ### queue.LifoQueue
    q = queue.LifoQueue()

    # insert elements
    q.put(item)

    #iterate
    while not q.empty():
        item = q.get()
        print(item)

    ### list as LIFO queue
    q = []

    # insert elements
    q.append(item)

    #iterate
    for item in q[::-1]:
        print(item)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.podsheets.com/p/using-reflection/#/"&gt;&lt;strong&gt;Using Reflection: A Podcast About Humans Engineering&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Mark Weiss&lt;/li&gt;
&lt;li&gt;Check out Jesse Davis’s &lt;a href="https://www.podsheets.com/p/using-reflection/#/episode/A.-Jesse-Jiryu-Davis"&gt;episode for a starter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Engineering journey, what they value about engineering and skills they have come to recognize in themselves.&lt;/li&gt;
&lt;li&gt;Dig into what makes teams successful, and how we help them succeed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Our news&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Michael: Free MongoDB course has had over 5,000 signups in the first few days. Check it out &lt;strong&gt;&lt;a href="http://freemongodbcourse.com"&gt;http://freemongodbcourse.com&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#49 Your technical skills are obsolete: now what?</title><link>https://pythonbytes.fm/episodes/show/49/your-technical-skills-are-obsolete-now-what</link><guid>49933aa7-f8a2-4bec-a453-8b5a3eaf3dbb</guid><enclosure url="https://pythonbytes.fm/episodes/download/49/your-technical-skills-are-obsolete-now-what.mp3" length="23110463" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 25 Oct 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Your technical skills are obsolete: now what?</itunes:title><itunes:episode>49</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:25:57</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to &lt;a href="https://do.co/python"&gt;&lt;strong&gt;do.co/python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1: Conference videos for DjangoCon 2017 and PyGotham 2017&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pyvideo.org/events/pygotham-2017.html"&gt;PyGotham 2017 videos on pyvideo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ujGCN9MOrRk&amp;amp;list=PL2NFhrDSOxgXmA215-fo02djziShwLa6T"&gt;DjangoCon 2017 on YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;One I’ve watched so far: 
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=UY2JMZjQspY&amp;amp;index=31&amp;amp;list=PL2NFhrDSOxgXmA215-fo02djziShwLa6T"&gt;DjangoCon US 2017 - Django vs Flask by David "DB" Baumgold&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bit.ly/djangocon-flask"&gt;slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Very good introduction to Flask while comparing some of the features of Django to Flask and what the current frequent practices are for doing things in Flask like:&lt;/li&gt;
&lt;li&gt;Data modeling with SQLAlchemy, MongoEngine, or Peewee&lt;/li&gt;
&lt;li&gt;User admin with Flask-Security, which wraps Flask-Login, Flask-Permissions, and other commonly used together packages.&lt;/li&gt;
&lt;li&gt;Blueprints in Flask solve a similar problem as apps in Django.&lt;/li&gt;
&lt;li&gt;Flask-Marshmallow for APIs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2: &lt;a href="https://twitter.com/llanga/status/916460954128285696"&gt;Python 3.6.3 released on Tue. All machines at FB are already running it&lt;/a&gt; (3 days)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tweet: Did you hear that 3.6.3 was released on Tue? How about that all machines at FB are already running it? Over 36.3% of our Python apps are 3.6 via &lt;a href="https://twitter.com/llanga/status/916460954128285696"&gt;@llanga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;See Jason Fried’s presentation on culture: &lt;a href="https://www.youtube.com/watch?v=nRtp9NgtXiA"&gt;Rules for Radicals: Changing the Culture of Python at Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More Python 3 news
&lt;ul&gt;
&lt;li&gt;Ubuntu 17.10: &lt;em&gt;“Python 2 is no longer installed by default. Python 3 has been updated to 3.6.”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;PSA: Python 3.3 is end-of-life in 2 days. Are you prepared?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://codewithoutrules.com/2017/10/23/obsolete-skills/"&gt;&lt;strong&gt;Your technical skills are obsolete: now what?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Itamar Turner-Trauring&lt;/li&gt;
&lt;li&gt;We’re big proponents of keeping your skills current, of learning new techniques and technologies. But how does that fit in with life and work.&lt;/li&gt;
&lt;li&gt;This article is an opinion of how to work on new skills while at work, do it quickly, and look good to your manager.&lt;/li&gt;
&lt;li&gt;It starts with a good discussion of real business reasons why some projects use older technology. Basically, cost vs benefit of change.&lt;/li&gt;
&lt;li&gt;Steps to be part of the solution:
&lt;ul&gt;
&lt;li&gt;Identify obsolete and problematic technologies.&lt;/li&gt;
&lt;li&gt;Identify potential replacements.&lt;/li&gt;
&lt;li&gt;Get management buy in to get resources (you) to do a pilot project exploring new technology.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;This process will help you be better at identifying problems, even if you don’t get approval to fix it.&lt;/li&gt;
&lt;li&gt;He ends with a comment that if you don’t get approval, all is not lost, you have skills to apply to a new job.&lt;/li&gt;
&lt;li&gt;I’d like to make sue you do a few more steps before giving up and looking for a new job. Before you consider a move to a new team or company, I think…
&lt;ul&gt;
&lt;li&gt;You should give your manager the benefit of the doubt and use this to start a conversation. Make sure you understand their reasons for saying no.&lt;/li&gt;
&lt;li&gt;Make sure you are not proposing too much time taken away from your primary role in the company.&lt;/li&gt;
&lt;li&gt;State that you want to improve your skills by providing value for the team and the company. &lt;/li&gt;
&lt;li&gt;Is the “no” due to just bad timing? Is there a higher priority problem to work on? &lt;/li&gt;
&lt;li&gt;You’ve just shown that you are someone interested in keeping your skills sharp and helping the company by expanding your role. If you’re still stuck at this point, then consider a move but also, …&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Read this:
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://amzn.to/2xjDBmI"&gt;Team Geek: A Software Developer's Guide to Working Well with Others&lt;/a&gt; - Brian Fitzpatrick&lt;/li&gt;
&lt;li&gt;Especially:
    - pg 117 : “Offensive vs Defensive work”. 50-70% of your time at work needs to be focused on creating new value for your company or your customers. No more than 30-50% on repaying technical debt. (Okken: Limit your process improvement / new technology exploration to no more than 10-20%, but try to never drop it below 5% of your time)
    - pg 113 : “It’s easier to ask for forgiveness than permission.” This is a fine line between doing the right thing and doing something you can get reprimanded for. Use good judgement. 
    - Forgotten page number: A big part of your job is making your boss’s job easier and making your boss and your team look good.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://spin.atomicobject.com/2014/09/03/visualizing-garbage-collection-algorithms/"&gt;&lt;strong&gt;Visualizing Garbage Collection Algorithms&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By Ken Fox&lt;/li&gt;
&lt;li&gt;Follow up from the excellent deep dive article in GC from Brian&lt;/li&gt;
&lt;li&gt;Most developers take automatic garbage collection for granted.&lt;/li&gt;
&lt;li&gt;It’s very difficult to see how GCs actually work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GCs visualized&lt;/strong&gt; (click on each image):
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cleanup At The End: aka No GC&lt;/strong&gt; (e.g. Apache web server creates a small pool of memory per request and throws the entire pool away when the request completes)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reference Counting Collector&lt;/strong&gt; (e.g. Python’s first pass GC, Microsoft COM, C++ Smart Pointers. Memory fragmentation is interesting)
&lt;ul&gt;
&lt;li&gt;The red flashes indicate reference counting activity. A very useful property of reference counting is that garbage is detected as soon as possible — you can sometimes see a flash of red immediately followed by the area turning black.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mark-Sweep Collector&lt;/strong&gt; (e.g. is this Python’s secondary collector? Probably is my guess)
&lt;ul&gt;
&lt;li&gt;Mark-sweep eliminates some of the problems of reference count. It can easily handle cyclic structures and it has lower overhead since it doesn’t need to maintain counts.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mark-Compact Collector&lt;/strong&gt; (Oracle’s Hotspot JVM’s tenured object space uses mark-compact)
&lt;ul&gt;
&lt;li&gt;Mark-compact disposes of memory, not by just marking it free, but by moving objects down into the free space&lt;/li&gt;
&lt;li&gt;The crazy idea of moving objects means that new objects can always just be created at the end of used memory. This is called a “bump” allocator and is as cheap as stack allocation, but without the limitations of stack size.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Copying Collector, aka Generational GC&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;The foundation of most high-performance garbage collection systems&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://pymotw.com/3/pathlib/"&gt;&lt;strong&gt;pathlib — Filesystem Paths as Objects&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;from Doug Hellman’s PyMOTW-3&lt;/li&gt;
&lt;li&gt;pathlib was introduced with Python 3.4&lt;/li&gt;
&lt;li&gt;If you need to work with the file system in Python, you should be using pathlib.&lt;/li&gt;
&lt;li&gt;Doug’s article is a really good overview.&lt;/li&gt;
&lt;li&gt;Features
&lt;ul&gt;
&lt;li&gt;Building paths with overloaded / operator&lt;/li&gt;
&lt;li&gt;Parsing paths with &lt;code&gt;.parts&lt;/code&gt;, &lt;code&gt;.parents&lt;/code&gt;, &lt;code&gt;.suffix&lt;/code&gt;, &lt;code&gt;.stem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Concrete paths such as &lt;code&gt;Path.home()&lt;/code&gt;, &lt;code&gt;Path.cwd()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Getting directory contents with &lt;code&gt;.iterdir()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pattern matching with &lt;code&gt;.glob()&lt;/code&gt; and &lt;code&gt;.rglob()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reading and writing files with path objects.&lt;/li&gt;
&lt;li&gt;Working with directories and symbolic links&lt;/li&gt;
&lt;li&gt;File properties, permissions&lt;/li&gt;
&lt;li&gt;Deleting files and directories&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;see also
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/pathlib.html"&gt;https://docs.python.org/3/library/pathlib.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The official docs are pretty good too&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://luminoth.ai/"&gt;&lt;strong&gt;LUMINOTH: Open source Computer Vision toolkit&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deep Learning toolkit for Computer Vision&lt;/li&gt;
&lt;li&gt;Supports object detection and image classification, but are aiming for much more.&lt;/li&gt;
&lt;li&gt;It is built in Python, using &lt;a href="https://www.tensorflow.org/"&gt;TensorFlow&lt;/a&gt; and &lt;a href="https://github.com/deepmind/sonnet"&gt;Sonnet&lt;/a&gt; (Google’s Deep Learning framework and DeepMind’s graph library)&lt;/li&gt;
&lt;li&gt;Easily train neural networks to detect and classify objects with custom data. &lt;/li&gt;
&lt;li&gt;Use state of the art models such as Faster R-CNN (Region-based Convolutional Neural Networks)&lt;/li&gt;
&lt;li&gt;Comes with GPGPU support&lt;/li&gt;
&lt;li&gt;Simple training
&lt;ul&gt;
&lt;li&gt;Train your model by just typing lumi train. Do it locally or using Luminoth's built-in Google Cloud Platform support to train in the cloud.&lt;/li&gt;
&lt;li&gt;Once training is done, you can use our Tensorboard integration to visualize progress and intermediate results. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Are also working on providing &lt;strong&gt;pre-trained checkpoints&lt;/strong&gt; on popular datasets such as &lt;a href="http://host.robots.ox.ac.uk:8080/pascal/VOC/voc2012/index.html"&gt;Pascal VOC2012&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bonus article:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.daftcode.pl/the-cleaning-hand-of-pytest-28f434f4b684"&gt;The Cleaning Hand of Pytest - My experiences with different approaches to testing&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Wiktor Żurawik&lt;/li&gt;
&lt;li&gt;Two case studies of having to use unittest after using pytest&lt;/li&gt;
&lt;li&gt;Be sure to check out the “useful links” at the end of the article.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Our news&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pytennessee.org/"&gt;PyTennessee 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Movie: All work, all play (available on netflix, here’s the &lt;a href="https://www.youtube.com/watch?v=fjoCwM1xMuM"&gt;trailer&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#50 Bundling , shipping, and protecting Python applications</title><link>https://pythonbytes.fm/episodes/show/50/bundling-shipping-and-protecting-python-applications</link><guid>35705492-4df6-44e6-b4b4-cf2ac929b752</guid><enclosure url="https://pythonbytes.fm/episodes/download/50/bundling-shipping-and-protecting-python-applications.mp3" length="17157778" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 02 Nov 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Bundling , shipping, and protecting Python applications</itunes:title><itunes:episode>50</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:19:17</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;h1&gt;Python Bytes 50&lt;/h1&gt;

&lt;p&gt;Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to &lt;a href="https://do.co/python"&gt;&lt;strong&gt;do.co/python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://www.youtube.com/watch?v=HmT6d-ho5J8&amp;amp;list=PL85KuAjbN_gtuA4pNPftJWaui-8ARervQ&amp;amp;index=2"&gt;&lt;strong&gt;Think Like a Pythonista&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2017, by &lt;a href="https://twitter.com/standupdev"&gt;@standupdev&lt;/a&gt; Luciano Ramalho&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PL85KuAjbN_gtuA4pNPftJWaui-8ARervQ"&gt;The PyBay2017 playlist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Covered in “Think Lika a Pythonista”
&lt;ul&gt;
&lt;li&gt;Creating a container type, a Deck of Cards.&lt;/li&gt;
&lt;li&gt;Luciano shows how to utilize duck typing, builtin types, and operator overloading while creating a type without inheritance.&lt;/li&gt;
&lt;li&gt;Uses a &lt;a href="http://jupyter.org/"&gt;Jupyter notebook&lt;/a&gt; to work with the code.&lt;/li&gt;
&lt;li&gt;Describes and shows monkeypatching to implement shuffle.&lt;/li&gt;
&lt;li&gt;Watch until the end, he takes feedback from the audience to optimize some code.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.reddit.com/r/Python/comments/71uwob/serpentai_game_agent_framework_turn_any_video/"&gt;&lt;strong&gt;Serpent.AI - Game Agent Framework&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Turn ANY video game in a sandbox environment for AI &amp;amp; Bot programming with Python.&lt;/li&gt;
&lt;li&gt;goal with Serpent.AI is to lower the barriers to entry when it comes to using games as sandboxes for code experiments. &lt;/li&gt;
&lt;li&gt;It unlocks your entire existing game library (Steam, DRM-Free etc.) to be used as potential game agent environments and it does so natively&lt;/li&gt;
&lt;li&gt;It also doesn't try to dictate how you solve your problems. Your game agent is your canvas!&lt;/li&gt;
&lt;li&gt;Even a twitch channel with live PyCharm + Jupyter + Game. Here’s a cool example: &lt;a href="https://go.twitch.tv/videos/173580782"&gt;https://go.twitch.tv/videos/173580782&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Provides some useful conventions but is absolutely NOT opinionated about what you put in your agents: 
&lt;ul&gt;
&lt;li&gt;Want to use the latest, cutting-edge deep reinforcement learning algorithm? ALLOWED. &lt;/li&gt;
&lt;li&gt;Want to use computer vision techniques, image processing and trigonometry? ALLOWED. &lt;/li&gt;
&lt;li&gt;Want to randomly press the Left or Right buttons? &lt;em&gt;sigh&lt;/em&gt; ALLOWED. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="http://www.mkdocs.org/"&gt;&lt;strong&gt;MkDocs&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I’ve been creating pytest plugins using the &lt;a href="https://github.com/pytest-dev/cookiecutter-pytest-plugin"&gt;pytest-plugin cookiecutter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;One option is to start the documentation using mkdocs, so I thought I’d try it out.&lt;/li&gt;
&lt;li&gt;For the most part, you have a yaml file to configure things, and a directory with markdown files in it. Then you call &lt;code&gt;mkdocs build&lt;/code&gt; and blammo, your documentation is built. I like markdown, so I’m going to try working with mkdocs more.&lt;/li&gt;
&lt;li&gt;Also want to try:
&lt;ul&gt;
&lt;li&gt;Generating documentation from source code using &lt;a href="https://twitter.com/tryexceptpass"&gt;Christian Medina&lt;/a&gt;’s &lt;a href="https://medium.com/python-pandemonium/python-introspection-with-the-inspect-module-2c85d5aa5a48"&gt;How to write your own Python documentation generator&lt;/a&gt; article and the code in a snippet, &lt;a href="https://gist.github.com/dvirsky/30ffbd3c7d8f37d4831b30671b681c24#file-gendocs-py"&gt;gendocs.py&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I know about &lt;a href="http://www.sphinx-doc.org/en/stable/"&gt;Sphinx&lt;/a&gt;, but I’m not a fan of reStructured text.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt;  &lt;a href="https://github.com/pyinstaller/pyinstaller/releases/tag/v3.3"&gt;&lt;strong&gt;PyInstaller 3.3 released&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PyInstaller is a program that freezes (packages) Python programs into stand-alone executables, under Windows, Linux, Mac OS X, FreeBSD, Solaris and AIX.&lt;/li&gt;
&lt;li&gt;The main goal of PyInstaller is to be &lt;strong&gt;compatible with 3rd-party packages out-of-the-box&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Libraries like PyQt, Django or matplotlib are fully supported&lt;/strong&gt;, without having to handle plugins or external data files manually. &lt;/li&gt;
&lt;li&gt;The #1 thing that stands out to me in this release: Python 3.6 support!&lt;/li&gt;
&lt;li&gt;PyInstaller can produce single immutable self contained dependency free portable exe files using the --one-file option.&lt;/li&gt;
&lt;li&gt;Consider the --noconsole option too&lt;/li&gt;
&lt;li&gt;cx_freeze vs pyinstaller? I can tell you that pyinstaller does a much better job of actually detecting and including dependencies. I recently tried both for freezing a multi-threaded, scipy based application and cx_freeze was a real hassle to get functional. Pyinstaller more or less just magically worked in my case whereas cx_freeze took hours of debugging.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://github.com/pantsbuild/pex"&gt;&lt;strong&gt;PEX:&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://github.com/pantsbuild/pex"&gt;&lt;strong&gt;A library and tool for generating .pex (Python EXecutable) files&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developed by twitter. Originally part of the twitter.commons package.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pex&lt;/code&gt; is a tool to create PEX files, which are “files are self-contained executable Python virtual environments.”, from &lt;a href="https://pex.readthedocs.io/en/stable/whatispex.html#whatispex"&gt;pex.readthedocs.io&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Python can import from zip files. You can add instructions at the beginning of a zip file to make it look like a python script. &lt;code&gt;pex&lt;/code&gt; allows you to do that.&lt;/li&gt;
&lt;li&gt;Watch &lt;a href="https://www.youtube.com/watch?v=NmpnGhRwsu0"&gt;WTF is PEX?&lt;/a&gt;, a 16 min video describing how it works. Brian Wickman&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://bucharjan.cz/blog/using-cython-to-protect-a-python-codebase.html"&gt;&lt;strong&gt;Using Cython to protect a Python codebase&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Python project that required the whole codebase to be protected&lt;/li&gt;
&lt;li&gt;They used Cython&lt;/li&gt;
&lt;li&gt;By following this guide, you should be able to cythonize a Python codebase with non-trivial package/module structure, thus making it difficult for evil hackers to reverse engineer it and steal your programming know-how.&lt;/li&gt;
&lt;li&gt;Although protecting Python sources from reverse engineering seems like a futile task at first, cythonizing all the code leads to a reasonable amount of security&lt;/li&gt;
&lt;li&gt;This was a Flask project!&lt;/li&gt;
&lt;li&gt;The current standard for Python archives is the wheel format (.whl), which aims to replace the .egg format. So, let's try to create a wheel with &lt;code&gt;python setup.py bdist_wheel&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;Apparently, the archive contains not only compiled code, but also the sources.&lt;/li&gt;
&lt;li&gt;There is a way to fix this, however it is counter-intuitive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Our news&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Python for Windows developers: A survey → &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLSdygLS0G91t5E8LCGtZvdfzeqdePr2jFqoiR30HZjmGbaJjNQ/viewform"&gt;https://docs.google.com/forms/d/e/1FAIpQLSdygLS0G91t5E8LCGtZvdfzeqdePr2jFqoiR30HZjmGbaJjNQ/viewform&lt;/a&gt;-&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#51 How to make your code 80 times faster</title><link>https://pythonbytes.fm/episodes/show/51/how-to-make-your-code-80-times-faster</link><guid>12d927f4-8d7f-40b3-b108-d1b6cbea2cf4</guid><enclosure url="https://pythonbytes.fm/episodes/download/51/how-to-make-your-code-80-times-faster.mp3" length="19153476" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 09 Nov 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>How to make your code 80 times faster</itunes:title><itunes:episode>51</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:21:33</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;This episode is brought to you by Datadog: &lt;a href="https://pythonbytes.fm/datadog"&gt;pythonbytes.fm/datadog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://blog.patricktriest.com/police-data-python/"&gt;&lt;strong&gt;Exploring United States Policing Data with Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to take a publicly available data set and, using jupyter, ipython, matplotlib, numpy, pandas, and scipy:
&lt;ul&gt;
&lt;li&gt;ask questions of the data and get answers&lt;/li&gt;
&lt;li&gt;visualize results with plots&lt;/li&gt;
&lt;li&gt;fill in and/or remove blank data&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The example is interesting, and easy to follow. It doesn’t explain all the code, just shows it. You can go look that stuff up later.&lt;/li&gt;
&lt;li&gt;A few notes as I worked through half of the example:
&lt;ul&gt;
&lt;li&gt;pip install scipy&lt;/li&gt;
&lt;li&gt;step 1.7 plt.show()&lt;/li&gt;
&lt;li&gt;end of 2.3, don't need &lt;code&gt;.to_html().replace('\n','')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use shift-enter to run a cell&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I’m concerned with the validity of the results due to the dropping of rows with missing data. Some columns aren’t used for some questions, so for those purposes, the data shouldn’t be abandoned.&lt;/li&gt;
&lt;li&gt;Still a very nice tutorial.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://morepypy.blogspot.it/2017/10/how-to-make-your-code-80-times-faster.html"&gt;&lt;strong&gt;How to make your code 80 times faster&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Often hear people who are happy because PyPy makes their code 2 times faster or so. Here is a short personal story which shows PyPy can go well beyond that.&lt;/li&gt;
&lt;li&gt;Evolutionary algorithms: the ambitious plan was to automatically evolve a logic which could control a (simulated) quadcopter&lt;/li&gt;
&lt;li&gt;To drive the quadcopter, a Creature has a run_step method which runs at each delta_t
&lt;ul&gt;
&lt;li&gt;inputs is a numpy array containing the desired setpoint and the current position on the Z axis;&lt;/li&gt;
&lt;li&gt;outputs is a numpy array containing the thrust to give to the motors. To start easy, all the 4 motors are constrained to have the same thrust&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;run_step is called at 100Hz&lt;/li&gt;
&lt;li&gt;simply tried to run this code on CPython: ~6.15 seconds/generation&lt;/li&gt;
&lt;li&gt;Then tried with PyPy 5.9: Ouch! We are ~5.5x slower than CPython. This was kind of expected: numpy is based on cpyext, which is infamously slow&lt;/li&gt;
&lt;li&gt;first obvious step is to use numpypy instead of numpy: PyPy+numpy, and more than 2x faster than the original CPython&lt;/li&gt;
&lt;li&gt;So, let's try to do better. As usual, the first thing to do is to profile and see where we spend most of the time. &lt;/li&gt;
&lt;li&gt;we know that the matrix is small, and always of the same shape. So, let's unroll the loop manually&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tada&lt;/strong&gt;: This is around 80 (eighty) times faster than the original CPython+numpy implementation, and around 35-40x faster than the naive PyPy+numpypy one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://www.wired.com/story/giving-open-source-projects-life-after-a-developers-death/amp"&gt;&lt;strong&gt;Giving Open-Source Projects Life After a Developer's Death&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="http://www.movingelectrons.net/blog/2017/10/18/solar-powered-internet-connected-lawn-sprinkler.html"&gt;&lt;strong&gt;Solar Powered Internet Connected Lawn Sprinkler Project&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via listener suggestion / written: Lenin&lt;/li&gt;
&lt;li&gt;a little project with Adafruit’s Feather HUZZAH board and MicroPython&lt;/li&gt;
&lt;li&gt;Combines with Home Assistant&lt;/li&gt;
&lt;li&gt;Mostly based on AdaFruit, they have a detailed list of the hardware used.&lt;/li&gt;
&lt;li&gt;based on the &lt;a href="http://mqtt.org/"&gt;&lt;strong&gt;MQTT protocol&lt;/strong&gt;&lt;/a&gt;, which is a Client-Server &lt;em&gt;Internet of Things&lt;/em&gt; connectivity protocol, comes with micropython&lt;/li&gt;
&lt;li&gt;Nice references back to AdaFruit tutorials&lt;/li&gt;
&lt;li&gt;Talk Python #108: MicroPython and Open Source Hardware at Adafruit: &lt;strong&gt;&lt;a href="https://talkpython.fm/108"&gt;https://talkpython.fm/108&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;strong&gt;Some New Python Books&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://amzn.to/2zEkfO7"&gt;Python Tricks: A Buffet of Awesome Python Features&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;by Dan Bader&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://amzn.to/2yfE61T"&gt;Illustrated Guide to Python 3&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;by Matt Harrison&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;While we’re at it, there are some older Python books that could use some review love. If you’ve read these, please leave a review. It helps more than you may realize.
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://amzn.to/2zrQZcv"&gt;Python Testing with pytest&lt;/a&gt;, by Brian Okken&lt;/li&gt;
&lt;li&gt;&lt;a href="http://amzn.to/2zqJcf5"&gt;Test-Driven Development with Python&lt;/a&gt;, by Harry Percival&lt;/li&gt;
&lt;li&gt;&lt;a href="http://amzn.to/2zpBWxP"&gt;Two Scoops of Django&lt;/a&gt;, Daniel &amp;amp; Audrey Roy Greenfield&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.anaconda.com/blog/developer-blog/announcing-the-release-of-anaconda-distribution-5-0/"&gt;&lt;strong&gt;Anaconda Distribution 5.0 released&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Over 100 packages have been updated or added to the distribution. JupyterLab alpha preview 0.27.0 is now included, and MKL has been updated to 2018.0.0.&lt;/li&gt;
&lt;li&gt;The new version features all new compilers on macOS and Linux, providing substantial security and performance improvements.&lt;/li&gt;
&lt;li&gt;Where possible, all build recipes are now using conda-forge as a base, via https://github.com/AnacondaRecipes.&lt;/li&gt;
&lt;li&gt;A new channel, pkgs/main, has been added to defaults. The new channel is given top priority within defaults and holds packages built with the new compiler stack.&lt;/li&gt;
&lt;li&gt;The new version of Anaconda Distribution now features more flexible dependency pinning.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#52 Call your APIs with uplink and test them in the tavern</title><link>https://pythonbytes.fm/episodes/show/52/call-your-apis-with-uplink-and-test-them-in-the-tavern</link><guid>71e6029d-feb3-4f3f-bda2-e34dff6cc482</guid><enclosure url="https://pythonbytes.fm/episodes/download/52/call-your-apis-with-uplink-and-test-them-in-the-tavern.mp3" length="19187703" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 16 Nov 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Call your APIs with uplink and test them in the tavern</itunes:title><itunes:episode>52</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:21:40</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to &lt;a href="https://do.co/python"&gt;&lt;strong&gt;do.co/python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://taverntesting.github.io/"&gt;&lt;strong&gt;Restful API testing&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://taverntesting.github.io/"&gt;&lt;strong&gt;with Tavern&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://uplink.readthedocs.io/en/latest/"&gt;&lt;strong&gt;Uplink&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RESTful client API via decorators&lt;/li&gt;
&lt;li&gt;Create a class to represent the API&lt;/li&gt;
&lt;li&gt;Add methods with arguments, map to API calls.&lt;/li&gt;
&lt;li&gt;e.g.  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="nd"&gt;@get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/users/&lt;/span&gt;&lt;span class="si"&gt;{username}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
       &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Get a single user.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Uplink includes support for concurrent requests with asyncio (for Python 3.4+) &lt;/li&gt;
&lt;li&gt;Twisted (for all supported Python versions)&lt;/li&gt;
&lt;li&gt;Not production ready, but very exciting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://engineering.ticketea.com/using-json-schema-for-rest-api-endpoint-tests/"&gt;&lt;strong&gt;Using json-schema for REST API endpoint tests&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sponsor DIGITAL OCEAN SPACES&lt;/strong&gt;
Get started today with a free 2 month trial of Spaces by going to &lt;a href="https://do.co/python"&gt;&lt;strong&gt;do.co/python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://twitter.com/watty62/status/923945051616698369"&gt;&lt;strong&gt;Live coding to music!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Ian Watt&lt;/li&gt;
&lt;li&gt;Talk at PyCon UK by Ryan Kirkbride called “Programming Music for Performance: Live coding with FoxDot”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="http://www.weeklypython.chat/"&gt;&lt;strong&gt;Weekly Python Chat&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt;  &lt;a href="https://py.checkio.org/blog/10-common-beginner-mistakes-in-python/"&gt;&lt;strong&gt;10 common beginner mistakes in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Via checkIO:  https://py.checkio.org/&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Incorrect indentation, tabs and spaces&lt;/li&gt;
&lt;li&gt;Using a Mutable Value as a Default Value&lt;/li&gt;
&lt;li&gt;Write a lot of comments and docstrings&lt;/li&gt;
&lt;li&gt;Scoping&lt;/li&gt;
&lt;li&gt;Edge cases first (let’s go easy on the indents)&lt;/li&gt;
&lt;li&gt;Copying&lt;/li&gt;
&lt;li&gt;Creating count-by-one errors on loops (range is half closed)&lt;/li&gt;
&lt;li&gt;Wrong capitalization&lt;/li&gt;
&lt;li&gt;Using class variables incorrectly&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Our news&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Michael: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flash briefing?&lt;/li&gt;
&lt;li&gt;Firefox Quantum!&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#53 Getting started with devpi and Git Virtual FS</title><link>https://pythonbytes.fm/episodes/show/53/getting-started-with-devpi-and-git-virtual-fs</link><guid>7aac6745-10d0-4fc1-8ae0-d7768c556dda</guid><enclosure url="https://pythonbytes.fm/episodes/download/53/getting-started-with-devpi-and-git-virtual-fs.mp3" length="16269844" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 22 Nov 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Getting started with devpi and Git Virtual FS</itunes:title><itunes:episode>53</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:22:10</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Rollbar! Get the bootstrap plan at &lt;a href="https://pythonbytes.fm/rollbar"&gt;pythonbytes.fm/rollbar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="http://jakevdp.github.io/blog/2017/11/09/exploring-line-lengths-in-python-packages/"&gt;&lt;strong&gt;Exploring Line Lengths in Python Packages&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jake VanderPlas &lt;a href="https://twitter.com/jakevdp"&gt;&lt;strong&gt;@&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://twitter.com/jakevdp"&gt;jakevdp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PEP8 recommends 79 character line lengths.&lt;/li&gt;
&lt;li&gt;This article looks at line lenghts used in NumPy, SciPy, Pandas, ScikitLearn, Matplotlib, and AstroPy&lt;/li&gt;
&lt;li&gt;In the form of a Jupyter notebook so you can follow along with all the code and graphs.&lt;/li&gt;
&lt;li&gt;Fitting the graphs to distributions.&lt;/li&gt;
&lt;li&gt;Closing questions from Jake:
&lt;ul&gt;
&lt;li&gt;Where do other Python packages fit on the mode/spread graph?&lt;/li&gt;
&lt;li&gt;Has the coding style in these packages, reflected in line length, evolved over time?&lt;/li&gt;
&lt;li&gt;How do individual contributors behave? Do they tend to have similar habits across packages?&lt;/li&gt;
&lt;li&gt;What do these distributions look like for code written in other languages?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://github.com/numpy/numpy/blob/master/doc/neps/dropping-python2.7-proposal.rst"&gt;&lt;strong&gt;NumPy: Plan for dropping Python 2.7 support&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Python core team plans to stop supporting Python 2 in 2020. &lt;/li&gt;
&lt;li&gt;We found that supporting Python 2 is an increasing burden on our limited resources; thus, we plan to eventually drop Python 2.&lt;/li&gt;
&lt;li&gt;Our current plan is as follows.
&lt;ul&gt;
&lt;li&gt;Until &lt;strong&gt;December 31, 2018&lt;/strong&gt;, all NumPy releases will fully support both Python2 and Python3.&lt;/li&gt;
&lt;li&gt;Starting on &lt;strong&gt;January 1, 2019&lt;/strong&gt;, any new feature releases will support only Python3.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://towardsdatascience.com/how-to-learn-pandas-108905ab4955"&gt;&lt;strong&gt;How to Learn Pandas&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ted Petrou &lt;a href="https://twitter.com/TedPetrou"&gt;@TedPetrou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Alternating between reading documentation and using it for small projects.&lt;/li&gt;
&lt;li&gt;Getting the most out of documentation&lt;/li&gt;
&lt;li&gt;Using Jupyter Notebook&lt;/li&gt;
&lt;li&gt;Using Kaggle kernels, which are datasets in the form of Jupyter notebooks.&lt;/li&gt;
&lt;li&gt;Creating your own kernels&lt;/li&gt;
&lt;li&gt;Try answering questions on SO to test your knowledge&lt;/li&gt;
&lt;li&gt;Set up some projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://arstechnica.com/gadgets/2017/11/microsoft-and-github-team-up-to-take-git-virtual-file-system-to-macos-linux/"&gt;Microsoft and GitHub team up to take Git virtual file system to macOS, Linux&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Watch the &lt;a href="https://channel9.msdn.com/Events/Connect/2017/T179"&gt;10 min Microsoft presentation&lt;/a&gt; to understand this quickly.&lt;/li&gt;
&lt;li&gt;Git doesn’t work that well for larger projects
&lt;ul&gt;
&lt;li&gt;Yes, it was built for Linux (640 MB) &lt;/li&gt;
&lt;li&gt;But there are larger projects
&lt;ul&gt;
&lt;li&gt;Visual Studio and related tools: 3,000 MB (5x)&lt;/li&gt;
&lt;li&gt;Windows: 270 GB (421x), 4,000 people committing per day.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;solution was to develop Git Virtual File System (GVFS)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Before virtual:
&lt;ul&gt;
&lt;li&gt;12 hours to clone&lt;/li&gt;
&lt;li&gt;3 hours to checkout&lt;/li&gt;
&lt;li&gt;8 min for &lt;code&gt;git status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;30 min to commit&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;After virtual:
&lt;ul&gt;
&lt;li&gt;90 sec clone&lt;/li&gt;
&lt;li&gt;30 sec checkout&lt;/li&gt;
&lt;li&gt;3 sec &lt;code&gt;git status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;8 sec commit&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Microsoft says that, so far, about half of its modifications have been accepted upstream, with upstream Git developers broadly approving of the approach the company has taken to improve the software's scaling.&lt;/li&gt;
&lt;li&gt;GitHub is interested in this for the paid, enterprise side&lt;/li&gt;
&lt;li&gt;Currently Windows only but Microsoft and GitHub are also working to bring similar capabilities to other platforms, with macOS coming first, and later Linux.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://stefan.sofa-rockers.org/2017/11/09/getting-started-with-devpi/"&gt;&lt;strong&gt;Getting started with devpi&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stefan Scherfke &lt;a href="https://twitter.com/sscherfke"&gt;&lt;strong&gt;@&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://twitter.com/sscherfke"&gt;sscherfke&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A walkthrough of setting up and using &lt;a href="https://docs.devpi.net/"&gt;devpi&lt;/a&gt; , a local mirror/cache/local store PyPI server.&lt;/li&gt;
&lt;li&gt;Setting up the server&lt;/li&gt;
&lt;li&gt;User management&lt;/li&gt;
&lt;li&gt;Working with package indexes&lt;/li&gt;
&lt;li&gt;Uploading packages&lt;/li&gt;
&lt;li&gt;Using it to point your pip at&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://github.com/LisaDziuba/Marketing-for-Engineers"&gt;Marketing-for-Engineers&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A curated list of marketing tools and resources to grow your product&lt;/li&gt;
&lt;li&gt;such as:
&lt;ul&gt;
&lt;li&gt;finding beta testers&lt;/li&gt;
&lt;li&gt;growing first user base&lt;/li&gt;
&lt;li&gt;advertising project without a budget&lt;/li&gt;
&lt;li&gt;scaling marketing activities for building constant revenue streams.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;What is the hardest part of creating a successful product / web app? (hint: it’s not programming or having the idea)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Extras&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Black Friday Sale for &lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;&lt;strong&gt;Python Testing with pytest&lt;/strong&gt;&lt;/a&gt; &amp;amp; all other pragmatic eBooks.
&lt;ul&gt;
&lt;li&gt;From 11/22 through Friday 12/1, all ebooks at &lt;a href="http://pragprog.com/"&gt;pragprog.com&lt;/a&gt; are 40% off.&lt;/li&gt;
&lt;li&gt;That makes the pytest book about $14&lt;/li&gt;
&lt;li&gt;Use coupon code &lt;strong&gt;turkeysale2017&lt;/strong&gt; to get the discount.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pycon.co/"&gt;&lt;strong&gt;PyCon Columbia&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://twitter.com/pyconcolombia"&gt;&lt;strong&gt;@&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://twitter.com/pyconcolombia"&gt;pyconcolombia&lt;/a&gt;, is February 9, 10 and 11 - 2018 and tickets are available now. (Recommended by Oscar Arbelaez)&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#54 PyAnnotate your way to the future</title><link>https://pythonbytes.fm/episodes/show/54/pyannotate-your-way-to-the-future</link><guid>590d718c-7af8-4759-8973-cb5a1e3ad58b</guid><enclosure url="https://pythonbytes.fm/episodes/download/54/pyannotate-your-way-to-the-future.mp3" length="15649796" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 29 Nov 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>PyAnnotate your way to the future</itunes:title><itunes:episode>54</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:18:51</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean. They just launched Spaces, get started today with a free 2 month trial of Spaces by going to &lt;a href="http://do.co/python"&gt;&lt;strong&gt;do.co/python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="http://pyfound.blogspot.com/2017/11/the-psf-awarded-moss-grant-pypi.html?m=1"&gt;&lt;strong&gt;The PSF awarded $170,000 grant from Mozilla Open Source Program to improve sustainability of PyPI&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Situation
&lt;ul&gt;
&lt;li&gt;The Python Packaging Index (PyPI) is the principal repository of software packages for the Python programming language.&lt;/li&gt;
&lt;li&gt;There are over 100 million Python packages are downloaded from PyPI every week.&lt;/li&gt;
&lt;li&gt;The Python community depends on PyPI for the ongoing functioning of the entire Python ecosystem.&lt;/li&gt;
&lt;li&gt;There are no paid staff at the PSF who work on PyPI, and there are only a handful of people who contribute regularly.&lt;/li&gt;
&lt;li&gt;This leads to a situation where we have to depend on volunteers to be on-call for outages and respond to critical security vulnerabilities in core Python Infrastructure.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Next steps
&lt;ul&gt;
&lt;li&gt;The first milestone for Warehouse is redirecting portions of the production pypi.python.org to Warehouse including traffic for the simple index and package downloads. At that milestone Warehouse will be the main entryway to Python packages for all but a small fraction of the interactions PyPI sees.&lt;/li&gt;
&lt;li&gt;The bulk of the work will be bringing Warehouse to feature parity with the administrative capabilities users need from the Package Index. We'll keep you posted as we figure out when you can expect that to be true.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://twitter.com/gvanrossum/status/930906528042827776"&gt;&lt;strong&gt;Dropbox releases PyAnnotate&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mypy is an experimental optional static type checker for Python that aims to combine the benefits of dynamic (or "duck") typing and static typing&lt;/li&gt;
&lt;li&gt;You can develop programs with dynamic typing and add static typing after your code has matured, or migrate existing Python code to static typing.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mypy-lang.org/"&gt;mypy&lt;/a&gt; is great, but it only works after you have added type annotations to your codebase.&lt;/li&gt;
&lt;li&gt;To easy the pain of adding type annotations to existing code, we’ve developed a tool, &lt;a href="https://github.com/dropbox/pyannotate"&gt;PyAnnotate&lt;/a&gt;, that observes what types are actually used at runtime, and inserts annotations into your source code based on those observations. We’ve now open-sourced the tool.&lt;/li&gt;
&lt;li&gt;run your code with a special &lt;a href="https://docs.python.org/3.6/library/sys.html#sys.setprofile"&gt;profiling hook&lt;/a&gt; enabled. &lt;/li&gt;
&lt;li&gt;This observes all call arguments and return values and records the observed types in memory. At the end of a run the data is dumped to a file in JSON format. &lt;/li&gt;
&lt;li&gt;A separate command-line utility can then read this JSON file and use it to add inline annotations to your source code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://blog.kensho.com/pytest-annotate-is-now-open-source-5dd6f6d51d0f"&gt;&lt;strong&gt;pytest-annotate is now open-source!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use pyannotate without a driver file:&lt;/li&gt;
- 
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    pip install pytest-annotate

    # to run code while collecting types
    pytest --annotate-output=./annotate.json

    # to see what will change with type hint comments
    pyannotate --type-info ./annotate.json [HTML_REMOVED]

    # to modify code
    pyannotate -w --type-info ./annotate.json [HTML_REMOVED]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://gist.github.com/ewenchou/be496b2b73be801fd85267ef5471458c"&gt;&lt;strong&gt;Run Python script as systemd service&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Great for making your own “services” on Linux&lt;/li&gt;
&lt;li&gt;Incredibly easy, just follow the gist linked above&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;strong&gt;&lt;a href="https://docs.pytest.org/en/latest/changelog.html"&gt;pytest 3.3.0 released&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/latest/changelog.html"&gt;changelog&lt;/a&gt; includes 12 new features&lt;/li&gt;
&lt;li&gt;Most excited about:
&lt;ul&gt;
&lt;li&gt;Now pytest displays the total progress percentage while running tests. &lt;/li&gt;
&lt;li&gt;Now captures and displays output from the standard logging module.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://blog.bordum.dk/fast-empty-sequences-in-python.html"&gt;&lt;strong&gt;Why d = {} is faster than d = dict()&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It turns out that using &lt;code&gt;str()&lt;/code&gt;, &lt;code&gt;list()&lt;/code&gt;, &lt;code&gt;dict()&lt;/code&gt; and &lt;code&gt;tuple()&lt;/code&gt; for creating empty sequences isn't as fast as their shorthand counterparts (&lt;code&gt;''&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;()&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;We can inspect what happens with the dis module…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Extras&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;F1 eSports now more exciting than real F1: &lt;a href="https://arstechnica.com/cars/2017/11/formula-1-esports-now-more-exciting-than-the-real-thing-and-thats-a-problem/"&gt;https://arstechnica.com/cars/2017/11/formula-1-esports-now-more-exciting-than-the-real-thing-and-thats-a-problem/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#55 Flask, Flask, Flask, 3x Flask</title><link>https://pythonbytes.fm/episodes/show/55/flask-flask-flask-3x-flask</link><guid>bf0049c2-10fa-4cc2-856a-734d5ae7935e</guid><enclosure url="https://pythonbytes.fm/episodes/download/55/flask-flask-flask-3x-flask.mp3" length="17684799" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 07 Dec 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Flask, Flask, Flask, 3x Flask</itunes:title><itunes:episode>55</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:20:18</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="http://digitalocean.com"&gt;http://digitalocean.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1&lt;/strong&gt; &lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;&lt;strong&gt;The Flask Mega-Tutorial&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;, reborn&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This very popular tutorial, written in 2012, has been rewritten.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/miguelgrinberg"&gt;Miguel Grinberg&lt;/a&gt; has rewritten it with the help of a kickstarter campaign.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;Part 1 of the tutorial&lt;/a&gt; is up, and he’s releasing 1 part per week.&lt;/li&gt;
&lt;li&gt;Want it faster, you can get it all in an &lt;a href="https://learn.miguelgrinberg.com/"&gt;eBook&lt;/a&gt; right now.&lt;/li&gt;
&lt;li&gt;A video version is coming in January.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.djangoproject.com/weblog/2017/dec/02/django-20-released/"&gt;&lt;strong&gt;Django 2.0 Released&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This release starts Django’s use of a &lt;a href="https://docs.djangoproject.com/en/stable/internals/release-process/#internal-release-cadence"&gt;loose form of semantic versioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Features
&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://docs.djangoproject.com/en/stable/releases/2.0/#simplified-url-routing-syntax"&gt;simplified URL routing syntax&lt;/a&gt; that allows writing routes without regular expressions.&lt;/li&gt;
&lt;li&gt;A responsive, &lt;a href="https://docs.djangoproject.com/en/stable/releases/2.0/#mobile-friendly-contrib-admin"&gt;mobile-friendly contrib.admin&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/stable/releases/2.0/#window-expressions"&gt;Window expressions&lt;/a&gt; to allow adding an OVER clause to querysets.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python 3 only&lt;/li&gt;
&lt;li&gt;django.contrib.auth
&lt;ul&gt;
&lt;li&gt;The default iteration count for the PBKDF2 password hasher is increased from 36,000 to 100,000.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Lots more changes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://lintlyci.github.io/Flake8Rules/"&gt;&lt;strong&gt;The Big Ol' List of Rules&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://flake8.pycqa.org/en/latest/index.html"&gt;Flake8&lt;/a&gt; is a popular code linter that combines pyflakes, pycodestyle, and mccabe.
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/pycodestyle"&gt;pycodestyle&lt;/a&gt; is the new pep8 to enforce &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP8&lt;/a&gt; suggestions. These are mostly style guide items, and not actual bugs.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/pyflakes"&gt;pyflakes&lt;/a&gt; is more like a traditional linter in that it catches things that are probably oversight or bugs.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/mccabe"&gt;mccabe&lt;/a&gt; is harder to explain, but it generally tells you if your code might be too complicated, using &lt;a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;Cyclomatic Complexity&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Flake8 produces error codes if your code has problems
&lt;ul&gt;
&lt;li&gt;Ennn and Wnnn for pycodestyle errors and warnings&lt;/li&gt;
&lt;li&gt;Fnnn for pyflakes errors&lt;/li&gt;
&lt;li&gt;Cnnn for mccabe errors&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://lintlyci.github.io/Flake8Rules/"&gt;The Big Ol' List of Rules&lt;/a&gt; is a very nice breakdown of every error, what it means, and has links to other documents where they are defined.&lt;/li&gt;
&lt;li&gt;Very nice work from &lt;a href="https://twitter.com/gmcconnaughey"&gt;Grant McConnaughey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://github.com/tonybaloney/requests-staticmock"&gt;&lt;strong&gt;requests-staticmock&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via &lt;a href="https://twitter.com/anthonypjshaw"&gt;Anthony Shaw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Session object allows you to persist certain parameters across requests. It also persists cookies across all requests made from the Session instance, and will use &lt;code&gt;urllib3&lt;/code&gt;'s &lt;a href="http://urllib3.readthedocs.io/en/latest/reference/index.html#module-urllib3.connectionpool"&gt;connection pooling&lt;/a&gt;. So if you're making several requests to the same host, the underlying TCP connection will be reused, which can result in a significant performance increase&lt;/li&gt;
&lt;li&gt;A Session object has all the methods of the main Requests API.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tonybaloney/requests-staticmock"&gt;&lt;strong&gt;requests-staticmock&lt;/strong&gt;&lt;/a&gt; is a static HTTP mock interface for testing classes that leverage Python requests with &lt;strong&gt;no&lt;/strong&gt; monkey patching!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://www.python.org/dev/peps/pep-0557/"&gt;&lt;strong&gt;PEP 557 -- Data Classes&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;have been approved&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can play with them now if you want, with the &lt;a href="https://www.python.org/downloads/release/python-370a3/"&gt;3.7.0a3 developer build&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;However, &lt;a href="https://www.python.org/dev/peps/pep-0537/"&gt;3.7 isn’t scheduled for release until June 2018&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Very short Example lifted directly from PEP 557 doc.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@dataclass
class C:
    a: int       # 'a' has no default value
    b: int = 0   # assign a default value for 'b'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, both a and b will be included in the added __init__ method, which will be defined as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def __init__(self, a: int, b: int = 0):
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Why not just use &lt;a href="http://www.attrs.org/en/stable/"&gt;attrs&lt;/a&gt;? (Also lifted from the pep doc)
&lt;ul&gt;
&lt;li&gt;attrs moves faster than could be accommodated if it were moved in to the standard library.&lt;/li&gt;
&lt;li&gt;attrs supports additional features not being proposed here: validators, converters, metadata, etc. Data Classes makes a tradeoff to achieve simplicity by not implementing these features.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://hackernoon.com/3x-faster-than-flask-8e89bfbe8e4f"&gt;&lt;strong&gt;Quart: 3x faster Flask&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python has evolved since &lt;a href="https://github.com/pallets/flask"&gt;Flask&lt;/a&gt; was first released around 8 years ago, particularly with the introduction of asyncio. &lt;/li&gt;
&lt;li&gt;Asyncio has allowed for the development of libraries such as &lt;a href="https://github.com/MagicStack/uvloop"&gt;uvloop&lt;/a&gt; and &lt;a href="https://github.com/magicstack/asyncpg"&gt;asyncpg&lt;/a&gt; that are reported (&lt;a href="https://magic.io/blog/uvloop-blazing-fast-python-networking/"&gt;here&lt;/a&gt;, and &lt;a href="https://magic.io/blog/asyncpg-1m-rows-from-postgres-to-python/"&gt;here&lt;/a&gt;) to improve performance far beyond what was previously possible. &lt;/li&gt;
&lt;li&gt;Quart provides the easiest transition for Flask apps to use asyncio as it shares the Flask-API.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; Upgrading &lt;a href="https://github.com/pgjones/faster_than_flask_article/commit/253538aa8cd65a3ed48563c2ea4594d998286293"&gt;this&lt;/a&gt; Flask-pyscopg2 app to a Quart-asyncpg app gives a performance speedup of 3x without requiring a major rewrite or adjustment of the code&lt;/li&gt;
&lt;li&gt;View methods become async / await methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Our news&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Michael:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pythonic staff of enlightnement
&lt;ul&gt;
&lt;li&gt;I have already encountered the Pythonic Staff of Enlightenment, see &lt;a href="https://twitter.com/anthonypjshaw/status/866430414537216000"&gt;the photo that Anthony tweeted of you guys brandishing it at PyCon US&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Now so can you: &lt;a href="https://www.enstaved.com/pythonic-staff-of-enlightenment-now-on-sale/"&gt;https://www.enstaved.com/pythonic-staff-of-enlightenment-now-on-sale/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#56 The pendulum of time swings beautifully in PyPI</title><link>https://pythonbytes.fm/episodes/show/56/the-pendulum-of-time-swings-beautifully-in-pypi</link><guid>4df0584b-a673-4e94-a9aa-f024a035e6b0</guid><enclosure url="https://pythonbytes.fm/episodes/download/56/the-pendulum-of-time-swings-beautifully-in-pypi.mp3" length="15228356" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 14 Dec 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>The pendulum of time swings beautifully in PyPI</itunes:title><itunes:episode>56</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:16:29</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Rollbar! &lt;a href="https://pythonbytes.fm/rollbar"&gt;pythonbytes.fm/rollbar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://pendulum.eustace.io/"&gt;&lt;strong&gt;Pendulum&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;for datetimes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sdispater/pendulum"&gt;on github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;See also
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://arrow.readthedocs.io/en/latest/"&gt;arrow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kennethreitz/maya"&gt;maya&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/datetime.html"&gt;datetime&lt;/a&gt;, and &lt;a href="https://codeburst.io/dealing-with-datetimes-like-a-pro-in-python-fb3ac0feb94b"&gt;Dealing with datetimes like a pro in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dateutil.readthedocs.io/en/stable/"&gt;dateutil&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="http://allynh.com/blog/flask-asynchronous-background-tasks-with-celery-and-redis/"&gt;&lt;strong&gt;Flask asynchronous background tasks with Celery and Redis&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easiest way to a significant scalability to your app: queuing&lt;/li&gt;
&lt;li&gt;What is Celery: Celery is an asynchronous task queue/job queue based on distributed message passing. It is focused on real-time operation, but supports scheduling as well&lt;/li&gt;
&lt;li&gt;How Celery works:
&lt;ul&gt;
&lt;li&gt;Celery client: This will be connect your Flask application to the Celery task&lt;/li&gt;
&lt;li&gt;Celery worker: A process that runs a background task&lt;/li&gt;
&lt;li&gt;Message broker: The Celery client communicates to the Celery worker through a message broker (redis in this case)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;All examples on Windows &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://realpython.com/blog/python/building-a-simple-web-app-with-bottle-sqlalchemy-twitter-api/"&gt;&lt;strong&gt;Building a Simple Web App With Bottle, SQLAlchemy, and the Twitter API&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Guest article on RealPython, by &lt;a href="https://twitter.com/bbelderbos"&gt;Bob Belderbos&lt;/a&gt; of &lt;a href="https://twitter.com/PyBytes"&gt;PyBytes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fun full project start to finish using &lt;a href="https://github.com/tweepy/tweepy"&gt;Tweepy&lt;/a&gt; to load tweets.&lt;/li&gt;
&lt;li&gt;Ends with a bottle app running on Heroku&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.reddit.com/r/vscode/comments/7burdg/python_extension_for_vscode_updated_now_brought/"&gt;&lt;strong&gt;Python extension for VSCode updated, now brought to you by Microsoft&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don Jayamanne, creator of the Python extension for Visual Studio Code, joins Microsoft&lt;/li&gt;
&lt;li&gt;Full announcement: &lt;strong&gt;&lt;a href="https://blogs.msdn.microsoft.com/pythonengineering/2017/11/09/don-jayamanne-joins-microsoft/"&gt;https://blogs.msdn.microsoft.com/pythonengineering/2017/11/09/don-jayamanne-joins-microsoft/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Had Don on Talk Python back on &lt;a href="https://talkpython.fm/episodes/show/101/adding-a-full-featured-python-environment-to-visual-studio-code"&gt;&lt;strong&gt;episode 101&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;What does Microsoft Python team publishing the extension mean?&lt;/li&gt;
&lt;li&gt;For all practical purposes the transition should be transparent to you. Additionally:
&lt;ul&gt;
&lt;li&gt;The extension will remain open source and free&lt;/li&gt;
&lt;li&gt;Development will continue to be on GitHub, under the existing license&lt;/li&gt;
&lt;li&gt;More dev resources means (generally) faster turnaround on bug fixes and new features&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Microsoft is hiring for Visual Studio Code / Python! They are hiring devs immediately to continue and expand work on our Python support for Visual Studio Code. If you are passionate about developer tools and productivity, this could be an ideal endeavor!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://www.smashingmagazine.com/2017/11/comprehensive-guide-web-design/"&gt;&lt;strong&gt;A Comprehensive Guide To Web Design&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Crash course in web design principles, not the mechanics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://github.com/tryolabs/requestium"&gt;&lt;strong&gt;Requestium&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integration layer between Requests and Selenium for automation of web actions.&lt;/li&gt;
&lt;li&gt;Merges the power of &lt;a href="https://github.com/requests/requests"&gt;Requests&lt;/a&gt;, &lt;a href="https://github.com/SeleniumHQ/selenium"&gt;Selenium&lt;/a&gt;, and &lt;a href="https://github.com/scrapy/parsel"&gt;Parsel&lt;/a&gt; into a single integrated tool for automatizing web actions.&lt;/li&gt;
&lt;li&gt;The library was created for writing web automation scripts that are written using mostly Requests but that are able to seamlessly switch to Selenium for the JavaScript heavy parts of the website, while maintaining the session.&lt;/li&gt;
&lt;li&gt;Features
&lt;ul&gt;
&lt;li&gt;Enables switching between a Requests' Session and a Selenium webdriver while maintaining the current web session.&lt;/li&gt;
&lt;li&gt;Integrates Parsel's parser into the library, making xpath, css, and regex much cleaner to write.&lt;/li&gt;
&lt;li&gt;Improves Selenium's handling of dynamically loading elements.&lt;/li&gt;
&lt;li&gt;Makes cookie handling more flexible in Selenium.&lt;/li&gt;
&lt;li&gt;Makes clicking elements in Selenium more reliable.&lt;/li&gt;
&lt;li&gt;Supports Chrome and PhantomJS.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Our news&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://testandcode.com/33"&gt;Test &amp;amp; Code 33: Testing in Data Science with Kathrine Jarmul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Thanks to the 9 folks to that have left an Amazon review for &lt;a href="https://www.amazon.com/Python-Testing-pytest-Effective-Scalable/dp/1680502409#customerReviews"&gt;Python Testing with pytest&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#57 Our take on Excel and Python</title><link>https://pythonbytes.fm/episodes/show/57/our-take-on-excel-and-python</link><guid>07740c0a-f77e-4693-9435-50a3e22ea8c0</guid><enclosure url="https://pythonbytes.fm/episodes/download/57/our-take-on-excel-and-python.mp3" length="14940544" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 21 Dec 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Our take on Excel and Python</itunes:title><itunes:episode>57</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:15:48</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="http://do.co/python"&gt;&lt;strong&gt;http://digitalocean.com&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://medium.com/@anthonypjshaw/testing-python-3-and-2-simultaneously-with-retox-3e7c4b41453f"&gt;&lt;strong&gt;Testing Python 3 and 2 simultaneously with retox&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anthony Shaw&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt; allows you to run the same tests in multiple configurations.
&lt;ul&gt;
&lt;li&gt;For example, multiple Python interpreters (2 vs 3), or on different hardware, or using different options, etc.&lt;/li&gt;
&lt;li&gt;tox can also tests your packaging code (on by default, but can be disabled)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/detox"&gt;detox&lt;/a&gt; allows multiple configurations to be tested in parallel with multiprocessing
&lt;ul&gt;
&lt;li&gt;typically running all tests 2-4 times faster&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tonybaloney/retox"&gt;retox&lt;/a&gt; does this with a GUI
&lt;ul&gt;
&lt;li&gt;also adds “watch” capability&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://robomongo.org/"&gt;&lt;strong&gt;Robo 3T / RoboMongo&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MongoDB GUI with embedded shell&lt;/li&gt;
&lt;li&gt;CLI interaction&lt;/li&gt;
&lt;li&gt;GUI when you want it&lt;/li&gt;
&lt;li&gt;No. 34 repository on GitHub&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;strong&gt;regular expressions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://devarea.com/python-regular-expressions-practical-guide"&gt;Regular Expressions Practical Guide&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Python examples for some common expressions&lt;/li&gt;
&lt;li&gt;How to use the built in re package for email addresses, URLs, phone numbers&lt;/li&gt;
&lt;li&gt;substitution with &lt;code&gt;re.sub()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;splitting a string with &lt;code&gt;re.split()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;what some of the escape shortcuts mean, like &lt;code&gt;\w&lt;/code&gt; for word, &lt;code&gt;\s&lt;/code&gt; for whitespace, etc.&lt;/li&gt;
&lt;li&gt;iterating through matches with &lt;code&gt;re.finditer()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Using compiled expressions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dataquest.io/blog/regular-expressions-data-scientists/"&gt;Regular Expressions for Data Scientists&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;another great intro, that also talks about:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re.search()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;re.findall()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;match groups&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="http://mongoengine.org/"&gt;&lt;strong&gt;MongoEngine&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MongoEngine is a Document-Object Mapper (think ORM, but for document databases) for working with MongoDB from Python.&lt;/li&gt;
&lt;li&gt;Map classes to MongoDB (think SQLAlchemy but for document databases)&lt;/li&gt;
&lt;li&gt;Adds features lacking from MongoDB
&lt;ul&gt;
&lt;li&gt;Schema&lt;/li&gt;
&lt;li&gt;Required fields&lt;/li&gt;
&lt;li&gt;Constraints&lt;/li&gt;
&lt;li&gt;Relationships&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="http://tommikaikkonen.github.io/introducing-prettyprinter-for-python/"&gt;&lt;strong&gt;Introducing PrettyPrinter for Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a powerful, syntax-highlighting, and declarative pretty printer for Python 3.6&lt;/li&gt;
&lt;li&gt;goals
&lt;ul&gt;
&lt;li&gt;Implement an algorithm that tries very hard to produce pretty output, even if it takes a bit more work.&lt;/li&gt;
&lt;li&gt;Implement a dead simple, declarative interface to writing your own pretty printers. Python developers rarely write &lt;code&gt;__repr__&lt;/code&gt; methods because they're a pain; no one will definitely write pretty printing rules for user-defined types unless it's super simple.&lt;/li&gt;
&lt;li&gt;Implement syntax-highlighting that doesn't break on invalid Python syntax.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://excel.uservoice.com/forums/304921-excel-for-windows-desktop-application/suggestions/10549005-python-as-an-excel-scripting-language"&gt;&lt;strong&gt;Excel and Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Replace VBA&lt;/li&gt;
&lt;li&gt;Python in Excel as the main scripting language&lt;/li&gt;
&lt;li&gt;They need feedback (fill out their survey, upvote the issue)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our news&lt;/p&gt;

&lt;p&gt;Michael: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Webcast: &lt;strong&gt;&lt;a href="https://www.wintellect.com/webinar/lets-build-something-mongodb-python/"&gt;https://www.wintellect.com/webinar/lets-build-something-mongodb-python/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#58 Better cache decorators and another take on type hints</title><link>https://pythonbytes.fm/episodes/show/58/better-cache-decorators-and-another-take-on-type-hints</link><guid>696028af-a02d-480f-a756-fd4fb20456d3</guid><enclosure url="https://pythonbytes.fm/episodes/download/58/better-cache-decorators-and-another-take-on-type-hints.mp3" length="14622367" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Tue, 26 Dec 2017 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Better cache decorators and another take on type hints</itunes:title><itunes:episode>58</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:15:27</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;strong&gt;&lt;a href="http://do.co/python"&gt;http://do.co/python&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://engineering.instagram.com/let-your-code-type-hint-itself-introducing-open-source-monkeytype-a855c7284881"&gt;&lt;strong&gt;Instagram open sources MonkeyType&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Carl Meyer, an engineer on Instagram’s infrastructure team.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;(Note: &lt;a href="https://pythonbytes.fm/episodes/show/54/pyannotate-your-way-to-the-future"&gt;we talked about Dropbox’s pyannotate in episode 54&lt;/a&gt;. pyannotate is not on Python3 yet and generates comment style annotations that are Py2 compatible)&lt;/li&gt;
&lt;li&gt;MonkeyType is Instagram’s tool for automatically adding type annotations to your Python 3 code via runtime tracing of types seen.&lt;/li&gt;
&lt;li&gt;Requires Python 3.6+&lt;/li&gt;
&lt;li&gt;Generates only Python 3 style type annotations (no type comments)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://cachetools.readthedocs.io/en/latest/"&gt;&lt;strong&gt;cachetools&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extensible memoizing collections and decorators&lt;/li&gt;
&lt;li&gt;Think variants of Python 3 Standard Library @lru_cache function decorator&lt;/li&gt;
&lt;li&gt;Caching types:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cachetools.Cache&lt;/code&gt; Mutable mapping to serve as a simple cache or cache base class.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cachetools.LFUCache&lt;/code&gt; Least Frequently Used (LFU) cache implementation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cachetools.LRUCache&lt;/code&gt; Least Recently Used (LRU) cache implementation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cachetools.TTLCache&lt;/code&gt; LRU Cache implementation with per-item time-to-live (TTL) value.&lt;/li&gt;
&lt;li&gt;And more&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Memoizing decorators
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cachetools.cached&lt;/code&gt; Decorator to wrap a function with a memoizing callable that saves results in a cache.&lt;/li&gt;
&lt;li&gt;Note that cache need not be an instance of the cache implementations provided by the &lt;code&gt;cachetools&lt;/code&gt; module. cached() will work with any mutable mapping type, including plain dict and &lt;code&gt;weakref.WeakValueDictionary&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Can pass key function for hash insertions and lock object for thread safety.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="http://charlesleifer.com/blog/going-fast-with-sqlite-and-python/"&gt;&lt;strong&gt;Going Fast with SQLite and Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Charles Leifer&lt;/li&gt;
&lt;li&gt;Many projects start with SQLite, as it’s distributed with Python as &lt;a href="https://docs.python.org/3/library/sqlite3.html"&gt;sqlite3&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;This article discusses some ways to achieve better performance from SQLite and shares some tricks.
&lt;ul&gt;
&lt;li&gt;transactions, concurrency, and autocommit&lt;/li&gt;
&lt;li&gt;user-defined functions&lt;/li&gt;
&lt;li&gt;using pragmas&lt;/li&gt;
&lt;li&gt;compilation flags&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4: &lt;a href="https://www.numworks.com/features/"&gt;The graphing calculator that makes learning math easier.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A full graphing calculator&lt;/li&gt;
&lt;li&gt;Programmable in Python&lt;/li&gt;
&lt;li&gt;Exam approved: Take the SAT and the ACT.&lt;/li&gt;
&lt;li&gt;Free browser emulator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="http://jakevdp.github.io/blog/2017/12/05/installing-python-packages-from-jupyter/index.html"&gt;&lt;strong&gt;Installing Python Packages from a Jupyter Notebook&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jake VanderPlas&lt;/li&gt;
&lt;li&gt;using conda
import sys
!conda install --yes --prefix {sys.prefix} numpy&lt;/li&gt;
&lt;li&gt;using pip 
import sys
{sys.executable} -m pip install numpy&lt;/li&gt;
&lt;li&gt;plus a discussion of why this is weird in Jupyter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.youtube.com/user/PyConDE/videos"&gt;&lt;strong&gt;Videos from PyConDE 2017 are online&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Miroslav Šedivý &lt;a href="https://twitter.com/eumiro/status/936671094429364225"&gt;@eumiro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lots of interesting talk titles&lt;/li&gt;
&lt;li&gt;Almost all in English&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#59 Instagram disregards Python's GC (again)</title><link>https://pythonbytes.fm/episodes/show/59/instagram-disregards-python-s-gc-again</link><guid>a8ec4b54-f53c-44c2-b883-a4070444e184</guid><enclosure url="https://pythonbytes.fm/episodes/download/59/instagram-disregards-python-s-gc-again.mp3" length="23712054" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 05 Jan 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Instagram disregards Python's GC (again)</itunes:title><itunes:episode>59</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:25:39</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;strong&gt;&lt;a href="http://do.co/python"&gt;do.co/python&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;strong&gt;gc.freeze() and Copy-on-write friendly Python garbage collection&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://engineering.instagram.com/copy-on-write-friendly-python-garbage-collection-ad6ed5233ddf"&gt;Copy-on-write friendly Python garbage collection&lt;/a&gt; - Instagram&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/3705"&gt;gc.freeze() now part of Python 3.7&lt;/a&gt; - github pull request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://github.com/astorfi/speechpy"&gt;&lt;strong&gt;SpeechPy - A Library for Speech Processing and Recognition&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Library for Speech Processing and Recognition&lt;/li&gt;
&lt;li&gt;More foundation for data science than shooting out words.&lt;/li&gt;
&lt;li&gt;Based on MFCC (Mel Frequency Cepstral Coefficient)
&lt;ul&gt;
&lt;li&gt;The first step in any automatic speech recognition system is to extract features i.e. identify the components of the audio signal that are good for identifying the linguistic content and discarding all the other stuff which carries information like background noise, emotion etc. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Citation section is a nice touch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://codechalleng.es/"&gt;&lt;strong&gt;PyBites Code Challenges : Bites of Py&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Like code katas, coding challenges you can do on your own.&lt;/li&gt;
&lt;li&gt;“Bites of Py are self contained 20-60 min Python (3.6) code challenges you can code and verify in the browser.”&lt;/li&gt;
&lt;li&gt;Use pytest to check answers&lt;/li&gt;
&lt;li&gt;See pytest output so you can partially solve challenges and see where it fails.&lt;/li&gt;
&lt;li&gt;BTW, min() takes a key, like sort() and sorted(). I learned that this morning.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://py.checkio.org/blog/how-big-is-the-python-family/"&gt;&lt;strong&gt;How big is the Python Family&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CPython, Jython, IronPython, Python for .NET, Cython, PyPy, MicroPython, and recently Grumpy&lt;/li&gt;
&lt;li&gt;This is why I don’t like the word “Python interpreter” but rather use “Python runtime” even though it’s less common.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://dramatiq.io/index.html"&gt;&lt;strong&gt;Dramatiq: simple task processing&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.podcastinit.com/dramatiq-with-bogdan-popa-episode-141/"&gt;Interview on Podcast.init&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dramatiq.io/cookbook.html#"&gt;Cookbook&lt;/a&gt; included in documentation to get started pretty quick.&lt;/li&gt;
&lt;li&gt;Inspired by &lt;a href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt;, but probably a bit easier to get into if you are new to task processing.&lt;/li&gt;
&lt;li&gt;License is interesting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://hackernoon.com/controlling-python-async-creep-ec0a0f4b79ba"&gt;&lt;strong&gt;Controlling Python Async Creep&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From friend of the show Cristian Medina&lt;/li&gt;
&lt;li&gt;Boundary between sync and async can get tricky&lt;/li&gt;
&lt;li&gt;The complication arises when invoking awaitable functions. Doing so requires an async defined code block or coroutine. A non-issue except that if your caller has to be async, then you can’t call it either unless its caller is async. Which then forces its caller into an async block as well, and so on. This is “async creep”.&lt;/li&gt;
&lt;li&gt;Solutions or techniques
&lt;ul&gt;
&lt;li&gt;Waiting for blocks of async code
&lt;ul&gt;
&lt;li&gt;The general guideline is to start with things that wait on I/O, like file or socket access, HTTP requests, etc.&lt;/li&gt;
&lt;li&gt;Once you know which pieces to optimize, start identifying the ones that can run on top of each other.&lt;/li&gt;
&lt;li&gt;Nice example using a web service&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Use a thread
&lt;ul&gt;
&lt;li&gt;Next example creating a dedicated asyncio loop in the secondary thread&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Mixing sync and async
&lt;ul&gt;
&lt;li&gt;Let’s look at something more complicated. What if you have a library or module where most functions can run in parallel, but you only want to do so if the caller is async?&lt;/li&gt;
&lt;li&gt;This could prove useful to any python packages that are wanting to add support for asynchronous execution while still supporting legacy code. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Extra (michael)&lt;/strong&gt;: The &lt;strong&gt;PyTennessee conference&lt;/strong&gt; will be held February 10-11, 2018. We recently announced our schedule (&lt;a href="https://www.pytennessee.org/schedule/"&gt;https://www.pytennessee.org/schedule/&lt;/a&gt;), and tickets are on sale now (&lt;a href="https://pytn2018.eventbrite.com/"&gt;https://pytn2018.eventbrite.com/&lt;/a&gt;). A smaller, regional conference is a great way to meet people, make new Python friends, and hear some great talks without having to fight the crowds of the larger conferences.&lt;/p&gt;

&lt;p&gt;If anyone wants to buy a ticket and wants a 10% discount, they can use the code &lt;code&gt;PythonBytes&lt;/code&gt; during checkout.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the news&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not much to do about this but pay attention: A critical design flaw in virtually all microprocessors allows attackers to dump the entire memory contents off of a machine/mobile device/PC/cloud server etc.
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/nicoleperlroth/status/948684376249962496"&gt;https://twitter.com/nicoleperlroth/status/948684376249962496&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nytimes.com/2018/01/03/business/computer-flaws.html"&gt;https://www.nytimes.com/2018/01/03/business/computer-flaws.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Probably excellent coverage on https://risky.biz/&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;From NY Times:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;The two problems, called Meltdown and Spectre, could allow hackers to steal the entire memory contents of computers, including mobile devices, personal computers and servers running in so-called cloud computer networks.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;There is no easy fix for Spectre, which could require redesigning the processors, according to researchers. As for Meltdown, the software patch needed to fix the issue could slow down computers by as much as 30 percent — an ugly situation for people used to fast downloads from their favorite online services.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Our news&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Michael: &lt;strong&gt;Everything Bundle&lt;/strong&gt;: &lt;strong&gt;&lt;a href="https://talkpython.fm/everything"&gt;talkpython.fm/everything&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Includes Mastering PyCharm, Python 3: An Illustrated Tour, Intro to Ansible, and much more.&lt;/p&gt;</description></item><item><title>#60 Don't dismiss SQLite as just a starter DB</title><link>https://pythonbytes.fm/episodes/show/60/don-t-dismiss-sqlite-as-just-a-starter-db</link><guid>2f925aff-d72f-4591-9bb6-a7465bc3f7dd</guid><enclosure url="https://pythonbytes.fm/episodes/download/60/don-t-dismiss-sqlite-as-just-a-starter-db.mp3" length="24552139" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 11 Jan 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Don't dismiss SQLite as just a starter DB</itunes:title><itunes:episode>60</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:26:29</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Brought to you by Datadog &lt;a href="https://pythonbytes.fm/datadog"&gt;pythonbytes.fm/datadog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://www.youtube.com/watch?v=Qu76Xlq2J0k&amp;amp;feature=youtu.be"&gt;&lt;strong&gt;Who's at nine?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Organic Idiocy&lt;/li&gt;
&lt;li&gt;Inspired by &lt;a href="https://pythonbytes.fm/episodes/show/33/you-should-build-an-alexa-skill"&gt;Michael talking about programming Alexa in episode 33&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/GregQuinlan/status/950138396445376513"&gt;Twitter thread&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Using 
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://flask-ask.readthedocs.io/en/latest/"&gt;Flask-Ask&lt;/a&gt; for Alexa&lt;/li&gt;
&lt;li&gt;&lt;a href="http://flask-assistant.readthedocs.io/en/latest/"&gt;Flask-Assistant&lt;/a&gt; for Google Home&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://talkpython.fm/146"&gt;Talk Python 146&lt;/a&gt; is all about Flask Ask and Assistant this week. ;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="http://prog21.dadgum.com/203.html"&gt;&lt;strong&gt;Retiring Python as a teaching language&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why did he write this?
&lt;ul&gt;
&lt;li&gt;Then one day a student will innocently ask "Instead of running the poker simulator from the command line, how can I put it in a window with a button to deal the next hand?"&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The ensuing Twitter conversation was very interesting. Scroll this status, it’s pretty comprehensive &lt;a href="https://twitter.com/mkennedy/status/949688651058835456"&gt;https://twitter.com/mkennedy/status/949688651058835456&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;strong&gt;Don't dismiss SQLite as just a starter DB&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQLite is a single file db that &lt;a href="https://docs.python.org/3.6/library/sqlite3.html"&gt;comes with Python&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A listener pointed us to a couple cool things about SQLite&lt;/li&gt;
&lt;li&gt;A great interview with the developer &lt;a href="https://changelog.com/podcast/201"&gt;The Changelog, episode 201&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It's extensive documentation on how &lt;a href="http://sqlite.org/testing.html"&gt;SQLite is tested&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Of course, for web applications and other applications that have to deal with extreme concurrency, you need a client server database &lt;/li&gt;
&lt;li&gt;Many applications don't have extreme concurrency needs.&lt;/li&gt;
&lt;li&gt;Sticking with SQLite might be just fine for quite a long time for many apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://github.com/aws/chalice"&gt;&lt;strong&gt;Chalice: Python Serverless Microframework for AWS&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chalice is a python serverless microframework for AWS. It allows you to quickly create and deploy applications that use Amazon API Gateway and AWS Lambda. &lt;/li&gt;
&lt;li&gt;It provides:
&lt;ul&gt;
&lt;li&gt;A command line tool for creating, deploying, and managing your app&lt;/li&gt;
&lt;li&gt;A familiar and easy to use API for declaring views in python code (Flask)&lt;/li&gt;
&lt;li&gt;Automatic IAM policy generation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Compare to Zappa: &lt;a href="https://github.com/Miserlou/Zappa"&gt;https://github.com/Miserlou/Zappa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://www.peterbe.com/plog/fastest-way-to-uniquify-a-list-in-python-3.6"&gt;&lt;strong&gt;Fastest way to uniquely a list in Python &amp;gt;=3.6&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nice analysis of different ways to uniquify a list.&lt;/li&gt;
&lt;li&gt;Punchline:
&lt;ul&gt;
&lt;li&gt;The fastest way to uniqify a list of hashable objects (basically immutable things) is: &lt;code&gt;list(set(seq))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;And the fastest way, if the order is important is: &lt;code&gt;list(dict.fromkeys(seq))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6: PyTexas and PyCon AU vidoes are up&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PL0MRiRrXAvRiwQUUwTTh5g8rhbQyYlubo"&gt;PyTexas&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Notable PyTexas videos
&lt;ul&gt;
&lt;li&gt;Micropython&lt;/li&gt;
&lt;li&gt;What is ML?&lt;/li&gt;
&lt;li&gt;C for yourself&lt;/li&gt;
&lt;li&gt;Python and .NET&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyvideo.org/events/pycon-au-2017.html"&gt;PyCon AU&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Notable PyCon AU videos
&lt;ul&gt;
&lt;li&gt;Gradual typing&lt;/li&gt;
&lt;li&gt;Hot reloading Python web-servers at scale &lt;/li&gt;
&lt;li&gt;Prototyping Python Microservices in Production &lt;/li&gt;
&lt;li&gt;Secrets of a WSGI master. &lt;/li&gt;
&lt;li&gt;Python 3 for People Who Haven't Been Paying Attention &lt;/li&gt;
&lt;li&gt;Identity 2.0: the what, why and how of social and federated login &lt;/li&gt;
&lt;li&gt;Python: Ludicrous mode (with Django) &lt;/li&gt;
&lt;li&gt;Scaling Down: Running Large Sites Locally &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Our news&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Michael&lt;/p&gt;

&lt;p&gt;&lt;a href="https://training.talkpython.fm/courses/explore_pycharm/mastering-pycharm-ide?utm_source=pythonbytes"&gt;&lt;strong&gt;Mastering PyCharm is out&lt;/strong&gt;&lt;/a&gt;. Includes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn to manage Python projects in PyCharm (large and small)&lt;/li&gt;
&lt;li&gt;Create web applications (Pyramid, Flask, Django, and more)&lt;/li&gt;
&lt;li&gt;Use PyCharm's special data science mode&lt;/li&gt;
&lt;li&gt;Refactor your Python code with confidence&lt;/li&gt;
&lt;li&gt;Learn about code smells and duplicate code tooling&lt;/li&gt;
&lt;li&gt;Access git, github, and use git flow&lt;/li&gt;
&lt;li&gt;Use the visual debugger to understand code flow and state&lt;/li&gt;
&lt;li&gt;Make your code more reliable with unit testing and pytest&lt;/li&gt;
&lt;li&gt;Create new Python packages&lt;/li&gt;
&lt;li&gt;And lots more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Webcast with JetBrains: &lt;a href="https://info.jetbrains.com/PyCharm-Webinar-January2018.html"&gt;&lt;strong&gt;MongoDB Quickstart with Python and PyCharm&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;Jan 30&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>#61 On Being a Senior Engineer</title><link>https://pythonbytes.fm/episodes/show/61/on-being-a-senior-engineer</link><guid>6d0623de-2a5d-4687-b397-a9f267703fdb</guid><enclosure url="https://pythonbytes.fm/episodes/download/61/on-being-a-senior-engineer.mp3" length="10318890" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Tue, 16 Jan 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>On Being a Senior Engineer</itunes:title><itunes:episode>61</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:22:22</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;strong&gt;&lt;a href="http://do.co/python"&gt;http://do.co/python&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://www.python.org/dev/peps/pep-0412/"&gt;&lt;strong&gt;PEP 412's dict key sharing for classes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"memory use is reduced by 10% to 20% for object-oriented programs with no significant change in memory use for other programs."&lt;/li&gt;
&lt;li&gt;To benefit from this, make sure all attributes used in life of class instances are initialized within &lt;code&gt;__init__()&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Video from PyCon 2017
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=66P5FMkWoVU"&gt;Brandon Rhodes The Dictionary Even Mightier PyCon 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Look at description at about 14 minutes on in the video&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Suggested by &lt;a href="https://twitter.com/nletcher/status/950184503116365825"&gt;Ned Letcher&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://python-hunter.readthedocs.io/en/latest/cookbook.html#walkthrough"&gt;&lt;strong&gt;Python Hunter&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Ivan Pejić&lt;/li&gt;
&lt;li&gt;Hunter is a flexible code tracing toolkit, not for measuring coverage, but for debugging, logging, inspection and other nefarious purposes. It has a Python API, terminal activation (see Environment variable activation). and supports tracing other processes (see Tracing processes).&lt;/li&gt;
&lt;li&gt;The default action is to just print the code being executed&lt;/li&gt;
&lt;li&gt;Based on cython&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://zwischenzugs.com/2018/01/06/ten-things-i-wish-id-known-about-bash/"&gt;&lt;strong&gt;Ten Things I Wish I’d Known About bash&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I started with ksh on Solaris/HP-UX, used zsh for few years.&lt;/li&gt;
&lt;li&gt;Mostly now, I use bash, because it’s everywhere. Mac/Windows/Linux&lt;/li&gt;
&lt;li&gt;For windows: &lt;a href="http://gitforwindows.org/"&gt;&lt;strong&gt;git for windows&lt;/strong&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Even if you don't need git, git for windows comes with fully integrated unix tools and bash and it just works as you expect.&lt;/li&gt;
&lt;li&gt;you can launch windows applications&lt;/li&gt;
&lt;li&gt;most of the frequent bash commands are there&lt;/li&gt;
&lt;li&gt;If you really don’t want bash, consider &lt;a href="http://cmder.net/"&gt;&lt;strong&gt;cmder&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="http://www.grokcode.com/864/snakefooding-python-code-for-complexity-visualization/"&gt;&lt;strong&gt;Snakefooding Python Code For Complexity Visualization&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://furius.ca/snakefood/"&gt;Snakefood&lt;/a&gt; is a tool written by Martin Blais to create Python dependency graphs. &lt;/li&gt;
&lt;li&gt;Combined with GraphViz, snakefood can create beautiful visualizations of Python codebases.&lt;/li&gt;
&lt;li&gt;Python Web Frameworks: The different development philosophies of Bottle, Django, Flask, and Pyramid are apparent by looking at their snakefood graphs.&lt;/li&gt;
&lt;li&gt;Bottle: A fast and simple micro framework for Python web applications.&lt;/li&gt;
&lt;li&gt;Django: A batteries-included web framework for perfectionists with deadlines.&lt;/li&gt;
&lt;li&gt;Flask: A microframework for Python.&lt;/li&gt;
&lt;li&gt;Pyramid: A small, fast, down-to-earth, open source Python web framework. It makes real-world web application development and deployment more fun, more predictable, and more productive.&lt;/li&gt;
&lt;li&gt;Also Queueing Implementations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/"&gt;&lt;strong&gt;On Being a Senior Engineer&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2012 article that's still very valid&lt;/li&gt;
&lt;li&gt;Obligatory Pithy Characteristics of Mature Engineers&lt;/li&gt;
&lt;li&gt;Mature engineers ...
&lt;ul&gt;
&lt;li&gt;seek out constructive criticism of their designs.&lt;/li&gt;
&lt;li&gt;understand the non-technical areas of how they are perceived.&lt;/li&gt;
&lt;li&gt;do not shy away from making estimates, and are always trying to get better at it.&lt;/li&gt;
&lt;li&gt;have an innate sense of anticipation, even if they don’t know they do.&lt;/li&gt;
&lt;li&gt;understand that not all of their projects are filled with rockstar-on-stage work.&lt;/li&gt;
&lt;li&gt;lift the skills and expertise of those around them.&lt;/li&gt;
&lt;li&gt;make their trade-offs explicit when making judgements and decisions.&lt;/li&gt;
&lt;li&gt;don’t practice CYAE (“Cover Your Ass Engineering”)&lt;/li&gt;
&lt;li&gt;are empathetic.&lt;/li&gt;
&lt;li&gt;don’t make empty complaints.&lt;/li&gt;
&lt;li&gt;are aware of cognitive biases:
&lt;ul&gt;
&lt;li&gt;Self-Serving Bias&lt;/li&gt;
&lt;li&gt;Fundamental Attribution Error&lt;/li&gt;
&lt;li&gt;Hindsight Bias&lt;/li&gt;
&lt;li&gt;Outcome Bias&lt;/li&gt;
&lt;li&gt;Planning Fallacy&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The Ten Commandments of Egoless Programming
&lt;ol&gt;
&lt;li&gt;Understand and accept that you will make mistakes.&lt;/li&gt;
&lt;li&gt;You are not your code.&lt;/li&gt;
&lt;li&gt;No matter how much “karate” you know, someone else will always know more. &lt;/li&gt;
&lt;li&gt;Don’t rewrite code without consultation. &lt;/li&gt;
&lt;li&gt;Treat people who know less than you with respect, deference, and patience. &lt;/li&gt;
&lt;li&gt;The only constant in the world is change. &lt;/li&gt;
&lt;li&gt;The only true authority stems from knowledge, not from position. &lt;/li&gt;
&lt;li&gt;Fight for what you believe, but gracefully accept defeat. &lt;/li&gt;
&lt;li&gt;Don’t be “the coder in the corner.” &lt;/li&gt;
&lt;li&gt;Critique code instead of people – be kind to the coder, not to the code.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;also:
&lt;ul&gt;
&lt;li&gt;Novices versus Experts &lt;/li&gt;
&lt;li&gt;Dirty secret: mature engineers know the importance of (sometimes irrational) feelings people have. (gasp!)&lt;/li&gt;
&lt;li&gt;“It is amazing what you can accomplish if you do not care who gets credit.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6: Python UI frameworks&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TkInter (&lt;a href="https://www.tutorialspoint.com/python/python_gui_programming.htm"&gt;tutorial&lt;/a&gt;) - not amazing, not at all (&lt;a href="https://i.stack.imgur.com/Qdbsi.png"&gt;example&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pyside"&gt;PySide&lt;/a&gt; and Qt - hard to install, weird licensing and versioning, but has a nice designer&lt;/li&gt;
&lt;li&gt;Kivy and PyGame/PyOpenGL - game / simulation like&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wxpython.org/"&gt;wxPython&lt;/a&gt; seems not bad actually
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.blog.pythonlibrary.org/wp-content/uploads/2011/07/events_in_style.png"&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wxwidgets.org/"&gt;widgets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wxFormBuilder/wxFormBuilder"&gt;wxFormBuilder&lt;/a&gt; - a RAD tool for wxWidgets GUI design&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wxglade.sourceforge.net/"&gt;wxGlade&lt;/a&gt; is a GUI designer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;What else? A few platform specific examples&lt;/li&gt;
&lt;li&gt;The problem: was discussed last week&lt;/li&gt;
&lt;li&gt;Some more Electron.JS like solutions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ChrisKnott/Eel"&gt;&lt;strong&gt;github.com/ChrisKnott/Eel&lt;/strong&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Eel is a little Python library for making simple Electron-like offline HTML/JS GUI apps, with full access to Python capabilities and libraries.&lt;/li&gt;
&lt;li&gt;It hosts a local webserver, then lets you annotate functions in Python so that they can be called from Javascript, and vice versa.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cztomczak/cefpython"&gt;CEFPython&lt;/a&gt; - Chrome browser control, a HTML 5 based Python GUI framework.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#62 Wooey and Gooey are simple Python GUIs</title><link>https://pythonbytes.fm/episodes/show/62/wooey-and-gooey-are-simple-python-guis</link><guid>5c4ddb28-d2e1-4d1b-a2c1-dab45e311c77</guid><enclosure url="https://pythonbytes.fm/episodes/download/62/wooey-and-gooey-are-simple-python-guis.mp3" length="216" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 26 Jan 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Wooey and Gooey are simple Python GUIs</itunes:title><itunes:episode>62</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:28:41</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Brought to you by Datadog &lt;a href="https://pythonbytes.fm/datadog"&gt;pythonbytes.fm/datadog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;strong&gt;Dan Bader takes over Real Python&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mailchi.mp/realpython/final-blast?e=a41501fde5"&gt;Announcement email&lt;/a&gt;, with what Michael, Fletcher, and Jeremy are doing now&lt;/li&gt;
&lt;li&gt;Dan is on the show and tells us all about it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2: Still more Python GUIs&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/wooey/Wooey"&gt;https://github.com/wooey/Wooey&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;A Django app that creates automatic web UIs for Python scripts.&lt;/li&gt;
&lt;li&gt;Wooey is a simple web interface to run command line Python scripts. Think of it as an easy way to get your scripts up on the web for routine data analysis, file processing, or anything else.&lt;/li&gt;
&lt;li&gt;Wooey was envisioned as a system to allow data analysts to be able to easily:
&lt;ul&gt;
&lt;li&gt;Autodocument workflows for data analysis  (simple model saving).&lt;/li&gt;
&lt;li&gt;Enable fellow co-workers with no command line experience to utilize python scripts.&lt;/li&gt;
&lt;li&gt;Enable the easy wrapping of any program in simple python instead of having to use language specific  to existing tools such as Galaxy.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Try the demo server: &lt;a href="https://wooey.herokuapp.com/"&gt;https://wooey.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/chriskiehl/Gooey"&gt;https://github.com/chriskiehl/Gooey&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Turn (almost) any Python command line program into a full GUI application with one line&lt;/li&gt;
&lt;li&gt;See the &lt;a href="https://github.com/chriskiehl/Gooey"&gt;&lt;strong&gt;screenshots here&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gooey converts your Console Applications into end-user-friendly GUI applications. &lt;/li&gt;
&lt;li&gt;It lets you focus on building robust, configurable programs in a familiar way, all without having to worry about how it will be presented to and interacted with by your average user.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;And Toga: &lt;a href="https://pybee.org/project/projects/libraries/toga/"&gt;https://pybee.org/project/projects/libraries/toga/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://nedbatchelder.com//blog/201801/pythons_misleading_readability.html"&gt;&lt;strong&gt;Python’s misleading readability&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ned Batchelder&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; are not obvious and can confuse people new to the language, new to programming.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1000 + 1 is 1001&lt;/code&gt;  → &lt;code&gt;1000 + 1 == 1001&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;answer == "y" or "yes``"&lt;/code&gt; → &lt;code&gt;answer in {"y", "yes"}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://haarcuba.github.io/warp2/"&gt;&lt;strong&gt;warp2 access&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;python2 code from python3&lt;/li&gt;
&lt;li&gt;It communicates with the subprocess using pickle, so there are limitation to using it - if you need to send unpicklable data, that’s a problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;strong&gt;Help! My tests can’t see my code!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Probably should be an episode on &lt;a href="http://testandcode.com/"&gt;Test &amp;amp; Code&lt;/a&gt;, and maybe I’ll do that also, but it’s a big enough roadblock to many newcomers to &lt;a href="http://amzn.to/2DBLFCz"&gt;pytest&lt;/a&gt;, that I want to get the word out on how to fix it.&lt;/li&gt;
&lt;li&gt;A best practice is to put your test code in a folder called tests.&lt;/li&gt;
&lt;li&gt;Now, if you are sitting in the parent directory, where you can see both your modules/packages under test and the &lt;code&gt;tests&lt;/code&gt; directory, and you run &lt;code&gt;pytest&lt;/code&gt;, your test code has to have some way to import the code under test.&lt;/li&gt;
&lt;li&gt;If you are in a hurry. Homework due in an hour, project manager breathing down your neck, or whatever, then there are two easy options:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python -m pytest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python&lt;/code&gt; adds the current directory where you start it to &lt;code&gt;PYTHONPATH&lt;/code&gt;, &lt;code&gt;pytest&lt;/code&gt; does not.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install pytest-pythonpath&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/pytest-pythonpath"&gt;https://pypi.python.org/pypi/pytest-pythonpath&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This plugin adds the current directory to &lt;code&gt;PYTHONPATH&lt;/code&gt;, and adds some hooks that let you define search paths in your &lt;code&gt;pytest.ini&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;When you have time..
&lt;ul&gt;
&lt;li&gt;Create a &lt;code&gt;setup.py&lt;/code&gt; file for your code. And…&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install -e ./your_project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This allows you to continue working on your code while letting your test code see the code under test&lt;/li&gt;
&lt;li&gt;This method is friendlier to &lt;code&gt;tox&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://cement.readthedocs.io/en/latest/"&gt;&lt;strong&gt;Cement - Framework for CLI&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cement is an advanced CLI Application Framework for Python. &lt;/li&gt;
&lt;li&gt;Its goal is to introduce a standard, and feature-full platform for both simple and complex command line applications &lt;/li&gt;
&lt;li&gt;Also supports rapid development needs without sacrificing quality.&lt;/li&gt;
&lt;li&gt;Core features
&lt;ul&gt;
&lt;li&gt;Core pieces of the framework are customizable via handlers/interfaces&lt;/li&gt;
&lt;li&gt;Extension handler interface to easily extend framework functionality&lt;/li&gt;
&lt;li&gt;Config handler supports parsing multiple config files into one config&lt;/li&gt;
&lt;li&gt;Argument handler parses command line arguments and merges with config&lt;/li&gt;
&lt;li&gt;Log handler supports console and file logging&lt;/li&gt;
&lt;li&gt;Plugin handler provides an interface to easily extend your application&lt;/li&gt;
&lt;li&gt;Hook support adds a bit of magic to apps and also ties into framework&lt;/li&gt;
&lt;li&gt;Handler system connects implementation classes with Interfaces&lt;/li&gt;
&lt;li&gt;Output handler interface renders return dictionaries to console&lt;/li&gt;
&lt;li&gt;Cache handler interface adds caching support for improved performance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our news&lt;/p&gt;

&lt;p&gt;Michael&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conferences!
&lt;ul&gt;
&lt;li&gt;PyCascades in Vancouver BC on Jan 22, 23. Was great, get to it next year.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pycon.co/"&gt;PyColumbia&lt;/a&gt;, February 9, 10 and 11 Medellin, Colombia - I won't be there but if you are able to make it get your tickets&lt;/li&gt;
&lt;li&gt;PyCon Slovakia, March 9-11 in Bratislava. I'll be speaking there and doing a workshop. &lt;/li&gt;
&lt;li&gt;pycon us: Cleveland OH May 10th. I just finalized all my travel plans. I hope to see you there, please stop by our booth.&lt;/li&gt;
&lt;li&gt;PyCarribian: Santo Domingo, Dominican Republic, 17-18 February, 2018&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Podcast &lt;a href="http://pythonoutloud.com/"&gt;http://pythonoutloud.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#63 We're still on a desktop GUI kick</title><link>https://pythonbytes.fm/episodes/show/63/we-re-still-on-a-desktop-gui-kick</link><guid>0aca9086-f40a-49fe-9a24-c89614ee68d0</guid><enclosure url="https://pythonbytes.fm/episodes/download/63/we-re-still-on-a-desktop-gui-kick.mp3" length="216" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 01 Feb 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>We're still on a desktop GUI kick</itunes:title><itunes:episode>63</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:21:12</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;strong&gt;&lt;a href="http://do.co/python"&gt;http://do.co/python&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://hackernoon.com/a-brief-tour-of-python-3-7-data-classes-22ee5e046517"&gt;&lt;strong&gt;A brief tour of Python 3.7 data classes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a great write-up of the upcoming data classes via Anthony Shaw&lt;/li&gt;
&lt;li&gt;“Data classes are a way of automating the generation of boiler-plate code for classes which store multiple properties. They also carry the benefit of using Python 3’s new type hinting.”&lt;/li&gt;
&lt;li&gt;Default magic methods
&lt;ul&gt;
&lt;li&gt;In the default setting, any dataclass will implement &lt;code&gt;__init__&lt;/code&gt;, &lt;code&gt;__repr__&lt;/code&gt;, &lt;code&gt;__str__&lt;/code&gt; and &lt;code&gt;__eq__&lt;/code&gt; for you.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;__init__&lt;/code&gt; method will have &lt;strong&gt;keyword-arguments&lt;/strong&gt; with the same type annotations that are specified on the class.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;__eq__&lt;/code&gt; method will compare all dataclass attributes in order.&lt;/li&gt;
&lt;li&gt;All fields are declared at the top of the class and type hinting is &lt;strong&gt;required&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Also covered
&lt;ul&gt;
&lt;li&gt;type hinting&lt;/li&gt;
&lt;li&gt;mutability (and frozen)&lt;/li&gt;
&lt;li&gt;customizing the fields&lt;/li&gt;
&lt;li&gt;post-init processing : optional &lt;code&gt;__``*post_init_*``_&lt;/code&gt; will run after the generated &lt;code&gt;_``*_init_*``_&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;inheritance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; SQLite [The Databaseology Lectures - CMU Fall 2015]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lots of DBs covered here: &lt;strong&gt;&lt;a href="http://db.cs.cmu.edu/seminar2015/"&gt;http://db.cs.cmu.edu/seminar2015/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;SQLite at this &lt;a href="https://www.youtube.com/watch?v=gpxnbly9bz4&amp;amp;index=2&amp;amp;list=PLSE8ODhjZXjakeQR57ZdN5slUu2oPUr1Y"&gt;&lt;strong&gt;YouTube video&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://haarcuba.github.io/dryable/"&gt;&lt;strong&gt;dryable&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://haarcuba.github.io/dryable/"&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://haarcuba.github.io/dryable/"&gt;&lt;strong&gt;a useful dry-run decorator for python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;short circuit methods within your project during dry runs.&lt;/li&gt;
&lt;li&gt;example shows how to add a command line flag &lt;code&gt;--dry-run&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The test code is useful for understanding it also.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Example something.py
import dryable&lt;/p&gt;

&lt;p&gt;@dryable.Dryable('foo')
def return_something():
    return 'something'&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;test_something.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from something import return_something
import dryable

def test_normal_return():
    dryable.set(False) 
    assert return_something() == 'something'

def test_dry_return(capsys):
    dryable.set(True) 
    assert return_something() == 'foo'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;These are some pretty cool examples.
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/victordomingos/PT-Tracking/"&gt;https://github.com/victordomingos/PT-Tracking/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/victordomingos/RepService/"&gt;https://github.com/victordomingos/RepService/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/victordomingos/ContarDinheiro.py"&gt;https://github.com/victordomingos/ContarDinheiro.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://tonybaloney.github.io/pep-explorer/#"&gt;&lt;strong&gt;PEP Explorer - Explore Python Enhancement Proposals&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cool idea. Might need some work though. I can’t find any accepted PEPs for 3.7, including &lt;a href="https://www.python.org/dev/peps/pep-0557/"&gt;557, data classes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I’m ok with giving Anthony some shade on this, as we highlighted his writing in the first item.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://likegeeks.com/python-gui-examples-tkinter-tutorial/"&gt;&lt;strong&gt;TKInter Tutorial&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via @likegeeks&lt;/li&gt;
&lt;li&gt;Create your first GUI application&lt;/li&gt;
&lt;li&gt;Create a label and button widgets&lt;/li&gt;
&lt;li&gt;Input and combo boxs, menus, progressbars and more&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Our news&lt;/h2&gt;

&lt;p&gt;Michael&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I built something with &lt;a href="https://github.com/chriskiehl/Gooey"&gt;Gooey&lt;/a&gt; this weekend, it was wonderful.&lt;/li&gt;
&lt;li&gt;Self-serve team purchases and discounts at Talk Python Training&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#64 The GUI phoenix rises with wxPython</title><link>https://pythonbytes.fm/episodes/show/64/the-gui-phoenix-rises-with-wxpython</link><guid>ff79359f-2982-47b1-8952-baa405d8a51b</guid><enclosure url="https://pythonbytes.fm/episodes/download/64/the-gui-phoenix-rises-with-wxpython.mp3" length="216" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 09 Feb 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>The GUI phoenix rises with wxPython</itunes:title><itunes:episode>64</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:21:01</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;strong&gt;&lt;a href="http://do.co/python"&gt;http://do.co/python&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1: wxPython 4,&lt;/strong&gt; &lt;strong&gt;Pheonix is now live and supports Python 3&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/wxPython/4.0.0"&gt;wxPython on PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wxpython.org/news/wxpython-4.0.0-release/index.html"&gt;4.0.0&lt;/a&gt;, &lt;a href="https://www.wxpython.org/news/wxpython-4.0.1-release/index.html"&gt;4.0.1 release notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you haven’t played with wxPython for a while, now might be a good time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://github.com/python/typeshed"&gt;&lt;strong&gt;typeshed&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typeshed contains external type annotations for the Python standard library and Python builtins, as well as third party packages.&lt;/li&gt;
&lt;li&gt;This data can e.g. be used for static analysis, type checking or type inference. &lt;/li&gt;
&lt;li&gt;Used as the basis of mypy and PyCharm’s magic&lt;/li&gt;
&lt;li&gt;Each Python module is represented by a .pyi "stub". This is a normal Python file (i.e., it can be interpreted by Python 3), except all the methods are empty. Python function annotations (PEP 3107) are used to describe the types the function has.&lt;/li&gt;
&lt;li&gt;Here’s what one of these exeternal definitions looks like:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;     class NodeVisitor():
        def visit(self, node: AST) -&amp;gt; Any: ...
        def generic_visit(self, node: AST) -&amp;gt; None: ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://nedbatchelder.com/blog/201802/coverage_45.html"&gt;&lt;strong&gt;Coverage 4.5 adds configurator plug-ins&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“There’s one new feature: &lt;a href="http://coverage.readthedocs.io/en/latest/api_plugin.html#configurers"&gt;configurator plug-ins&lt;/a&gt;, that let you run Python code at startup to set the configuration for coverage. This side-steps a requested feature to have different exclusion pragmas for different versions of Python.”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.unrealengine.com/en-US/blog/technology-sneak-peek-python-in-unreal-engine"&gt;&lt;strong&gt;Python integrated into Unreal Engine&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via  Pirogov Alexander‏ ( &lt;a href="https://twitter.com/Pie_Daddy/status/948934041985781760"&gt;@Pie_Daddy&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;tl;dr: Autodesk university plans to integrate Python into Unreal Engine for the data integration pipeline and ease the process of bringing assets into the game.&lt;/li&gt;
&lt;li&gt;Autodesk is working on that will solve complicated problems with bringing CAD data into the Unreal Engine.&lt;/li&gt;
&lt;li&gt;Where they are today: 
&lt;ul&gt;
&lt;li&gt;The Datasmith workflow toolkit, currently in beta, makes moving data into Unreal Engine as frictionless as possible. &lt;/li&gt;
&lt;li&gt;Datasmith provides high-fidelity translation of common scene assets such as geometry, textures, materials, lights and cameras from popular DCC and CAD applications into Unreal Engine.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://www.python.org/downloads/release/python-370b1/"&gt;&lt;strong&gt;Python 3.7.0b1&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;: Beta means we should be testing it!!!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If not people like us and our listeners, then who? Seems like we’re a good set of beta testers.&lt;/li&gt;
&lt;li&gt;What are you going to test?&lt;/li&gt;
&lt;li&gt;I'm going to look at breakpoint() and data classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6: Releases abound!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Django security releases issued: 2.0.2 and 1.11.10
&lt;a href="https://www.djangoproject.com/weblog/2018/feb/01/security-releases/"&gt;https://www.djangoproject.com/weblog/2018/feb/01/security-releases/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python 3.4.8 (security)
&lt;a href="https://www.python.org/downloads/release/python-348/"&gt;https://www.python.org/downloads/release/python-348/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python 3.5.5 (security)
&lt;a href="https://www.python.org/downloads/release/python-355/"&gt;https://www.python.org/downloads/release/python-355/&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;libexpat XML lib had a security issue&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Channels 2.0 is a major rewrite of Channels
https://channels.readthedocs.io/en/latest/releases/2.0.0.html
&lt;ul&gt;
&lt;li&gt;See &lt;a href="https://talkpython.fm/episodes/show/98/adding-concurrency-to-django-with-django-channels"&gt;Talk Python’s interview&lt;/a&gt; for more details&lt;/li&gt;
&lt;li&gt;Notably: Python 2.7 and 3.4 are no longer supported.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Our news&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Brian:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Speaking at PyCon 2018. “PyCharm and pytest”. Speaking with Paul Everitt&lt;/li&gt;
&lt;li&gt;Upcoming webinar: &lt;a href="https://blog.jetbrains.com/pycharm/2018/02/webinar-productive-pytest-with-pycharm-with-brian-okken/"&gt;Productive pytest with Pycharm&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Feb 22, registration open&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Michael:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/pycharm/2018/02/webinar-recording-mongodb-quickstart-with-python-and-pycharm-with-michael-kennedy/"&gt;&lt;strong&gt;Webinar Recording:&lt;/strong&gt;&lt;/a&gt; “MongoDB Quickstart with Python and PyCharm” with Michael Kennedy&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#65 Speed of your import statements affecting performance?</title><link>https://pythonbytes.fm/episodes/show/65/speed-of-your-import-statements-affecting-performance</link><guid>6a23938e-d730-4555-a5b0-49524bef694e</guid><enclosure url="https://pythonbytes.fm/episodes/download/65/speed-of-your-import-statements-affecting-performance.mp3" length="218" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 14 Feb 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Speed of your import statements affecting performance?</itunes:title><itunes:episode>65</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:27:07</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Rollbar: &lt;a href="https://pythonbytes.fm/rollbar"&gt;pythonbytes.fm/rollbar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="http://pygal.org/en/stable/"&gt;&lt;strong&gt;pygal&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;: Simple Python Charting&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Output SVG or PNG&lt;/li&gt;
&lt;li&gt;Example Flask App (also django response) part of documentation.&lt;/li&gt;
&lt;li&gt;Enough other bits of doc to get you a chart in a web page super fast.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.reddit.com/r/learnprogramming/comments/7udoiv/how_many_of_you_selfstudied_programming_and_are/"&gt;&lt;strong&gt;Thoughts on becoming a self-taught programming&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic format:&lt;/li&gt;
&lt;li&gt;I'm 31 days into self-studying Python and am loving every minute of it!&lt;/li&gt;
&lt;li&gt;A few questions:
&lt;ul&gt;
&lt;li&gt;What were you doing before you began self-studying programming?&lt;/li&gt;
&lt;li&gt;What made you want to study programming on your own?&lt;/li&gt;
&lt;li&gt;How did you start (which resources and language)?&lt;/li&gt;
&lt;li&gt;How long did it take for you to feel confident enough in your skills and knowledge to know you could be employed as a programmer?&lt;/li&gt;
&lt;li&gt;What else did you do besides self-study that helped you in your journey to becoming a programmer?&lt;/li&gt;
&lt;li&gt;What's next for you?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://dev.to/methane/how-to-speed-up-python-application-startup-time-nkf"&gt;&lt;strong&gt;How to speed up Python application startup time (timing imports in 3.7)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 3.7 includes &lt;code&gt;-X importtime&lt;/code&gt; option that allows you to profile the time it takes to do all the imports.&lt;/li&gt;
&lt;li&gt;Way cool tool to help optimize the startup time of an application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.anpylar.com/"&gt;AnPyLar - The Python web front-end framework&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create web applications with elegance, simplicity and yet full power with Python and components&lt;/li&gt;
&lt;li&gt;MISSION: Empower all Python programmers to work not only on the back-end but also on the front-end with the same language of choice&lt;/li&gt;
&lt;li&gt;Features
&lt;ul&gt;
&lt;li&gt;Reactive programming and Promises&lt;/li&gt;
&lt;li&gt;Python standard formatting as templates&lt;/li&gt;
&lt;li&gt;reusable components&lt;/li&gt;
&lt;li&gt;Scoped styling for component&lt;/li&gt;
&lt;li&gt;Integrated routing engine&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://github.com/arogozhnikov/python3_with_pleasure/blob/master/README.md"&gt;&lt;strong&gt;Migrating to Python 3 with pleasure&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;“A short guide on features of Python 3 for data scientists”&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Quick tutorial through examples of &lt;code&gt;pathlib&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Type hinting and how cool it works with editors (PyCharm example shown)&lt;/li&gt;
&lt;li&gt;Adding runtime type enforcement for specific methods using &lt;a href="https://github.com/RussBaz/enforce"&gt;enforce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Using function annotations for units, as done in &lt;a href="http://docs.astropy.org/en/stable/units/quantity.html#functions-that-accept-quantities"&gt;astropy&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;Matrix multiplication with &lt;code&gt;@&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Globbing with &lt;code&gt;**&lt;/code&gt;. 
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;found_images = glob.glob('/path/**/*.jpg', recursive=True)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Also … underscores in numeric literals, f-strings, true division with &lt;code&gt;/&lt;/code&gt;, integer division with &lt;code&gt;//&lt;/code&gt;, and lots of more fun goodies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://engineering.ticketea.com/ticketea-migrates-python3-in-two-weeks/"&gt;&lt;strong&gt;Moving to Python 3&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Many of these issues were corrected just by running 2to3, which not only fixed many of the compatibility issues
&lt;ul&gt;
&lt;li&gt;Outdated external libraries which needed to be updated to newer versions featuring Python 3 compatibility
&lt;code&gt;basestring&lt;/code&gt; to &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;urlparse&lt;/code&gt; to &lt;code&gt;urllib.urlparse&lt;/code&gt; and similar major changes&lt;/li&gt;
&lt;li&gt;Dictionary change like &lt;code&gt;iteritems()&lt;/code&gt; to &lt;code&gt;items()&lt;/code&gt;, or &lt;code&gt;.items()&lt;/code&gt; now returning a view.&lt;/li&gt;
&lt;li&gt;Things that weren't needed anymore, like Django's &lt;code&gt;force_unicode&lt;/code&gt; or &lt;code&gt;__future__&lt;/code&gt; library tools.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Once we finished working on the "low-hanging fruits", the next step was to run Aphrodite's test suite and achieve zero errors.&lt;/li&gt;
&lt;li&gt;Lessons learned
&lt;ul&gt;
&lt;li&gt;Code coverage was originally around 70%,&lt;/li&gt;
&lt;li&gt;Keeping the Python 3 branch up to date with master&lt;/li&gt;
&lt;li&gt;A non-trivial feature was delivered during the migration (via feature branch)&lt;/li&gt;
&lt;li&gt;The pickle protocol version in python 3 can be higher than the highest available in Python 2.7. So we needed to add versioning to our Django caches&lt;/li&gt;
&lt;li&gt;Each modified file had to comply with flake8 linting rules&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Afrodita is currently running on Google App Engine Flexible, and one of the features our team loves with is traffic splitting&lt;/li&gt;
&lt;li&gt;With this feature, we can do &lt;a href="https://martinfowler.com/bliki/CanaryRelease.html"&gt;canary releases&lt;/a&gt; with ease: We just deploy our new version of the service, and start redirecting small amounts of traffic traffic while we monitor for unexpected errors.&lt;/li&gt;
&lt;li&gt;After some minor bugfixes, we could bring the traffic of the Python 3.6 version to 100% with confidence. We also had the old version available for instant rollback, thanks to how parallel versions and traffic splitting work in GAE flexible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Our news&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Brian:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upcoming webinar: &lt;a href="https://blog.jetbrains.com/pycharm/2018/02/webinar-productive-pytest-with-pycharm-with-brian-okken/"&gt;Productive pytest with Pycharm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Michael:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My GUI example: &lt;a href="https://github.com/mikeckennedy/pyramid-web-builder-python-gui"&gt;https://github.com/mikeckennedy/pyramid-web-builder-python-gui&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#66 Wait, NoSQL with ACID and transactions?</title><link>https://pythonbytes.fm/episodes/show/66/wait-nosql-with-acid-and-transactions</link><guid>3c1da96e-464d-45d1-8d6f-a8f7eef4727b</guid><enclosure url="https://pythonbytes.fm/episodes/download/66/wait-nosql-with-acid-and-transactions.mp3" length="218" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 23 Feb 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Wait, NoSQL with ACID and transactions?</itunes:title><itunes:episode>66</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:21:43</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Rollbar: &lt;strong&gt;&lt;a href="https://pythonbytes.fm/rollbar"&gt;https://pythonbytes.fm/rollbar&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://realpython.com/blog/python/python3-object-oriented-programming/"&gt;&lt;strong&gt;Object-Oriented Programming (OOP) in Python 3&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Real Python&lt;/li&gt;
&lt;li&gt;Nice modern introduction to classes, inheritance, and OOP.&lt;/li&gt;
&lt;li&gt;Classes, objects, attributes, instances, and inheritance.&lt;/li&gt;
&lt;li&gt;One gotcha not mentioned
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;__init__()&lt;/code&gt; method of a base class is not called automatically by derived classes. If you override it, you need to call &lt;code&gt;super().__init__()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Also, check out &lt;a href="http://www.attrs.org"&gt;attrs&lt;/a&gt; for much of our OOP needs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://github.com/SimonBiggs/scriptedforms"&gt;&lt;strong&gt;ScriptedForms&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quickly create live-update GUIs for Python packages using Markdown and a few custom HTML elements. &lt;/li&gt;
&lt;li&gt;Just write in markdown + variables / UI types&lt;/li&gt;
&lt;li&gt;Based on Jupyter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://www.mongodb.com/blog/post/multi-document-transactions-in-mongodb"&gt;&lt;strong&gt;MongoDB to add multi-document transactions and ACID&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mind blown. Didn’t see this coming&lt;/li&gt;
&lt;li&gt;“MongoDB 4.0 will add support for multi-document transactions, making it the only database to combine the speed, flexibility, and power of the document model with ACID data integrity guarantees. Through snapshot isolation, transactions provide a globally consistent view of data, and enforce all-or-nothing execution to maintain data integrity.”&lt;/li&gt;
&lt;li&gt;Due out this summer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://blog.ionelmc.ro/2014/06/25/python-packaging-pitfalls/"&gt;&lt;strong&gt;Python packaging pitfalls&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just a short list of packaging blunders
&lt;ul&gt;
&lt;li&gt;Forgetting to clean the build dir&lt;/li&gt;
&lt;li&gt;Forgetting to specify package data&lt;/li&gt;
&lt;li&gt;Fine grained MANIFEST.in&lt;/li&gt;
&lt;li&gt;Using package_data, or worse: fine grained package_data&lt;/li&gt;
&lt;li&gt;Listing excludes/prunes before includes/grafts&lt;/li&gt;
&lt;li&gt;Hardcoding packages list in setup.py&lt;/li&gt;
&lt;li&gt;Hardcoding py_modules list in setup.py&lt;/li&gt;
&lt;li&gt;Importing your package in setup.py&lt;/li&gt;
&lt;li&gt;Importing unavailable tools in setup.py&lt;/li&gt;
&lt;li&gt;Messing with the environment&lt;/li&gt;
&lt;li&gt;Your tests do not test the installed code&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://jvns.ca/blog/2017/03/20/blogging-principles/"&gt;&lt;strong&gt;Blogging principles&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Julia Evans @b0rk&lt;/li&gt;
&lt;li&gt;Be honest about what you know&lt;/li&gt;
&lt;li&gt;Try not to write anything too long.
&lt;ul&gt;
&lt;li&gt;(My note: don’t shy away from long tutorials. Just don’t only do long stuff)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Be positive.&lt;/li&gt;
&lt;li&gt;Write for the past you. &lt;/li&gt;
&lt;li&gt;Stick with your own experience.&lt;/li&gt;
&lt;li&gt;It’s ok if not everyone likes it
&lt;ul&gt;
&lt;li&gt;Don’t try to keep one upping yourself.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://github.com/pypa/pipenv"&gt;&lt;strong&gt;pipenv is officially official&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pipenv — the officially recommended Python packaging tool from Python.org, free (as in freedom).
&lt;ul&gt;
&lt;li&gt;Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. &lt;/li&gt;
&lt;li&gt;Windows is a first–class citizen, in our world.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Benefits?
&lt;ul&gt;
&lt;li&gt;It automatically creates and manages a virtualenv for your projects&lt;/li&gt;
&lt;li&gt;adds/removes packages from your Pipfile as you install/uninstall packages&lt;/li&gt;
&lt;li&gt;generates the ever–important Pipfile.lock, which is used to produce deterministic builds.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow up and other news&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Productive pytest with PyCharm webinar was recorded Thursday 22nd of Feb. &lt;/li&gt;
&lt;li&gt;Will be available here: &lt;a href="https://www.jetbrains.com/community/webinars/"&gt;&lt;strong&gt;https://www.jetbrains.com/community/webinars/&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Michael:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Embed Python in Unreal Engine 4 &lt;strong&gt;&lt;a href="https://github.com/20tab/UnrealEnginePython"&gt;https://github.com/20tab/UnrealEnginePython&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Pandas documentation sprint &lt;strong&gt;&lt;a href="https://python-sprints.github.io/pandas"&gt;https://python-sprints.github.io/pandas&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#67 Result of moving Python to Github</title><link>https://pythonbytes.fm/episodes/show/67/result-of-moving-python-to-github</link><guid>7b7011ab-f9cb-4e2d-abd8-f55a76d66437</guid><enclosure url="https://pythonbytes.fm/episodes/download/67/result-of-moving-python-to-github.mp3" length="218" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 01 Mar 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Result of moving Python to Github</itunes:title><itunes:episode>67</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:21:56</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean! &lt;a href="http://do.co/python"&gt;http://&lt;strong&gt;do.co/python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="http://pythonforundergradengineers.com/how-i-built-this-site-1.html"&gt;&lt;strong&gt;Building a blog with Pelican&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We did cover Pelican in &lt;a href="https://pythonbytes.fm/episodes/show/38/hacking-classic-nintendo-games-with-python"&gt;episode 38&lt;/a&gt;, but this is a nice tutorial in 7 parts on building a blog.&lt;/li&gt;
&lt;li&gt;Peter Kazarinoff, &lt;a href="https://twitter.com/pkazarinoff"&gt;@pkazarinoff&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Nice blog with a focus on engineering students.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Starts with installing Python and git and some other tools.&lt;/li&gt;
&lt;li&gt;Step by step, every action to get a a blog up as a static site hosted on github pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="http://notifiers.readthedocs.io/en/latest/index.html"&gt;&lt;strong&gt;Notifiers&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Got an app or service and you want to enable your users to use notifications with their provider of choice? &lt;/li&gt;
&lt;li&gt;Working on a script and you want to receive notification based on its output? &lt;/li&gt;
&lt;li&gt;A one stop shop for all notification providers with a unified and simple interface.&lt;/li&gt;
&lt;li&gt;A unified interface means that you already support any new providers that will be added, no more work needed!&lt;/li&gt;
&lt;li&gt;Some providers
&lt;ul&gt;
&lt;li&gt;Slack&lt;/li&gt;
&lt;li&gt;Gmail&lt;/li&gt;
&lt;li&gt;Telegram&lt;/li&gt;
&lt;li&gt;Gitter&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python 3 only&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://krzysztofzuraw.com/blog/2016/makefiles-in-python-projects.html"&gt;&lt;strong&gt;Using Makefiles in Python projects&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Krzysztof Żuraw, &lt;a href="https://twitter.com/krzysztof_zuraw"&gt;@krzysztof_zuraw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Alerted to this article from kidpixo, &lt;a href="https://twitter.com/kidpixo"&gt;@kidpixo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We don’t usually think of Makefiles and Python together, but they can be a handy place to keep common scripts for a project all in one place.&lt;/li&gt;
&lt;li&gt;This article is a nice gentle intro to Makefiles and shows some cool uses:
&lt;ul&gt;
&lt;li&gt;cleaning out .pyc files&lt;/li&gt;
&lt;li&gt;cleaning out egg directories&lt;/li&gt;
&lt;li&gt;linting&lt;/li&gt;
&lt;li&gt;running tests with flags&lt;/li&gt;
&lt;li&gt;starting a test server&lt;/li&gt;
&lt;li&gt;deploying&lt;/li&gt;
&lt;li&gt;sorting import files&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.reddit.com/r/Python/comments/7qt4x3/result_of_moving_python_to_github/"&gt;&lt;strong&gt;Result of moving Python to Github&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See the graph linked in the post&lt;/li&gt;
&lt;li&gt;A couple of quick numbers (including PRs too) from 2017 compared to 2016:
&lt;ul&gt;
&lt;li&gt;the number of commit has increased by 190%&lt;/li&gt;
&lt;li&gt;inserted lines of code has increased by 140%&lt;/li&gt;
&lt;li&gt;number of unique contributors has increased by 1300%&lt;/li&gt;
&lt;li&gt;number of returning contributors has increased by 900%&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;One comment was: “Personally, I would like them moving to Gitlab instead, but still good news.” I tend to disagree.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://dev.to/mauricehayward/-self-deprecation-needs-to---46fo"&gt;&lt;strong&gt;Self-Deprecation Needs to&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://dev.to/mauricehayward/-self-deprecation-needs-to---46fo"&gt;&lt;strong&gt;Stop&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maurice Hayward, &lt;a href="https://twitter.com/maurice_hayward"&gt;&lt;strong&gt;@&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://twitter.com/maurice_hayward"&gt;maurice_hayward&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Inspired by some tweets by Stephanie Hurlburt, &lt;a href="https://twitter.com/sehurlburt"&gt;&lt;strong&gt;@&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://twitter.com/sehurlburt"&gt;sehurlburt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stop saying these words when describing yourself or your accomplishments.&lt;/strong&gt; 
These words are now under BAN:
"My project is..."
    - very small/basic/simple
    - not that good
    - a thing I wrote
    - just by a newbie
    - something I didn't spend a lot of time/effort on
    - silly
    - not that useful
Just state the topic and let others be the judge.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Really think about the value you bring, then let everybody know.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Be Proud of Yourself!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://hackernoon.com/5-speed-improvements-in-python-3-7-1b39d1581d86"&gt;&lt;strong&gt;5 speed improvements in Python 3.7&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Calling methods faster (maybe)&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;Python 3.7 adds 2 new Opcodes, LOAD_METHOD and CALL_METHOD for when the compiler sees x.method(...) it uses these new Opcodes.&lt;/li&gt;
&lt;li&gt;Bound methods with no arguments are now faster&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;str.find() is faster for some characters&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;Some unicode characters have an unfortunate issue when scanning a string for occurrences using str.find(x), seeing up to 25x slow down.&lt;/li&gt;
&lt;li&gt;These are still slower, but now 3x slower than ASCII characters instead of 25x!&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;os.fwalk is 2x faster&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regular expressions are faster&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;A change was made in Python 3.6 which slowed down this call when flags were passed which were integers. Python 3.7 “fixes” the slowdown but is still not as fast as Python 3.5&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Regular expressions are faster for case-insensitive matching&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;The speed improvement is significant, if you’re matching ASCII characters you can see up to a 20x improvements in matching time since it’s now doing a lookup instead of running lower() over each character.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Follow up and other news&lt;/p&gt;

&lt;p&gt;Brian: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pyfound.blogspot.com/2018/02/python-package-maintainers-help-test.html"&gt;Python package maintainers, help test the new PyPI!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jetbrains.com/pycharm/2018/02/webinar-recording-productive-pytest-with-pycharm/"&gt;pytest/pycharm webinar is up&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#68 Python notebooks galore!</title><link>https://pythonbytes.fm/episodes/show/68/python-notebooks-galore</link><guid>d8fea18a-f9ed-4fdf-a577-e97dce2fc9d5</guid><enclosure url="https://pythonbytes.fm/episodes/download/68/python-notebooks-galore.mp3" length="218" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Tue, 06 Mar 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Python notebooks galore!</itunes:title><itunes:episode>68</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:19:09</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean! &lt;strong&gt;&lt;a href="http://do.co/python"&gt;http://do.co/python&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://github.com/chriskuehl/dumb-pypi"&gt;&lt;strong&gt;dumb-pypi&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This takes some fiddling with and trial and error. I definitely need to write up my experiences with this as a blog post.&lt;/li&gt;
&lt;li&gt;Combine with &lt;code&gt;pip download&lt;/code&gt; (covered in &lt;a href="https://pythonbytes.fm/episodes/show/24/i-have-a-local-pypi-server-and-so-do-you"&gt;episode 24&lt;/a&gt;), this makes it super easy to create a static locally hosted pypi server, either for all of your packages, or for your proprietary packages.&lt;/li&gt;
&lt;li&gt;Roughly:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    pip download -d my-packages-dir [HTML_REMOVED]
    ls my-packages-dir &amp;gt; package-list.txt
    dumb-pypi --package-list my-packages-dir \
              --packages-url [HTML_REMOVED] \
              --output-dir my-pypi
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Now add something like this to requirements.txt or pip commands:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--trusted-host [HTML_REMOVED] -i http://[HTML_REMOVED]/my-pypi/simple&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://github.com/kennethreitz/requests-html"&gt;&lt;strong&gt;Requests-HTML: HTML Parsing for Humans&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This library intends to make parsing HTML (e.g. scraping the web) as simple and intuitive as possible.&lt;/li&gt;
&lt;li&gt;When using this library you automatically get:
&lt;ul&gt;
&lt;li&gt;Full JavaScript support!&lt;/li&gt;
&lt;li&gt;CSS Selectors (a.k.a jQuery-style, thanks to PyQuery).&lt;/li&gt;
&lt;li&gt;XPath Selectors, for the faint at heart.&lt;/li&gt;
&lt;li&gt;Mocked user-agent (like a real web browser).&lt;/li&gt;
&lt;li&gt;Automatic following of redirects.&lt;/li&gt;
&lt;li&gt;Connection–pooling and cookie persistence.&lt;/li&gt;
&lt;li&gt;The Requests experience you know and love, with magical parsing abilities&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt;  &lt;a href="https://www.twilio.com/blog/2018/02/phone-number-forward-mask-python-flask.html"&gt;&lt;strong&gt;A phone number proxy&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Naomi Pentrel, &lt;a href="http://twitter.com/naomi_pen"&gt;@naomi_pen&lt;/a&gt; on twilio blog&lt;/li&gt;
&lt;li&gt;Set up a phone number that you can share for temporary events to send and receive texts that get forwarded to your actual number.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4: Notebooks galore part 1:&lt;/strong&gt; &lt;a href="https://datalore.io/"&gt;&lt;strong&gt;Datalore&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In cloud and ready to go&lt;/li&gt;
&lt;li&gt;Intelligent code editor&lt;/li&gt;
&lt;li&gt;Out-of-the-box Python tools&lt;/li&gt;
&lt;li&gt;Collaboration&lt;/li&gt;
&lt;li&gt;Integrated version control&lt;/li&gt;
&lt;li&gt;Incremental calculations: Improve and adjust models without hustling with additional recalculations. Datalore follows dependencies between multiple computations and automatically applies relevant recalculations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://github.com/hchasestevens/bellybutton"&gt;&lt;strong&gt;bellybutton&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Chase Stevens, &lt;a href="https://twitter.com/hchasestevens"&gt;@hchasestevens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tool for creating personal static analysis/style tools like &lt;code&gt;pycodestyle&lt;/code&gt;, &lt;code&gt;pylint&lt;/code&gt;, and &lt;code&gt;flake8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Teams often have some of their own style requirements that can’t be expressed as &lt;code&gt;flake8&lt;/code&gt; flags and exceptions.&lt;/li&gt;
&lt;li&gt;Example: deprecating internal library functions and catching that by the linter. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:Notebooks galore part 2&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/Python/comments/7xwotz/python_36_jupyter_notebook_on_azure/?st=JDT0O9LI&amp;amp;sh=0c41688d"&gt;Python 3.6 Jupyter Notebook on Azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://colab.research.google.com/notebooks/welcome.ipynb"&gt;Google Colaboratory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.jupyter.org/jupyterlab-is-ready-for-users-5a6f039b8906"&gt;JupyterLab is Ready for Users&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;JupyterLab is an interactive development environment for working with notebooks, code and data. Most importantly, JupyterLab has full support for Jupyter notebooks. Additionally, JupyterLab enables you to use text editors, terminals, data file viewers, and other custom components side by side with notebooks in a tabbed work area.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;you can pip install python packages within python code itself. 
&lt;ul&gt;
&lt;li&gt;Super useful in situation #1 when you need a package that's not included but you don't have access to the shell. &lt;/li&gt;
&lt;li&gt;If you need to upgrade a package. For example the Pandas version is a little old on Azure, so you can upgrade by simply running:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    import pip
    pip.main(['install', 'pandas', '--upgrade'])
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>#69 Digging into StackOverflow's 2018 survey results</title><link>https://pythonbytes.fm/episodes/show/69/digging-into-stackoverflow-s-2018-survey-results</link><guid>52020cca-f332-42ef-b430-71fedc9c20b4</guid><enclosure url="https://pythonbytes.fm/episodes/download/69/digging-into-stackoverflow-s-2018-survey-results.mp3" length="10895815" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Sun, 18 Mar 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Digging into StackOverflow's 2018 survey results</itunes:title><itunes:episode>69</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:24:00</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;h1&gt;Python Bytes 69&lt;/h1&gt;

&lt;p&gt;Sponsored by DigitalOcean: &lt;strong&gt;&lt;a href="https://do.co/python"&gt;https://do.co/python&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://github.com/minodes/pynb"&gt;&lt;strong&gt;pynb: Jupyter Notebooks as plain Python code with embedded Markdown text&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pynb&lt;/code&gt; lets you manage Jupyter notebooks as plain Python code with embedded Markdown text, enabling:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Python development environment&lt;/strong&gt;: Use your preferred IDE/editor, ensure style compliance, navigate, refactor, and test your notebooks as regular Python code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Version control&lt;/strong&gt;: Track changes, review pull requests and merge conflicts as with regular Python code. The cell outputs are stored separately and don't interfere with versioning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistent execution state&lt;/strong&gt;: Never lose track again of the execution state. Notebooks are always executed from clean iPython kernels and the cell execution is cached.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You also get parameterized notebooks with batch and programmatic execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.digitaltrends.com/computing/microsoft-quantum-computing-q-available-macos-linux/"&gt;&lt;strong&gt;Microsoft’s quantum computing language is now available for&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://www.digitaltrends.com/computing/microsoft-quantum-computing-q-available-macos-linux/"&gt;&lt;strong&gt;m&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://www.digitaltrends.com/computing/microsoft-quantum-computing-q-available-macos-linux/"&gt;&lt;strong&gt;acOS&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New language Q# (&lt;a href="https://docs.microsoft.com/en-us/quantum/quantum-qr-statements?view=qsharp-preview"&gt;snippet examples&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;How do you run a quantum app?&lt;/li&gt;
&lt;li&gt;Based on topological qubits and quantum computers&lt;/li&gt;
&lt;li&gt;Now out on macOS &amp;amp; Linux&lt;/li&gt;
&lt;li&gt;Need to use VS Code (and vs code extension)&lt;/li&gt;
&lt;li&gt;Comes with Python interoperability (only other language)&lt;/li&gt;
&lt;li&gt;Also in Jupyter&lt;/li&gt;
&lt;li&gt;Some real-world examples. See &lt;a href="https://www.wired.co.uk/article/quantum-computing-explained"&gt;this Wired article&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.dwavesys.com/home"&gt;D-wave&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IBM is making quantum computers commercially available. Since 2016, it has offered researchers the chance to run experiments on a five-qubit quantum computer via the cloud and at the end of 2017 started making its 20-qubit system available online too.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3: pytest talk in Spanish&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"pytest: recommendations, basic packages for testing in Python and Django"&lt;/li&gt;
&lt;li&gt;By A. Vallbona (&lt;a href="https://twitter.com/avallbona"&gt;@avallbona&lt;/a&gt;) From PyConES 2017&lt;/li&gt;
&lt;li&gt;with  &lt;a href="http://talks.apsl.io/testing-pycones-2017"&gt;English slides&lt;/a&gt;, and &lt;a href="https://www.youtube.com/watch?v=K20GeR-lXDk&amp;amp;feature=youtu.be"&gt;video in Spanish&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some of the topics covered:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pytest-django&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;model-mommy&lt;/code&gt; to easily create fixtures based on django models&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pytest-lazy-fixture&lt;/code&gt; allows the use the fixtures as parameters to parameterize&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pytest-mock&lt;/code&gt;, &lt;code&gt;pytest-cov&lt;/code&gt;, &lt;code&gt;pytest-flake8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;freezegun&lt;/code&gt; to helps us to "freeze" time&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eradicate&lt;/code&gt; to eliminate commented code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pytest-xdist&lt;/code&gt; to run tests in parallel&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bonus pytest topic:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/latest/reference.html"&gt;pytest.org just added a Reference page&lt;/a&gt;, a full reference to pytest’s API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://insights.stackoverflow.com/survey/2018/"&gt;&lt;strong&gt;StackOverflow Developer Survey Results 2018&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sample size: Over 100,000 developers&lt;/li&gt;
&lt;li&gt;55% contribute to open source&lt;/li&gt;
&lt;li&gt;64% have CS degrees&lt;/li&gt;
&lt;li&gt;Experience and Belonging
&lt;ul&gt;
&lt;li&gt;Connection to other devs (increasing over time)&lt;/li&gt;
&lt;li&gt;Competing with peers (decreasing over time)&lt;/li&gt;
&lt;li&gt;Not as good as my peers (decreasing over time)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;How Much Time Do Developers Spend on a Computer? Most: 9-12 hours&lt;/li&gt;
&lt;li&gt;Python beats C# in usage for the first time&lt;/li&gt;
&lt;li&gt;Languages:
&lt;ul&gt;
&lt;li&gt;Most loved: #1 Rust, #2 Kotlin, #3 Python&lt;/li&gt;
&lt;li&gt;Most dreaded: VB 6 and CoffeeScript&lt;/li&gt;
&lt;li&gt;Most wanted: #1 Python 25%, #JavaScript 19%, #3 Go 16%&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Databases:
&lt;ul&gt;
&lt;li&gt;Loved: PostgreSQL&lt;/li&gt;
&lt;li&gt;Dreaded: IBM Db2, Memcached, and Oracle&lt;/li&gt;
&lt;li&gt;Most wanted: MongoDB&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Editor: VS Code&lt;/li&gt;
&lt;li&gt;Dev OSes:
&lt;ul&gt;
&lt;li&gt;Windows: 49%&lt;/li&gt;
&lt;li&gt;macOS: 27%&lt;/li&gt;
&lt;li&gt;Linux: 23%&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://pypi.python.org/pypi/demoshell/"&gt;&lt;strong&gt;demoshell&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/doughellmann"&gt;&lt;strong&gt;@&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://twitter.com/doughellmann"&gt;doughellmann&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Doug Hellman (&lt;a href="https://twitter.com/doughellmann"&gt;&lt;strong&gt;@&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://twitter.com/doughellmann"&gt;doughellmann&lt;/a&gt;) &lt;a href="https://doughellmann.com/blog/2018/03/11/demoshell-0-1-0/"&gt;announces demoshell&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Inspired by a tweet from &lt;a href="https://twitter.com/genehack"&gt;@genehack&lt;/a&gt; “Hey, speakers, if you're doing live demos in a shell, clear the screen after &lt;em&gt;every&lt;/em&gt; &lt;em&gt;command&lt;/em&gt; to get the prompt back at the top, so folks in the back can see what you're doing.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;demoshell is a simplified shell for live demonstrations. It always shows the command prompt at the top of the screen and pushes command output down instead of letting it scroll up.&lt;/li&gt;
&lt;li&gt;In his words: “I put it up there to start a discussion. I’d be happy if a bunch of people showed up and wanted to take it over and actually turn it into something useful. I invite people to give it a look. And warn them that too much interest is going to be met with commit privileges on the repo. :-)”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6: Clear statement on Python 2 EOL&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Will there be a period where Py2.7 is in security-only status before hitting EOL?&lt;/li&gt;
&lt;li&gt;via Nicola Iarocci‏ &lt;a href="https://twitter.com/nicolaiarocci"&gt;@nicolaiarocci&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Yay, @gvanrossum makes it adamantly clear: “Let's not play games with semantics. The way I see the situation for &lt;strong&gt;2.7 is that EOL is January 1st, 2020&lt;/strong&gt;, and there will be no updates, &lt;strong&gt;not even source-only security patches&lt;/strong&gt;, after that date.” &lt;strong&gt;https://buff.ly/2pbZmBZ&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Support (from the core devs, the PSF, and python.org) stops completely on that date.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Follow up and other news&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Eve: MongoDB &amp;amp; Flask-backed RESTful APIs course is out!
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://training.talkpython.fm/courses/explore_eve/eve-building-restful-mongodb-backed-apis-course"&gt;https://training.talkpython.fm/courses/explore_eve/eve-building-restful-mongodb-backed-apis-course&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Shoutout to everyone I met at &lt;a href="https://2018.pycon.sk/en/"&gt;PyCon Slovakia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A couple of recent episodes on Test &amp;amp; Code focusing on project test development:
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://testandcode.com/37"&gt;What tests to write first&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://testandcode.com/38"&gt;Prioritize software tests with RCRCRC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Upcoming topics will include beefing up test coverage with things like equivalence partitioning, boundary value analysis, state transition diagrams, state tables, negative testing, …&lt;/li&gt;
&lt;li&gt;Also learning a lot about developing an open source project and all the tools surrounding that. I’ll discuss those topics in episodes as well.&lt;/li&gt;
&lt;li&gt;Project used in both episodes, &lt;a href="https://github.com/okken/cards"&gt;cards : a project task tracking / todo list app&lt;/a&gt; that will be expanded as I go along talking about different test and software development topics.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#70 Have you seen my log? It's cute!</title><link>https://pythonbytes.fm/episodes/show/70/have-you-seen-my-log-it-s-cute</link><guid>4dbe914e-aa3d-4f0f-b2a2-97395704b323</guid><enclosure url="https://pythonbytes.fm/episodes/download/70/have-you-seen-my-log-it-s-cute.mp3" length="7188429" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 23 Mar 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Have you seen my log? It's cute!</itunes:title><itunes:episode>70</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:15:51</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://do.co/python"&gt;&lt;strong&gt;do.co/python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://generator.kpavlovsky.pro/"&gt;&lt;strong&gt;Online CookieCutter Generator&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Get a ZIP-archive with project by filling out the form.”&lt;/li&gt;
&lt;li&gt;By &lt;a href="https://twitter.com/kpavlovsky_pro"&gt;@kpavlovsky_pro&lt;/a&gt; Konstantin Pavlovsky&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://github.com/busimus/cutelog"&gt;&lt;strong&gt;cutelog – GUI for Python's logging module&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is a graphical log viewer for Python's standard logging module. &lt;/li&gt;
&lt;li&gt;Features
&lt;ul&gt;
&lt;li&gt;Allows any number of simultaneous connections&lt;/li&gt;
&lt;li&gt;Fully customizable look of log levels and columns&lt;/li&gt;
&lt;li&gt;Filtering based on level and name of the logger, as well as filtering by searching&lt;/li&gt;
&lt;li&gt;Search through all records or only through filtered ones&lt;/li&gt;
&lt;li&gt;View exception tracebacks or messages in a separate window&lt;/li&gt;
&lt;li&gt;Dark theme (with its own set of colors for levels)&lt;/li&gt;
&lt;li&gt;Pop tabs out of the window, merge records of multiple tabs into one&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Based on PyQt5 speaking of GUIs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://wagtail.io/blog/wagtail-2/"&gt;&lt;strong&gt;wagtail 2.0&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Wagtail is a content management system built on Django. It’s focused on user experience, and offers precise control for designers and developers.”&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.wagtail.io/en/v2.0/getting_started/the_zen_of_wagtail.html"&gt;The Zen of Wagtail&lt;/a&gt; - nice philosophy of the project page to let you know if this kind of thing is right for you and your project.&lt;/li&gt;
&lt;li&gt;In 2.0
&lt;ul&gt;
&lt;li&gt;a new text editor&lt;/li&gt;
&lt;li&gt;Django 2 support &lt;/li&gt;
&lt;li&gt;better scheduled publishing&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.wagtail.io/en/v2.0/getting_started/index.html"&gt;wagtail docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://madewithwagtail.org/"&gt;gallery of sites made with wagtail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="http://charlesleifer.com/blog/peewee-3-0-released/"&gt;&lt;strong&gt;peewee 3.0 is out&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Peewee is a simple and small ORM. It has few (but expressive) concepts, making it easy to learn and intuitive to use.
&lt;ul&gt;
&lt;li&gt;A small, expressive ORM&lt;/li&gt;
&lt;li&gt;Written in python with support for versions 2.7+ and 3.4+ (developed with 3.6)&lt;/li&gt;
&lt;li&gt;Built-in support for SQLite, MySQL and Postgresql.&lt;/li&gt;
&lt;li&gt;Numerous extensions available (postgres hstore/json/arrays, sqlite full-text-search, schema migrations, and much more).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Although this was pretty much a complete rewrite of the 2.x codebase, I have tried to maintain backwards-compatibility for the public APIs.&lt;/li&gt;
&lt;li&gt;Exciting because of its async support via &lt;strong&gt;peewee-async&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;peewee-async&lt;/strong&gt; is a library providing asynchronous interface powered by &lt;a href="https://docs.python.org/3/library/asyncio.html"&gt;asyncio&lt;/a&gt; for &lt;a href="https://github.com/coleifer/peewee"&gt;peewee&lt;/a&gt; ORM.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_allow_sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Not bad. Watch this, I&amp;#39;m async!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;all_objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestModel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://github.com/zotroneneis/machine_learning_basics"&gt;&lt;strong&gt;Machine Learning Basics&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Plain python implementations of basic machine learning algorithms”&lt;/li&gt;
&lt;li&gt;From the repo:
&lt;ul&gt;
&lt;li&gt;A repository of implementations of basic machine learning algorithms in plain Python (Python Version 3.6+). All algorithms are implemented from scratch without using additional machine learning libraries. The intention of these notebooks is to provide a basic understanding of the algorithms and their underlying structure, not to provide the most efficient implementations.
&lt;ul&gt;
&lt;li&gt;Linear Regression&lt;/li&gt;
&lt;li&gt;Logistic Regression&lt;/li&gt;
&lt;li&gt;Perceptron&lt;/li&gt;
&lt;li&gt;k-nearest-neighbor&lt;/li&gt;
&lt;li&gt;k-Means clustering&lt;/li&gt;
&lt;li&gt;Simple neural network with one hidden layer&lt;/li&gt;
&lt;li&gt;Multinomial Logistic Regression&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="http://docs.python-cerberus.org/en/stable/"&gt;&lt;strong&gt;Cerberus&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cerberus provides powerful yet simple and lightweight data validation functionality out of the box&lt;/li&gt;
&lt;li&gt;designed to be easily extensible, allowing for custom validation&lt;/li&gt;
&lt;li&gt;Origin of the name: CERBERUS, n. The watch-dog of Hades, whose duty it was to guard the entrance;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;integer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;min&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span class="n"&amp;gt;document&amp;lt;/span&amp;gt; &amp;lt;span class="o"&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class="p"&amp;gt;{&amp;lt;/span&amp;gt;&amp;lt;span class="s1"&amp;gt;&amp;amp;#39;name&amp;amp;#39;&amp;lt;/span&amp;gt;&amp;lt;span class="p"&amp;gt;:&amp;lt;/span&amp;gt; &amp;lt;span class="s1"&amp;gt;&amp;amp;#39;Little Joe&amp;amp;#39;&amp;lt;/span&amp;gt;&amp;lt;span class="p"&amp;gt;,&amp;lt;/span&amp;gt; &amp;lt;span class="s1"&amp;gt;&amp;amp;#39;age&amp;amp;#39;&amp;lt;/span&amp;gt;&amp;lt;span class="p"&amp;gt;:&amp;lt;/span&amp;gt; &amp;lt;span class="mi"&amp;gt;5&amp;lt;/span&amp;gt;&amp;lt;span class="p"&amp;gt;}&amp;lt;/span&amp;gt;
&amp;lt;span class="n"&amp;gt;v&amp;lt;/span&amp;gt;&amp;lt;span class="o"&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span class="n"&amp;gt;validate&amp;lt;/span&amp;gt;&amp;lt;span class="p"&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class="n"&amp;gt;document&amp;lt;/span&amp;gt;&amp;lt;span class="p"&amp;gt;)&amp;lt;/span&amp;gt;  &amp;lt;span class="c1"&amp;gt;# False&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;  &lt;span class="c1"&gt;# {&amp;#39;age&amp;#39;: [&amp;#39;min value is 10&amp;#39;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Follow up and other news&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;#100DaysOfCode in Python course&lt;/strong&gt;: &lt;strong&gt;&lt;a href="https://talkpython.fm/100days"&gt;talkpython.fm/100days&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>#71 We can migrate to Python 3, careful please</title><link>https://pythonbytes.fm/episodes/show/71/we-can-migrate-to-python-3-careful-please</link><guid>db8d3bab-9430-4f10-9366-e68f49cb2a96</guid><enclosure url="https://pythonbytes.fm/episodes/download/71/we-can-migrate-to-python-3-careful-please.mp3" length="10443651" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 28 Mar 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>We can migrate to Python 3, careful please</itunes:title><itunes:episode>71</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:24:01</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;h1&gt;Python Bytes 71&lt;/h1&gt;

&lt;p&gt;Sponsored by DigitalOcean: &lt;strong&gt;&lt;a href="https://do.co/python"&gt;do.co/python&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Special guest: Trey Hunner (&lt;a href="https://twitter.com/treyhunner"&gt;&lt;strong&gt;@treyhunner&lt;/strong&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trey #1:&lt;/strong&gt; &lt;a href="https://portingguide.readthedocs.io/en/latest/"&gt;&lt;strong&gt;The Conservative Python 3 Porting Guide&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by &lt;a href="https://github.com/fedora-python/portingguide/graphs/contributors"&gt;various Red Hat folks&lt;/a&gt; mostly&lt;/li&gt;
&lt;li&gt;Python 2 is coming to the end of its life on January 1, 2020. Are you ready?&lt;/li&gt;
&lt;li&gt;This is one of the best guides I’ve found to porting your code from Python 2 to Python 3&lt;/li&gt;
&lt;li&gt;One of the issues with many of the Python 3 porting guides is that the old ones recommend dropping Python 2 support suddenly, which isn’t recommended anymore.&lt;/li&gt;
&lt;li&gt;I do wish this guide recommended the future library instead of python-modernize. They’re both great, but modernize is a little less focused on writing things the Python 3 way and a little more focused on just getting your code working in both 2 and 3.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://realpython.com/world-class-companies-using-python/"&gt;&lt;strong&gt;World-Class Software Companies That Use Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by &lt;a href="https://realpython.com/world-class-companies-using-python/#author"&gt;Jason Reynolds&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;While it’s easy to see how you can tinker with Python, you might be wondering how this translates to actual business and real world applications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Industrial Light and Magic&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;The studio has used Python in multiple other facets of their work. Developers use Python to track and audit pipeline functionality, maintaining a database of every image produced for each film.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;In the beginning, the founders of Google made the decision of “Python where we can, C++ where we must.”&lt;/li&gt;
&lt;li&gt;Currently powers YouTube among other things&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Facebook&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Ensures that the infrastructure of Facebook is able to scale efficiently&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Instagram&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;the Instagram engineering team boasted that they were &lt;a href="https://engineering.instagram.com/web-service-efficiency-at-instagram-with-python-4976d078e366"&gt;running the world’s largest deployment of the Django web framework, which is written entirely in Python&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Instagram’s engineering team has invested time and resources into keeping their Python deployment viable at the massive scale (&lt;a href="https://www.statista.com/statistics/253577/number-of-monthly-active-instagram-users/"&gt;~800 million monthly active users&lt;/a&gt;) they’re operating at.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=66XoCk79kjM"&gt;PyCon 2017 keynote talk&lt;/a&gt; by Lisa Guo and Hui Ding&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spotify&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;This music streaming giant is a &lt;a href="https://labs.spotify.com/2013/03/20/how-we-use-python-at-spotify/"&gt;huge proponent of Python&lt;/a&gt;, using the language primarily for data analysis and back end services. &lt;/li&gt;
&lt;li&gt;On the back end, there are a large number of services that all communicate over 0MQ, or &lt;a href="http://zguide.zeromq.org/page:all"&gt;ZeroMQ&lt;/a&gt;, an open source networking library and framework that is written in Python and C++(among other languages).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quora&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;choosing to use Python where they could because of its ease of writing and readability, and implemented C++ for the performance critical sections. &lt;/li&gt;
&lt;li&gt;They got around Python’s lack of typechecking by writing unit tests that accomplish much the same thing.&lt;/li&gt;
&lt;li&gt;Another key consideration for using Python was the existence of several good frameworks at the time including Django and Pylons. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Netflix&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Lots of infrastructure and ops work done via Python https://talkpython.fm/episodes/show/16/python-at-netflix&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dropbox&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Dropbox makes heavy use of Python&lt;/li&gt;
&lt;li&gt;Guido van Rossum works there!&lt;/li&gt;
&lt;li&gt;Lots of open source projects&lt;/li&gt;
&lt;li&gt;Client app in Python too&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reddit&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;This website had 542 million visitors every month across 2017, making it the fourth most visited website in the United States and seventh most visited in the world. &lt;/li&gt;
&lt;li&gt;In 2015, there were 73.15 million submissions and 82.54 billion pageviews. &lt;/li&gt;
&lt;li&gt;Behind it all, forming the software backbone, was Python.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Trey #3:&lt;/strong&gt; &lt;a href="https://www.youtube.com/watch?v=o9pEzgHorH0"&gt;&lt;strong&gt;Stop Writing Classes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by &lt;a href="https://twitter.com/jackdied"&gt;Jack Diederich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This is one of my favorite PyCon talks to recommend to folks switching to Python from other programming languages. I especially like to recommend this talk to folks moving to Python from Java and C++.&lt;/li&gt;
&lt;li&gt;This is kind of an old talk. It's from 2012, so it's from the days of Python 2 but everything in it is still &lt;em&gt;very applicable today&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;One of the great things about this talk is it doesn’t just show times that you should write functions instead of classes, it also shows an example or two of when classes really make sense.&lt;/li&gt;
&lt;li&gt;The big advice from this talk: if you have a class that only has two methods and one is the initializer, you probably need a function instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://pypi.org/"&gt;&lt;strong&gt;PyPi.org is alive&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the LONGest time, pypi has been run out of &lt;a href="http://pypi.python.org/pypi"&gt;http://pypi.python.org/pypi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Now the new version of pypi is out at pypi.org&lt;/li&gt;
&lt;li&gt;Rewritten in Pyramid&lt;/li&gt;
&lt;li&gt;Do you want to contribute? Now the barriers have come down&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://twitter.com/EWDurbin/status/974424840429080578"&gt;Tweet with graphs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Trey&lt;/strong&gt; &lt;strong&gt;#5:&lt;/strong&gt; &lt;a href="https://nedbatchelder.com/text/unipain.html"&gt;&lt;strong&gt;Pragmatic Unicode&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by &lt;a href="https://twitter.com/nedbat"&gt;Ned Batchelder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another PyCon 2012 talk that is still relevant today, though it does use quite a bit of Python 2 syntax&lt;/li&gt;
&lt;li&gt;Ned describes the unicode sandwich in this talk. Talks with good metaphors really help shape your mental model of a topic. This was the talk that helped me really understand the unicode vs bytes issue that Python 3 largely solves for us (or at least forces us to do so upfront).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://renesd.blogspot.com/2018/03/pygame-on-pypy-usable.html"&gt;&lt;strong&gt;pygame on pypy usable&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via René Dudfield&lt;/li&gt;
&lt;li&gt;0.5x to 30x the speed&lt;/li&gt;
&lt;li&gt;That is pygame (same one that runs on cpython), works on pypy through its C extension API&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;This is exciting because&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;pure python code being fast on pypy(after warmup), also mixed with the fast bits in C/asm.&lt;/li&gt;
&lt;li&gt;cpyext is getting faster in pypy. There is already work and discussion towards it being faster than CPython.&lt;/li&gt;
&lt;li&gt;maintaining one pygame code base is easier than maintaining several (pygame cffi/ctypes/cython, ...).&lt;/li&gt;
&lt;li&gt;with one code base it should be fast on both pygame, and pypy(in time).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Where it can be slower&lt;/strong&gt;: if you are going into C code for a lot of small operations. Like when using lots of pygame.Rect in a tight loop. This is because (currently) the cost of going from PyPy code into and out of CPython API code (like pygame) is a bit slow.&lt;/li&gt;
&lt;li&gt;Ray tracing in PyGame:
&lt;ul&gt;
&lt;li&gt;On PyPy - 18.6 seconds.&lt;/li&gt;
&lt;li&gt;On Python 2.7 - 9 minutes, 28.1 seconds (30x slower)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Follow up and other news&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael:&lt;/strong&gt;
&lt;strong&gt;#100DaysOfCode in Python course&lt;/strong&gt;: &lt;strong&gt;&lt;a href="https://talkpython.fm/100days"&gt;talkpython.fm/100days&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trey:&lt;/strong&gt; 
Python Morsels: &lt;strong&gt;&lt;a href="http://pythonmorsels.com"&gt;pythonmorsels.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>#72 New versioning: Episode 0.0.7.2 (with 72 releases)</title><link>https://pythonbytes.fm/episodes/show/72/new-versioning-episode-0.0.7.2-with-72-releases</link><guid>08463d77-0b65-49e3-91d5-b7a4a410449c</guid><enclosure url="https://pythonbytes.fm/episodes/download/72/new-versioning-episode-0.0.7.2-with-72-releases.mp3" length="10302499" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 05 Apr 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>New versioning: Episode 0.0.7.2 (with 72 releases)</itunes:title><itunes:episode>72</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:22:54</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Datadog: &lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.fm/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://0ver.org/"&gt;&lt;strong&gt;ZeroVer: 0-based Versioning&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Software's most popular versioning scheme!”&lt;/li&gt;
&lt;li&gt;“&lt;em&gt;Cutting-edge software versioning for minimalists”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;My favorite April Fools prank this year.
&lt;ul&gt;
&lt;li&gt;Calls out many popular projects for never reaching 1.0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;From the about page: 
&lt;ul&gt;
&lt;li&gt;“ZeroVer is the world's most popular software versioning convention, and the only one shown to harness the innovative power of zero. The benefits are innumerable and the effects on the software world are profound.”&lt;/li&gt;
&lt;li&gt;“Version 0.0.1 of ZeroVer was published by &lt;a href="https://github.com/mahmoud/"&gt;Mahmoud Hashemi&lt;/a&gt;, with help from Moshe, Mark, Kurt, and other patient collaborators, on 2018-04-01. ZeroVer is satire, &lt;a href="https://en.wikipedia.org/wiki/Poe%27s_law"&gt;please do not use it&lt;/a&gt;. We sincerely hope no project release schedules were harmed as a result of this humble attempt at programmer humor.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.infoq.com/news/2018/03/github-vulnerability-alerts-resp"&gt;&lt;strong&gt;GitHub Security Alerts Detected over Four Million Vulnerabilities&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Last year GitHub launched “GitHub security alerts”&lt;/li&gt;
&lt;li&gt;GitHub’s security alerts notify repository admins when library vulnerabilities from the Common Vulnerabilities and Exposures (CVEs) list are detected in their repositories. &lt;/li&gt;
&lt;li&gt;Nearly half of all displayed alerts are responded to within a week and the rate of vulnerabilities resolved in the first seven days has been about 30%. &lt;/li&gt;
&lt;li&gt;When that statistics is restricted to only repositories with recent contributions, i.e., contributions in the last 90 days, things look even brighter, GitHub says, with 98% of such repositories being patched in fewer than seven days. &lt;/li&gt;
&lt;li&gt;More than four million vulnerabilities in over 500,000 repositories have been reported.&lt;/li&gt;
&lt;li&gt;Security alerts are only currently supported for repositories written in Ruby or JavaScript, while support for Python is planned for 2018.&lt;/li&gt;
&lt;li&gt;I also recommend &lt;a href="http://pyup.io"&gt;pyup.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://dustingram.com/articles/2018/03/16/markdown-descriptions-on-pypi"&gt;&lt;strong&gt;Markdown Descriptions on PyPI&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dustin Ingram provides detailed steps on how to get this to work.&lt;/li&gt;
&lt;li&gt;README.md now supported by pypi.org
&lt;ul&gt;
&lt;li&gt;“Only &lt;a href="https://pypi.org/"&gt;https://pypi.org&lt;/a&gt; will correctly render your new Markdown description.&lt;/li&gt;
&lt;li&gt;Legacy PyPI (&lt;a href="http://pypi.python.org/"&gt;http://pypi.python.org/&lt;/a&gt;) will still render your description as plaintext, but don’t worry, &lt;a href="https://wiki.python.org/psf/WarehouseRoadmap"&gt;it’s going away real soon&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;And also,  &lt;a href="http://blog.jonparrott.com/github-flavored-markdown-on-pypi/"&gt;Github-Flavored Markdown Descriptions are supported&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;Another post, this one by Jon Wayne Parrot&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://itnext.io/performance-comparison-between-nginx-unit-and-uwsgi-python3-4511fc172a4c"&gt;&lt;strong&gt;Concurrency comparison between NGINX-unit and uWSGI&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;show performance of two web application servers 
&lt;ul&gt;
&lt;li&gt;nginx-unit (a new modern application web server)&lt;/li&gt;
&lt;li&gt;uWSGI (the best one application server)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;uWSGI and nginx-unit configured with 4 workers because test system has 4 cores.&lt;/li&gt;
&lt;li&gt;Effectively an empty “Hello world” Flask app&lt;/li&gt;
&lt;li&gt;Have a look at the pictures here: https://itnext.io/performance-comparison-between-nginx-unit-and-uwsgi-python3-4511fc172a4c&lt;/li&gt;
&lt;li&gt;Take away: I’m going to start paying attention to NGINX-unit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://opensource.com/article/18/3/loop-better-deeper-look-iteration-python"&gt;&lt;strong&gt;Loop better: A deeper look at iteration in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Trey Hunner&lt;/li&gt;
&lt;li&gt;Generators are a great way to loop, but have a few gotchas
&lt;ul&gt;
&lt;li&gt;Looping twice doesn’t work&lt;/li&gt;
&lt;li&gt;Containment checks muck up the generator “contents”.&lt;/li&gt;
&lt;li&gt;Unpacking has odd results.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;This article describes Python loops in detail and then applies that do describe why the gotchas act like they do.&lt;/li&gt;
&lt;li&gt;Covered:
&lt;ul&gt;
&lt;li&gt;iterators, iterables, sequences, generators&lt;/li&gt;
&lt;li&gt;the iterator protocol&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Reading this will make you a better programmer, but might hurt your head.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.bleepingcomputer.com/news/security/misconfigured-django-apps-are-exposing-secret-api-keys-database-passwords/"&gt;&lt;strong&gt;Misconfigured Django Apps Are Exposing Secret API Keys, Database Passwords&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Security researchers have been stumbling upon misconfigured Django applications that are exposing sensitive information such as API keys, server passwords, or AWS access tokens.&lt;/li&gt;
&lt;li&gt;He discovered 28,165 Django apps just this week where admins left debug mode enabled.&lt;/li&gt;
&lt;li&gt;Just by skimming through a few of the servers, the researcher found that the debug mode of many of these apps were exposing extremely sensitive information that would have allowed a malicious actor full access to the app owner's data. &lt;/li&gt;
&lt;li&gt;This is &lt;strong&gt;not a failure from Django's side&lt;/strong&gt;. My recommendation is to disable debugging mode when deploying the application to production.&lt;/li&gt;
&lt;li&gt;Security researcher Victor Gevers said some of the servers running Django apps have already been compromised.&lt;/li&gt;
&lt;li&gt;He found at least one compromised server, running the Weevely web shell. Some servers Gevers found leaking sensitive data belonged to various government agencies carrying out critical operations.&lt;/li&gt;
&lt;li&gt;Gevers said he started notifying servers owners about their leaky Django apps. "At this moment we have reported 1,822 servers," Gevers said. "143 were fixed or taken offline."&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Extra:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We covered wagtail on &lt;a href="https://pythonbytes.fm/70"&gt;episode 70&lt;/a&gt;. They are running &lt;a href="https://www.kickstarter.com/projects/noripyt/wagtails-first-hatch"&gt;a kickstarter campaign&lt;/a&gt; to get some new features out. There’s a video there.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#73 This podcast comes in any color you want, as long as it's black</title><link>https://pythonbytes.fm/episodes/show/73/this-podcast-comes-in-any-color-you-want-as-long-as-it-s-black</link><guid>e14d3f94-a4b1-4a78-bdd5-7dc13e4d07fc</guid><enclosure url="https://pythonbytes.fm/episodes/download/73/this-podcast-comes-in-any-color-you-want-as-long-as-it-s-black.mp3" length="8208388" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 12 Apr 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>This podcast comes in any color you want, as long as it's black</itunes:title><itunes:episode>73</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:18:35</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Datadog: &lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;fm&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="http://www.idiotinside.com/2017/08/19/set-theory-and-python-tips-tricks/"&gt;&lt;strong&gt;Set Theory and Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Let’s talk about sets, baby …” is what I have in my head while reading this.&lt;/li&gt;
&lt;li&gt;Great overview of set theory and how to use the set data type in Python.&lt;/li&gt;
&lt;li&gt;Covered:
&lt;ul&gt;
&lt;li&gt;Creating sets&lt;/li&gt;
&lt;li&gt;Checking for containment (in, not in)&lt;/li&gt;
&lt;li&gt;union : set of things in either set or in both&lt;/li&gt;
&lt;li&gt;intersection: set of things in 2 sets&lt;/li&gt;
&lt;li&gt;difference: set of things in one set but not the other&lt;/li&gt;
&lt;li&gt;symmetric difference: set of things in either set but not in both&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://trio.readthedocs.io/en/latest/index.html"&gt;&lt;strong&gt;Trio: async programming for humans and snake people&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Trio project’s goal is to produce a production-quality, permissively licensed, async/await-native I/O library for Python. Like all async libraries, its main purpose is to help you write programs that do multiple things at the same time with parallelized I/O. &lt;/li&gt;
&lt;li&gt;Compared to other libraries, Trio attempts to distinguish itself with an obsessive focus on usability and correctness. &lt;/li&gt;
&lt;li&gt;Concurrency is complicated; we try to make it easy to get things right.&lt;/li&gt;
&lt;li&gt;Trio was built from the ground up to take advantage of the latest Python features&lt;/li&gt;
&lt;li&gt;Inspiration from &lt;a href="https://github.com/python-trio/trio/wiki/Reading-list"&gt;many sources&lt;/a&gt;, in particular Dave Beazley’s &lt;a href="https://curio.readthedocs.io/"&gt;Curio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Resulting design is radically simpler than older competitors like asyncio and Twisted, yet just as capable.&lt;/li&gt;
&lt;li&gt;We &lt;em&gt;do&lt;/em&gt; encourage you do use it, but you should &lt;a href="https://github.com/python-trio/trio/issues/1"&gt;read and subscribe to issue #1&lt;/a&gt; to get warning and a chance to give feedback about any compatibility-breaking changes.&lt;/li&gt;
&lt;li&gt;Excellent scalability: trio can run 10,000+ tasks simultaneously without breaking a sweat, so long as their total CPU demands don’t exceed what a single core can provide.&lt;/li&gt;
&lt;li&gt;Supports Python 3.5+ and PyPy&lt;/li&gt;
&lt;li&gt;Uses&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    trio.run(async_method, 3)
    trio.sleep(1.5) # Sleep, non-blocking

    async with trio.open_nursery() as nursery:
        print("parent: spawning child...")
        nursery.start_soon(child_func1)
        print("parent: spawning child...")
        nursery.start_soon(child_func2)
        print("parent: waiting for children to finish...")
        # -- we exit the nursery block here --
    print("parent: child_func1 and child_func2 done!")
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;trio provides a &lt;a href="https://trio.readthedocs.io/en/latest/reference-hazmat.html#instrumentation"&gt;rich set of tools for inspecting and debugging your programs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Consider &lt;a href="https://github.com/python-trio/trio-asyncio"&gt;trio-asyncio&lt;/a&gt; for compatibility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://github.com/ambv/black"&gt;&lt;strong&gt;black: The uncompromising Python code formatter&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;An amusing take on code formatting. From the readme:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“&lt;em&gt;Black&lt;/em&gt; is the uncompromising Python code formatter. By using it, you agree to cease control over minutiae of hand-formatting. In return, &lt;em&gt;Black&lt;/em&gt; gives you speed, determinism, and freedom from &lt;code&gt;pycodestyle&lt;/code&gt; nagging about formatting. You will save time and mental energy for more important matters.”&lt;/li&gt;
&lt;li&gt;“Blackened code looks the same regardless of the project you're reading. Formatting becomes transparent after a while and you can focus on the content instead.”&lt;/li&gt;
&lt;li&gt;“&lt;em&gt;Black&lt;/em&gt; makes code review faster by producing the smallest diffs possible.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Datadog is a monitoring solution that provides deep visibility and tracks down issues quickly with distributed tracing for your Python apps.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Within minutes, you'll be able to investigate bottlenecks in your code by exploring interactive flame graphs and rich dashboards.&lt;/li&gt;
&lt;li&gt;Visualize your Python performance today, get started with a free trial with Datadog and they'll send you a free T-shirt.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See for yourself, visit pythonbytes.fm/datadog. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://github.com/gaojiuli/gain"&gt;&lt;strong&gt;gain: Web crawling framework based on asyncio&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web crawling framework for everyone. Written with asyncio, uvloop and aiohttp.&lt;/li&gt;
&lt;li&gt;Simple and mostly automated
&lt;ul&gt;
&lt;li&gt;Define class mapped to CSS selectors and data to save&lt;/li&gt;
&lt;li&gt;Concurrently level&lt;/li&gt;
&lt;li&gt;Start URL&lt;/li&gt;
&lt;li&gt;Page templates to match URLs&lt;/li&gt;
&lt;li&gt;Run&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://rafiqul.rocks/generic-function-in-python-with-singledispatch/"&gt;&lt;strong&gt;Generic Function in Python with Singledispatch&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Imagine, you can write different implementations of a function of the same name in the same scope, depending on the types of arguments. Wouldn’t it be great? Of course, it would be. There is a term for this. It is called “Generic Function”. Python recently added support for generic function in Python 3.4 (&lt;a href="https://www.python.org/dev/peps/pep-0443/"&gt;PEP 443&lt;/a&gt;). They did this to the &lt;code&gt;functools&lt;/code&gt; module by adding &lt;code&gt;@singledispatch&lt;/code&gt; decorator.”&lt;/li&gt;
&lt;li&gt;For people less familiar with “generic functions”. I think of this as providing similar functionality as C++’s function overloading.&lt;/li&gt;
&lt;li&gt;Allows you do things like this (full code example is in the article):&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    from functools import singledispatch

    @singledispatch
    def fprint(data):
        "code for default functionality"

    @fprint.register(list)
    @fprint.register(set)
    @fprint.register(tuple)
    def _(data):
        "code for list, set, tuple"

    @fprint.register(dict)
    def _(data):
        "code for dict"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More complete code example: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    from functools import singledispatch

    @singledispatch
    def fprint(data):
        print(f'({type(data).__name__}) {data}')

    @fprint.register(list)
    @fprint.register(set)
    @fprint.register(tuple)
    def _(data):
        formatted_header = f'{type(data).__name__} -&amp;gt; index : value'
        print(formatted_header)
        print('-' * len(formatted_header))
        for index, value in enumerate(data):
            print(f'{index} : ({type(value).__name__}) {value}')

    @fprint.register(dict)
    def _(data):
        formatted_header = f'{type(data).__name__} -&amp;gt; key : value'
        print(formatted_header)
        print('-' * len(formatted_header))
        for key, value in data.items():
            print(f'({type(key).__name__}) {key}: ({type(value).__name__}) {value}')

    # &amp;gt;&amp;gt;&amp;gt; fprint('hello')
    # (str) hello

    # &amp;gt;&amp;gt;&amp;gt; fprint(21)
    # (int) 21

    #...

    # &amp;gt;&amp;gt;&amp;gt; fprint({'name': 'John Doe', 'age': 32, 'location': 'New York'})
    # dict -&amp;gt; key : value
    # -------------------
    # (str) name: (str) John Doe
    # (str) age: (int) 32
    # (str) location: (str) New York
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="http://asherman.io/projects/unsync.html"&gt;&lt;strong&gt;Unsync: Unsynchronizing async/await in Python 3.6&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A rant about async/await in Python (by Alex Sherman)&lt;/li&gt;
&lt;li&gt;What’s wrong?
&lt;ul&gt;
&lt;li&gt;The two big friction points I’ve had are:
&lt;ul&gt;
&lt;li&gt;Difficult to “fire and forget” async calls (need to specifically run the event loop)&lt;/li&gt;
&lt;li&gt;Can’t do blocking calls to asyncio.Future.result() (it throws an exception)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;We need to acquire an even loop, do some weird call to execute the async function in that event loop, and then synchronously execute the event loop ourselves. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;What can we do?
&lt;ul&gt;
&lt;li&gt;C# had this great idea of executing each Task (their version of a Future) first synchronously in the main thread until an await is hit, and then queueing it into an ambient thread pool to continue later possibly in a separate thread. &lt;/li&gt;
&lt;li&gt;Python did not take this approach and my hunch is that the Python maintainers didn’t want to add an ambient thread pool to their language (which makes sense). &lt;/li&gt;
&lt;li&gt;Alex, however, is not the Python maintainers and did add an ambient thread (singular). I stuffed all the boiler plate into a decorator and the result looks like this:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    @unsync
    async def unsync_async():
        await asyncio.sleep(0.1)
        return 'I like decorators'

    print(unsync_async().result())
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;using @unsync on a regular function (not an async one) will cause it to be executed in a ThreadPoolExecutor. &lt;/li&gt;
&lt;li&gt;To support CPU bound workloads, you can use @unsync(cpu_bound=True) to decorate functions which will be executed in a ProcessPoolExecutor&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#74 Contributing to Open Source effectively</title><link>https://pythonbytes.fm/episodes/show/74/contributing-to-open-source-effectively</link><guid>20d66724-2553-4748-9967-b6b470afc53b</guid><enclosure url="https://pythonbytes.fm/episodes/download/74/contributing-to-open-source-effectively.mp3" length="10566523" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 19 Apr 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Contributing to Open Source effectively</itunes:title><itunes:episode>74</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:24:51</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Datadog: &lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;fm&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Special guest: Matt Harrison -&lt;/strong&gt; &lt;a href="https://twitter.com/__mharrison__"&gt;&lt;strong&gt;__mharrison__&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1: Contributing to Open Source effectively&lt;/strong&gt;
The mechanics and conventions on how to contribute to open source projects can be confusing. After seeing a &lt;a href="https://github.com/okken/cards/pull/31"&gt;very well documented pull request&lt;/a&gt; that started with &lt;code&gt;[WIP]&lt;/code&gt; in the subject line when it was first submitted, I tried to find out more about the conventions and mechanics of it all. I’m still learning, but here are a couple of resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.github.com/2015-01-21-how-to-write-the-perfect-pull-request/"&gt;How to write the perfect pull request&lt;/a&gt; is more of a mindset of how to initiate and receive PRs
&lt;ul&gt;
&lt;li&gt;Approach to writing a Pull Request, including that [WIP] trick.&lt;/li&gt;
&lt;li&gt;Offering feedback&lt;/li&gt;
&lt;li&gt;Responding to feedback&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pragprog.com/book/vbopens/forge-your-future-with-open-source"&gt;Forge Your Future with Open Source&lt;/a&gt;, &lt;a href="https://twitter.com/vmbrasseur"&gt;&lt;strong&gt;@&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://twitter.com/vmbrasseur"&gt;vmbrasseur&lt;/a&gt; book on contributing to open source, includes:
&lt;ul&gt;
&lt;li&gt;Make a Contribution, which includes PRs&lt;/li&gt;
&lt;li&gt;Make a difference without making a pull request, which is suggests many ways to contribute to a project without contributing code, like reviewing others contributions, testing, triaging bugs, …&lt;/li&gt;
&lt;li&gt;Interacting with the community.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Matt #2:&lt;/strong&gt; &lt;strong&gt;Jupyter, Mathematica, and the Future of the Research Paper&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Paul Romer, economy professor at NYU&lt;/li&gt;
&lt;li&gt;As a longtime Linux user there was constantly the question of the “year of the Linux Desktop”. Maybe this is the year of the “Jupyter desktop” (also beta version of JupyterLab). Not just a tool for innovators or early adopters&lt;/li&gt;
&lt;li&gt;Refers to Article in Atlantic contrasting Mathematica and Jupyter: &lt;em&gt;open-source developers have flocked to Python because it happens to be the de facto standard for scientific computing. Programming-language communities, like any social network, thrive—or die—on the strength of these feedback loops&lt;/em&gt;. &lt;a href="https://www.theatlantic.com/science/archive/2018/04/the-scientific-paper-is-obsolete/556676/"&gt;https://www.theatlantic.com/science/archive/2018/04/the-scientific-paper-is-obsolete/556676/ &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Quotes: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Jupyter is a new open-source alternative [to Mathmatica] that is well on the way to becoming a standard for exchanging research results.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Python libraries let me replicate everything I wanted to do with Mathematica: Matplotlib for graphics, SymPy for symbolic math, NumPy and SciPy for numerical calculations, Pandas for data, and NLTK for natural language processing. Jupyter makes it easy to use Latex to display typeset math. With Matplotlib, Latex works even in the label text for graphs. (I have not yet tried the major update, JupyterLab, which is still in beta testing.)&lt;/em&gt;
&lt;em&gt;I’m more productive. I’m having fun.&lt;/em&gt;
&lt;a href="https://paulromer.net/jupyter-mathematica-and-the-future-of-the-research-paper/"&gt;https://paulromer.net/jupyter-mathematica-and-the-future-of-the-research-paper/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael&lt;/strong&gt; &lt;strong&gt;#3:&lt;/strong&gt; &lt;a href="https://www.jetbrains.com/research/python-developers-survey-2017/"&gt;&lt;strong&gt;Python Developers Survey 2017 Results&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At the very end of 2017, JetBrains &amp;amp; The PSF teamed up to build a solid picture of the modern Python developer&lt;/li&gt;
&lt;li&gt;Here are some take-aways
&lt;ul&gt;
&lt;li&gt;Almost 4 out of 5 Python developers use it as their main language, while for 21% it’s only a secondary language.&lt;/li&gt;
&lt;li&gt;Data analysis is as popular as web development with Python: Web development is the only category with a large gap (54% vs 33%) separating those using Python as their main language vs as a supplementary language. For other types of development, the differences are far less significant.&lt;/li&gt;
&lt;li&gt;At 28% to 27% application, There are as many Python web developers as Python data scientists&lt;/li&gt;
&lt;li&gt;Python 3 vs Python 2: 75% to 25% and accelerating&lt;/li&gt;
&lt;li&gt;Top Cloud Platform(s)
&lt;ul&gt;
&lt;li&gt;67%: AWS&lt;/li&gt;
&lt;li&gt;29%: Google App Engine&lt;/li&gt;
&lt;li&gt;26%: Heroku&lt;/li&gt;
&lt;li&gt;23%: DigitalOcean&lt;/li&gt;
&lt;li&gt;16%: Microsoft Azure&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Team Size
&lt;ul&gt;
&lt;li&gt;74%: 2-7 people&lt;/li&gt;
&lt;li&gt;16%: 8-12 people&lt;/li&gt;
&lt;li&gt;5%: 13-20 people&lt;/li&gt;
&lt;li&gt;2%: 21-40 people&lt;/li&gt;
&lt;li&gt;2%: &amp;gt; 40 people&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Operating Systems
&lt;ul&gt;
&lt;li&gt;49%: Windows&lt;/li&gt;
&lt;li&gt;19%: Linux&lt;/li&gt;
&lt;li&gt;15%: MacOS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #4&lt;/strong&gt;&lt;a href="https://edgedb.com/blog/edgedb-a-new-beginning"&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://edgedb.com/blog/edgedb-a-new-beginning"&gt;&lt;strong&gt;&lt;em&gt;*&lt;/a&gt;&lt;a href="https://edgedb.com/blog/edgedb-a-new-beginning"&gt;&lt;/strong&gt;EdgeDB: A New Beginning&lt;/em&gt;*&lt;/a&gt;
This is “news you can’t use” so far, because the product isn’t here yet. So why am I excited and interested in this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s from Elvis &lt;a href="https://twitter.com/elprans"&gt;&lt;strong&gt;@&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://twitter.com/elprans"&gt;elprans&lt;/a&gt; and Yury &lt;a href="https://twitter.com/1st1"&gt;&lt;strong&gt;@&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://twitter.com/1st1"&gt;1st1&lt;/a&gt;, who have brought us asyncio and uvloop&lt;/li&gt;
&lt;li&gt;It’s not just a relational DB, it’s a DB based on PostgreSQL but with an entire new way to specify schema and interact with it.&lt;/li&gt;
&lt;li&gt;Goal is to be fast, user friendly, and remove the need for ORMs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Matt&lt;/strong&gt; &lt;strong&gt;#5:&lt;/strong&gt; &lt;a href="http://www.scikit-yb.org/en/latest/"&gt;&lt;strong&gt;Yellowbrick library&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visualization is important, I’ve found bugs by plotting before. Also important in evaluation of machine learning projects&lt;/li&gt;
&lt;li&gt;This is a project that has been around for about two years. I’ve recently adopted it in place of some home grown libraries for some consulting projects and in my corporate training&lt;/li&gt;
&lt;li&gt;Yellowbrick offers visualization for:
&lt;ul&gt;
&lt;li&gt;Features&lt;/li&gt;
&lt;li&gt;Classification&lt;/li&gt;
&lt;li&gt;Regression&lt;/li&gt;
&lt;li&gt;Clustering&lt;/li&gt;
&lt;li&gt;Text&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Like sk-learn, uses a similar api (.fit, .transform, .poof (plot))&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://github.com/Jflick58/DepressionAI"&gt;&lt;strong&gt;Depression AI&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alexa skill for people suffering with depression. &lt;/li&gt;
&lt;li&gt;Alexa &lt;a href="https://www.amazon.com/Depression-AI/dp/B079N6WR6Y/ref=sr_1_1?s=digital-skills&amp;amp;ie=UTF8&amp;amp;qid=1522775645&amp;amp;sr=1-1&amp;amp;keywords=depression ai"&gt;store listing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Based on &lt;a href="https://github.com/johnwheeler/flask-ask"&gt;Flask-Ask&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Discussed on &lt;a href="https://talkpython.fm/episodes/show/146/building-alexa-skills-with-python-and-flask"&gt;Talk Python 146&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Valley Hackathon 2018 winner&lt;/li&gt;
&lt;li&gt;71% of people who make their bed in the morning report feeling happy. This was the inspiration behind DepressionAI. &lt;/li&gt;
&lt;li&gt;The aim behind this skill is to encourage people to perform daily activities that become very difficult when one is depressed.&lt;/li&gt;
&lt;li&gt;The skill detects positive and negative moods. &lt;/li&gt;
&lt;li&gt;If the user is having a bad day, it asks them a series of questions about what they have done that day (e.g. "Have you gotten out of bed?") and if they haven't, it encourages them to do so.&lt;/li&gt;
&lt;li&gt;Features
&lt;ul&gt;
&lt;li&gt;Mood evaluation by a highly empathetic Alexa bot&lt;/li&gt;
&lt;li&gt;Suicidal intention detection and prevention attempt&lt;/li&gt;
&lt;li&gt;Location-based therapy reccomendations&lt;/li&gt;
&lt;li&gt;Suggestions for small activites to improve the user's mood&lt;/li&gt;
&lt;li&gt;Displays informative cards in the Alexa app&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Sample Phrases
&lt;ul&gt;
&lt;li&gt;“Alexa, check on me."&lt;/li&gt;
&lt;li&gt;"I feel down."&lt;/li&gt;
&lt;li&gt;"I haven't got out of bed today."&lt;/li&gt;
&lt;li&gt;"Help me feel better."&lt;/li&gt;
&lt;li&gt;"Help me find a therapist"&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#75 pypi.org officially launches</title><link>https://pythonbytes.fm/episodes/show/75/pypi.org-officially-launches</link><guid>6f5581c9-5ef6-4b25-be58-f3ebdedcbabc</guid><enclosure url="https://pythonbytes.fm/episodes/download/75/pypi.org-officially-launches.mp3" length="9314616" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Sat, 28 Apr 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>pypi.org officially launches</itunes:title><itunes:episode>75</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:19:51</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Datadog: &lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;fm&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://pypi.org/project/numba/"&gt;&lt;strong&gt;numba&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From the numba readme:
&lt;ul&gt;
&lt;li&gt;“The easiest way to install numba and get updates is by using the Anaconda Distribution: &lt;a href="https://www.anaconda.com/download"&gt;https://www.anaconda.com/download&lt;/a&gt;”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbviewer.jupyter.org/github/akittas/presentations/blob/master/pythess/numba/numba.ipynb?utm_source=newsletter_mailer&amp;amp;utm_medium=email&amp;amp;utm_campaign=weekly#The-need-for-speed-without-bothering-too-much:-An-introduction-to-numba"&gt;The need for speed without bothering too much: An introduction to numba&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Can get huge speed up for some computation heavy loops or algorithms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://blog.python.org/2018/04/pip-10-has-been-released.html"&gt;&lt;strong&gt;pip 10 is out&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Time for: &lt;code&gt;python -m pip install --upgrade pip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Features:
&lt;ul&gt;
&lt;li&gt;Python 2.6 is no longer supported - if you need pip on Python 2.6, you should stay on pip 9, which is the last version to support Python 2.6.&lt;/li&gt;
&lt;li&gt;Support for PEP 518, which allows projects to specify what packages they require in order to build from source. (PEP 518 support is currently limited, with full support coming in future versions - see the documentation for details).&lt;/li&gt;
&lt;li&gt;Significant improvements in Unicode handling for non-ASCII locales on Windows.&lt;/li&gt;
&lt;li&gt;A new "pip config" command.&lt;/li&gt;
&lt;li&gt;The default upgrade strategy has become "only-if-needed"&lt;/li&gt;
&lt;li&gt;Many bug fixes and minor improvements.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian&lt;/strong&gt; &lt;strong&gt;#3:&lt;/strong&gt; &lt;a href="http://treyhunner.com/2018/04/keyword-arguments-in-python/"&gt;&lt;strong&gt;Keyword (Named) Arguments in Python: How to Use Them&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using keyword arguments is often seen when there are many arguments to a function that have useful defaults, and you only want to override the default with some of the arguments.&lt;/li&gt;
&lt;li&gt;Example:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;comma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;separated&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;words&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;comma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;separated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;You can take positional arguments and require some to be named with various uses of &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    def foo(*, bar, baz):
      print(f'{bar} {baz}') 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Lots of other useful tricks in this article.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4&lt;/strong&gt;&lt;a href="https://edgedb.com/blog/edgedb-a-new-beginning"&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://pythoninsider.blogspot.ca/2018/04/new-pypi-launched-legacy-pypi-shutting.html"&gt;&lt;strong&gt;pypi.org officially launches&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Legacy PyPI shutting down April 30&lt;/li&gt;
&lt;li&gt;Listen to talk python 159&lt;/li&gt;
&lt;li&gt;Starting April 16, the canonical Python Package Index is at &lt;a href="https://pypi.org"&gt;https://pypi.org&lt;/a&gt; and uses the new Warehouse codebase.&lt;/li&gt;
&lt;li&gt;Launched the new PyPI, redirecting browser traffic and API calls (including "pip install") from pypi.python.org to the new site. The old codebase is still available at &lt;a href="https://legacy.pypi.org"&gt;https://legacy.pypi.org&lt;/a&gt; for now.&lt;/li&gt;
&lt;li&gt;Monday April 30 (2018-04-30): We plan to shut down legacy PyPI https://legacy.pypi.org . The address pypi.python.org will continue to redirect to Warehouse.&lt;/li&gt;
&lt;li&gt;If your site/service links to or uses &lt;a href="http://pypi.python.org"&gt;pypi.python.org&lt;/a&gt;, you should start using pypi.org instead: &lt;a href="https://warehouse.readthedocs.io/api-reference/integration-guide/#migrating-to-the-new-pypi"&gt;https://warehouse.readthedocs.io/api-reference/integration-guide/#migrating-to-the-new-pypi&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian&lt;/strong&gt; &lt;strong&gt;#5:&lt;/strong&gt; &lt;a href="https://realpython.com/python-modules-packages/"&gt;&lt;strong&gt;Python Modules and Packages – An Introduction&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In Python, it is, and understanding modules and packages is key to getting a good footing when learning Python. It’s also an area that trips up people when they start trying to create reusable code.&lt;/li&gt;
&lt;li&gt;How to create a Python &lt;strong&gt;module&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Locations where the Python interpreter searches for a module&lt;/li&gt;
&lt;li&gt;How to obtain access to the objects defined in a module with the &lt;code&gt;import&lt;/code&gt; statement&lt;/li&gt;
&lt;li&gt;How to create a module that is executable as a standalone script&lt;/li&gt;
&lt;li&gt;How to organize modules into &lt;strong&gt;packages&lt;/strong&gt; and &lt;strong&gt;subpackages&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;How to control package initialization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6: Pandas only like modern Python&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From December 31st, 2018, Pandas will drop support for Python 2.7. This includes no backports of security or bug fixes (unless someone volunteers to do those)&lt;/li&gt;
&lt;li&gt;The final release before December 31, 2018 will be the last release to support Python 2. The released package will continue to be available on PyPI and through conda.&lt;/li&gt;
&lt;li&gt;Starting January 1, 2019, all releases will be Python 3 only.&lt;/li&gt;
&lt;li&gt;The full &lt;a href="https://www.reddit.com/r/Python/comments/8c883i/from_december_31st_2018_pandas_will_drop_support/"&gt;reddit discussion&lt;/a&gt; is interesting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Our news&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just launched: Python 3, an illustrated tour! &lt;a href="https://talkpython.fm/illustrated"&gt;&lt;strong&gt;talkpython.fm/illustrated&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#76 Goodbye zero-versioning</title><link>https://pythonbytes.fm/episodes/show/76/goodbye-zero-versioning</link><guid>04878768-7e7c-41b3-b087-d132798a6934</guid><enclosure url="https://pythonbytes.fm/episodes/download/76/goodbye-zero-versioning.mp3" length="13580892" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 04 May 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Goodbye zero-versioning</itunes:title><itunes:episode>76</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:30:40</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Datadog: &lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;fm&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://medium.freecodecamp.org/unlearning-toxic-behaviors-in-a-code-review-culture-b7c295452a3c"&gt;&lt;strong&gt;Unlearning toxic behaviors in a code review culture&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unhelpful behaviors:
&lt;ul&gt;
&lt;li&gt;passing off opinion as fact&lt;/li&gt;
&lt;li&gt;overwhelming with an avalanche of comments&lt;/li&gt;
&lt;li&gt;asking people to fix problems they didn’t cause “while they’re at it”.&lt;/li&gt;
&lt;li&gt;asking judgmental questions&lt;/li&gt;
&lt;li&gt;being sarcastic&lt;/li&gt;
&lt;li&gt;using emojis&lt;/li&gt;
&lt;li&gt;not replying to comments&lt;/li&gt;
&lt;li&gt;ignoring (not calling out) toxic behavior from high performers&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;helpful:
&lt;ul&gt;
&lt;li&gt;use questions or recommendations to drive dialog&lt;/li&gt;
&lt;li&gt;collaborate, don’t back-seat drive&lt;/li&gt;
&lt;li&gt;respond to every comment&lt;/li&gt;
&lt;li&gt;know when to take a discussion offline&lt;/li&gt;
&lt;li&gt;use opportunities to teach, and don’t show off&lt;/li&gt;
&lt;li&gt;don’t show surprise of lack of knowledge by others&lt;/li&gt;
&lt;li&gt;automate what can be&lt;/li&gt;
&lt;li&gt;refuse to normalize toxic behavior&lt;/li&gt;
&lt;li&gt;managers: hire carefully, listen to your team, and enforce&lt;/li&gt;
&lt;li&gt;set the standard as your team is small and growing&lt;/li&gt;
&lt;li&gt;understand you might be part of the problem&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.palletsprojects.com/blog/flask-1-0-released/"&gt;Flask 1.0 Released&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dropped support for Python 2.6 and 3.3.&lt;/li&gt;
&lt;li&gt;The CLI is more flexible. &lt;code&gt;FLASK_APP&lt;/code&gt; can point to an app factory, optionally with arguments. It understands import names in more cases where filenames were previously used. It automatically detects common filenames, app names, and factory names. &lt;code&gt;FLASK_ENV&lt;/code&gt; describes the environment the app is running in, like &lt;code&gt;development&lt;/code&gt;, and replaces &lt;code&gt;FLASK_DEBUG&lt;/code&gt; in most cases. &lt;a href="http://flask.pocoo.org/docs/1.0/cli/"&gt;See the docs to learn more.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If python-dotenv is installed, the &lt;code&gt;flask&lt;/code&gt; CLI will load environment variables from &lt;code&gt;.flaskenv&lt;/code&gt; and &lt;code&gt;.env&lt;/code&gt; files rather than having to export them in each new terminal.&lt;/li&gt;
&lt;li&gt;The development server is multi-threaded by default to handle concurrent requests during development.&lt;/li&gt;
&lt;li&gt;flask.ext, which was previously deprecated, is completely removed. Import extensions by their actual package names.&lt;/li&gt;
&lt;li&gt;Accessing missing keys from &lt;code&gt;request.form&lt;/code&gt; shows a more helpful error message in debug mode, addressing a very common source of confusion for developers.&lt;/li&gt;
&lt;li&gt;Error handlers are looked up by code then exception class, on the blueprint then application. This gives more predictable control over handlers, including being able to handle &lt;code&gt;HTTPException&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The behavior of &lt;code&gt;app.logger&lt;/code&gt; has been greatly simplified and should be much easier to customize. The logger is always named &lt;code&gt;flask.app&lt;/code&gt;, it only adds a handler if none are registered, and it never removes existing handlers. &lt;a href="http://flask.pocoo.org/docs/1.0/logging/"&gt;See the docs to learn more.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;test_client&lt;/code&gt; gained a &lt;code&gt;json&lt;/code&gt; argument for posting JSON data, and the &lt;code&gt;Response&lt;/code&gt; object gained a &lt;code&gt;get_json&lt;/code&gt; method to decode the data as JSON in tests.&lt;/li&gt;
&lt;li&gt;A new &lt;code&gt;test_cli_runner&lt;/code&gt; is added for testing an app's CLI commands.&lt;/li&gt;
&lt;li&gt;Many documentation sections have been rewritten to improve clarity and relevance. This is an ongoing effort.&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://flask.pocoo.org/docs/1.0/tutorial/"&gt;tutorial&lt;/a&gt; and corresponding &lt;a href="https://github.com/pallets/flask/tree/1.0/examples/tutorial"&gt;example&lt;/a&gt; have been rewritten. They use a structured layout and go into more detail about each aspect in order to help new users avoid common issues and become comfortable with Flask.
&lt;ul&gt;
&lt;li&gt;There are many more changes throughout the framework. &lt;a href="http://flask.pocoo.org/docs/1.0/changelog/"&gt;Read the full&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian&lt;/strong&gt; &lt;strong&gt;#3:&lt;/strong&gt; &lt;strong&gt;So, I still don’t quite get pipenv, ….&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Best discussion of why pipenv is useful for applications I’ve come across so far is &lt;a href="https://realpython.com/pipenv-guide/"&gt;Pipenv: A Guide to the New Python Packaging Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Starts with a discussion of situations where &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;pip freeze&lt;/code&gt;, and &lt;code&gt;requirements.txt&lt;/code&gt; fall apart.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt; often just have an applications direct dependencies, not sub-dependencies.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; will pin your versions to specific versions, but then you’ve got to keep track of dependencies and sub-dependencies.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pipfile&lt;/code&gt; intends to replace &lt;code&gt;requirements.txt&lt;/code&gt;, with a simple-ish human readable format. Also includes extra things like dev environment support.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pipfile.lock&lt;/code&gt; intends to replace pinned &lt;code&gt;requirements.txt&lt;/code&gt; files. Also includes hashes to validate versions haven’t been corrupted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv&lt;/code&gt; also includes cool tools like dependency graphing, checking for updates, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pipenv&lt;/code&gt; should be used for applications, but not packages intended to be included in other applications. But you can use it during package development, just probably not include the Pipfile and Pipfile.lock in the repo or package distribution. - Brian’s comment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bonus extra: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/elgertam/cookiecutter-pipenv"&gt;cookiecutter-pipenv: Cookiecutter Python Package Template with Pipenv&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4&lt;/strong&gt;&lt;a href="https://edgedb.com/blog/edgedb-a-new-beginning"&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://blogs.oracle.com/developers/announcing-graalvm"&gt;GraalVM: Run Programs Faster Anywhere&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why?
&lt;ul&gt;
&lt;li&gt;Current production virtual machines (VMs) provide high performance execution of programs only for a specific language or a very small set of languages.&lt;/li&gt;
&lt;li&gt;Compilation, memory management, and tooling are maintained separately for different languages, violating the ‘don’t repeat yourself’ (DRY) principle.&lt;/li&gt;
&lt;li&gt;high performance VMs are heavyweight processes with high memory footprint and difficult to embed.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Oracle Labs started a new research project for exploring a novel architecture for virtual machines. Our vision was to create a single VM that would provide high performance for all programming languages, therefore facilitating communication between programs.&lt;/li&gt;
&lt;li&gt;Released: &lt;a href="http://www.graalvm.org/"&gt;GraalVM&lt;/a&gt;, a universal virtual machine designed for a polyglot world.&lt;/li&gt;
&lt;li&gt;GraalVM provides high performance for individual languages and interoperability with zero performance overhead for creating polyglot applications.&lt;/li&gt;
&lt;li&gt;GraalVM 1.0 allows you to run:
&lt;ul&gt;
&lt;li&gt;JVM-based languages like Java, Scala, Groovy, or Kotlin&lt;/li&gt;
&lt;li&gt;JavaScript (including Node.js)&lt;/li&gt;
&lt;li&gt;LLVM bitcode (created from programs written in e.g. C, C++, or Rust)&lt;/li&gt;
&lt;li&gt;Experimental versions of Ruby, R, and &lt;strong&gt;Python&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Future: This first release is only the beginning. We are working on improving all aspects of GraalVM; in particular the support for Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian&lt;/strong&gt; &lt;strong&gt;#5:&lt;/strong&gt; &lt;a href="http://www.patricksoftwareblog.com/testing-a-flask-application-using-pytest/"&gt;&lt;strong&gt;Testing a Flask Application using pytest&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Small demo project, and article, that teaches the use of pytest in Flask.&lt;/li&gt;
&lt;li&gt;unit testing and functional testing&lt;/li&gt;
&lt;li&gt;Article covers testing models, with an example of a new user.&lt;/li&gt;
&lt;li&gt;project also has examples of using a test client to check the login page, password authentication, and a lot more.&lt;/li&gt;
&lt;li&gt;Very cool project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bonus:&lt;/strong&gt; &lt;a href="https://github.com/jbn/pytest-caprng"&gt;&lt;strong&gt;A cool new pytest plugin: pytest-caprng&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tests that use &lt;code&gt;random&lt;/code&gt; or &lt;code&gt;np.random&lt;/code&gt; may fail, but when you re-run them, they don’t fail, which makes them hard to debug.&lt;/li&gt;
&lt;li&gt;This plugin adds pytest flags &lt;code&gt;--caprng-global-stdlib&lt;/code&gt; and &lt;code&gt;--caprng-global-np&lt;/code&gt;, which saves the random state before each test so that if you re-run the test, the random-ness is not so random, and you can reproduce your failure.&lt;/li&gt;
&lt;li&gt;Also, thanks John for reminding me what “stochastic” means.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="http://treyhunner.com/2018/04/how-to-make-the-most-of-your-first-pycon/"&gt;How to have a great first PyCon&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spending your time: which talks should I go to? The talks at PyCon are typically uploaded to YouTube within 24 hours after the talk ends. I am suggesting that you don’t need to worry about attending every talk.&lt;/li&gt;
&lt;li&gt;Open spaces: attend them and consider hosting your own! &lt;/li&gt;
&lt;li&gt;There are a few reasons I often pick open spaces over talks:
&lt;ul&gt;
&lt;li&gt;Often the open spaces are more niche and topical than the talks: there are some subjects that exist in open spaces every year but which I’ve never seen a talk on&lt;/li&gt;
&lt;li&gt;Open spaces are all about interaction and discussion whereas talks are a monologue that often evolves into subsequent dialogues&lt;/li&gt;
&lt;li&gt;Open spaces aren’t recorded whereas the talks are, meaning you can’t really catch up on them later&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Tips for starting conversation, breakfast and lunch time…&lt;/li&gt;
&lt;li&gt;The hallway track 👣
&lt;ul&gt;
&lt;li&gt;Something you might consider doing while at PyCon is taking breaks in the hallway. &lt;/li&gt;
&lt;li&gt;In addition to joining or starting a table in the hallway, consider identifying groups that have &lt;a href="http://ericholscher.com/blog/2017/aug/2/pacman-rule-conferences/"&gt;a PacMan opening&lt;/a&gt; to join and make sure the groups you’re in are PacMan-friendly.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Interacting online during PyCon 🐦
&lt;ul&gt;
&lt;li&gt;I recommend getting a Twitter account to make it easier to passively keep up with folks from PyCon after the conference ends.&lt;/li&gt;
&lt;li&gt;Sometimes people on Twitter will ask if anyone would like to join them for dinner and you might decide to reply and say you’d like to join.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Networking isn’t a dirty word: it means making friends 👥&lt;/li&gt;
&lt;li&gt;I hear two opposing concerns sometimes expressed about PyCon:
&lt;ul&gt;
&lt;li&gt;Isn’t everyone here to get a job or hire people?&lt;/li&gt;
&lt;li&gt;Is it acceptable to go to PyCon looking for a job?&lt;/li&gt;
&lt;li&gt;PyCon is a networking event. That doesn’t necessarily mean everyone is there to get a job, but it also definitely doesn’t mean it’s unacceptable to job-seek at Python.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Other topics include
&lt;ul&gt;
&lt;li&gt;Volunteering&lt;/li&gt;
&lt;li&gt;Evening events: dinners and board games&lt;/li&gt;
&lt;li&gt;Give a lightning talk ⚡&lt;/li&gt;
&lt;li&gt;Take care of yourself&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Final tip from commentor: If you are on windows, it's helpful to install a virtual image of a linux like the current ubuntu on your laptop, because you could run into situations where you want to follow a talk / training which doesn't work on windows and then you're missing a great opportunity to learn.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Our news&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Come see us at PyCon!!! We’ll have stickers! &lt;/li&gt;
&lt;li&gt;Brian’s talk is Friday at 5 something. &lt;/li&gt;
&lt;li&gt;We are doing a live Python Bytes open session, join “friends of the show” to get notified&lt;/li&gt;
&lt;li&gt;I’ll be at Microsoft BUILD too&lt;/li&gt;
&lt;li&gt;PyGotham 2018 Call for Proposals&lt;/li&gt;
&lt;li&gt;&lt;a href="http://PyCon.DE"&gt;http://PyCon.DE&lt;/a&gt;  (24-26 October 2018 in Karlsruhe, Germany) starting our CfP tomorrow until May 20. &lt;a href="http://de.pycon.org"&gt;http://de.pycon.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#77 You Don't Have To Be a Workaholic To Win</title><link>https://pythonbytes.fm/episodes/show/77/you-don-t-have-to-be-a-workaholic-to-win</link><guid>b7aad6ad-0b74-4467-a627-d6bba7964585</guid><enclosure url="https://pythonbytes.fm/episodes/download/77/you-don-t-have-to-be-a-workaholic-to-win.mp3" length="8217379" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Sat, 12 May 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>You Don't Have To Be a Workaholic To Win</itunes:title><itunes:episode>77</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:21:04</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Datadog: &lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;fm&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://hackernoon.com/why-senior-devs-write-dumb-code-and-how-to-spot-a-junior-from-a-mile-away-27fa263b101a"&gt;&lt;strong&gt;Why Senior Devs Write Dumb Code&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“&lt;em&gt;Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” - Kent Beck&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Code that is clean, straightforward, obvious, and easy to read actually takes practice to achieve.&lt;/li&gt;
&lt;li&gt;Follow principles like YAGNI, Singe Responsibility, DRY, etc.&lt;/li&gt;
&lt;li&gt;Avoid clever one-liners, weird abstractions.&lt;/li&gt;
&lt;li&gt;Esoteric language features.&lt;/li&gt;
&lt;li&gt;Code needs to be readable and easily understood while under time and stress pressure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://geoalchemy-2.readthedocs.io/en/latest/"&gt;GeoAlchemy 2&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GeoAlchemy 2 provides extensions to SQLAlchemy for working with spatial databases.&lt;/li&gt;
&lt;li&gt;GeoAlchemy 2 focuses on PostGIS. Aims to be simpler than its predecessor, GeoAlchemy.&lt;/li&gt;
&lt;li&gt;Using it:
&lt;ul&gt;
&lt;li&gt;Connect (e.g. Postgres)&lt;/li&gt;
&lt;li&gt;Declare a Mapping&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    class Lake(Base):
         __tablename__ = 'lake'
         id = Column(Integer, primary_key=True)
         name = Column(String)
         geom = Column(Geometry('POLYGON'))
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Create a table (via the engine)&lt;/li&gt;
&lt;li&gt;Create an Instance of the Mapped Class&lt;/li&gt;
&lt;li&gt;Inserts like standard SQLAlchmey&lt;/li&gt;
&lt;li&gt;Spatial Query&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    from sqlalchemy import func
    query = session.query(Lake).filter(
             func.ST_Contains(Lake.geom, 'POINT(4 1)'))

    query = session.query(Lake.name,
          Lake.geom.ST_Buffer(2).ST_Area().label('bufferarea'))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Brian&lt;/strong&gt; &lt;strong&gt;#3:&lt;/strong&gt; &lt;a href="https://github.com/digitaldomain/QtPyConvert"&gt;&lt;strong&gt;QtPyConvert&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An automatic Python Qt binding transpiler to the Qt.py abstraction layer.&lt;/li&gt;
&lt;li&gt;QtPyConvert supports the following bindings out of the box:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.riverbankcomputing.com/software/pyqt/download"&gt;PyQt4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyside.github.io/docs/pyside/"&gt;PySide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.riverbankcomputing.com/software/pyqt/download5"&gt;PyQt5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.qt.io/PySide2"&gt;PySide2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Conversions leave code comments in place, with the help of RedBaron&lt;/li&gt;
&lt;li&gt;Converts to &lt;a href="https://github.com/mottosso/Qt.py"&gt;Qt.py&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Minimal Python 2 &amp;amp; 3 shim around all Qt bindings - PySide, PySide2, PyQt4 and PyQt5&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt;  &lt;a href="https://www.kevinball.com/2018/04/17/you-dont-have-to-be-a-workaholic/"&gt;You Don't Have To Be a Workaholic To Win: 13 Alternative Ways To Stand Out&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do we have to kill ourselves to get ahead?&lt;/li&gt;
&lt;li&gt;Don’t busy-brag&lt;/li&gt;
&lt;li&gt;Max Q analogy&lt;/li&gt;
&lt;li&gt;The tips&lt;/li&gt;
&lt;li&gt;Creativity&lt;/li&gt;
&lt;li&gt;Stubbornness&lt;/li&gt;
&lt;li&gt;Curiosity&lt;/li&gt;
&lt;li&gt;Kindness&lt;/li&gt;
&lt;li&gt;Planning&lt;/li&gt;
&lt;li&gt;Improvisation&lt;/li&gt;
&lt;li&gt;Enthusiasm&lt;/li&gt;
&lt;li&gt;Communication&lt;/li&gt;
&lt;li&gt;Presence&lt;/li&gt;
&lt;li&gt;Collaboration&lt;/li&gt;
&lt;li&gt;Willingness&lt;/li&gt;
&lt;li&gt;Patience&lt;/li&gt;
&lt;li&gt;Institutional Knowledge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian&lt;/strong&gt; &lt;strong&gt;#5:&lt;/strong&gt; &lt;a href="https://github.com/PyCQA/Redbaron"&gt;&lt;strong&gt;RedBaron&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RedBaron is a python library to make the process of writing code that modify source code as easy and as simple as possible. 
&lt;ul&gt;
&lt;li&gt;writing custom refactoring, generic refactoring, tools, &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Used by QtPyConvert to achieve the conversion while leaving code comments in place&lt;/li&gt;
&lt;li&gt;Uses the full syntax tree, FST. Like an AST, but keeps all information, including comments and formatting.&lt;/li&gt;
&lt;li&gt;possible uses:
&lt;ul&gt;
&lt;li&gt;rename a variable in a source file... without clashing with things that are not a variable (example: stuff inside a string)&lt;/li&gt;
&lt;li&gt;inline a function/method&lt;/li&gt;
&lt;li&gt;extract a function/method from a series of line of code&lt;/li&gt;
&lt;li&gt;split a class into several classes&lt;/li&gt;
&lt;li&gt;split a file into several modules&lt;/li&gt;
&lt;li&gt;convert your whole code base from one ORM to another&lt;/li&gt;
&lt;li&gt;do custom refactoring operation not implemented by IDE&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt;  &lt;a href="https://no-title.victordomingos.com/articles/2018/project_beware_launches_app_for_ios/"&gt;Project Beeware AppStore&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project BeeWare has just released its first iPhone app made in Python using its Briefcase tool.&lt;/li&gt;
&lt;li&gt;Simple travel app for currency and tip calculations&lt;/li&gt;
&lt;li&gt;Briefcase: A distutils extension to assist in packaging Python projects as standalone applications.
Briefcase is a tool for converting a Python project into a standalone native application. You can package projects for:
&lt;ul&gt;
&lt;li&gt;Mac&lt;/li&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;iPhone/iPad&lt;/li&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;li&gt;AppleTV&lt;/li&gt;
&lt;li&gt;tvOS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;While there are other Python GUI toolkits aiming to enable Python developers to build and deploy iOS apps, like for instance the very nice &lt;a href="http://omz-software.com/pythonista/"&gt;Pythonista app&lt;/a&gt;, the &lt;a href="https://pybee.org"&gt;BeeWare&lt;/a&gt; project is a bit different because it aims at cross-platform compatibility and native widgets with a set of different tools, like Briefcase and Toga.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extras: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Michael: Extra ssh breach Did you see that?  &lt;a href="https://www.reddit.com/r/Python/comments/8hvzja/backdoor_in_sshdecorator_package/"&gt;https://www.reddit.com/r/Python/comments/8hvzja/backdoor_in_sshdecorator_package/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon videos already up at &lt;a href="https://www.youtube.com/pycon2018"&gt;https://www.youtube.com/pycon2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#78 Setting Expectations for Open Source Participation</title><link>https://pythonbytes.fm/episodes/show/78/setting-expectations-for-open-source-participation</link><guid>81bee509-0f75-4224-a039-4daf5f083992</guid><enclosure url="https://pythonbytes.fm/episodes/download/78/setting-expectations-for-open-source-participation.mp3" length="12844735" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 18 May 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Setting Expectations for Open Source Participation</itunes:title><itunes:episode>78</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:26:07</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Datadog: &lt;a href="https://pythonbytes.fm/datadog"&gt;https://pythonbytes.fm/datadog&lt;/a&gt; 
Special guest: Kojo Idrissa -- &lt;a href="https://twitter.com/Transition"&gt;https://twitter.com/Transition&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Brian #1: &lt;a href="https://medium.com/@s16h/the-forgotten-optional-else-in-python-loops-90d9c465c830"&gt;&lt;strong&gt;The Forgotten Optional [HTML_REMOVED]else[HTML_REMOVED] in Python Loops&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Both for and while loops in Python also take an optional else suite (like the if statement and the try statement do), which executes if the loop iteration completes normally. In other words, the else suite will be executed if we don’t exit the loop in any way other than its natural way. So, no break statements, no return statement, or no exceptions being raised inside the loop.”&lt;/li&gt;
&lt;li&gt;Why? So you don’t have to invent a flag to indicate something wasn’t found if you are using the loop to search for something. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kojo #2: &lt;a href="https://libraries.io/"&gt;libraries.io&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://libraries.io/"&gt;https://libraries.io/&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Find out what your dependencies are!&lt;/li&gt;
&lt;li&gt;Look into &lt;a href="https://tidelift.com/"&gt;https://tidelift.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Michael #3: &lt;a href="https://medium.com/@shamir.stav_83310/the-other-great-benefit-of-python-type-annotations-896c7d077c6b"&gt;The other (great) benefit of Python type annotations&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We've had type annotations for awhile&lt;/li&gt;
&lt;li&gt;When and why is sometimes unclear
&lt;ul&gt;
&lt;li&gt;Lack of types an issue sometimes, especially annoying while learning new APIs or diving into a new large codebase, and made me completely reliant on documentation.&lt;/li&gt;
&lt;li&gt;Optional:
&lt;ul&gt;
&lt;li&gt;You can’t break the code by adding them&lt;/li&gt;
&lt;li&gt;They have no effect performance-wise&lt;/li&gt;
&lt;li&gt;You may add them only where you see fit&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Straightforward benefits
&lt;ul&gt;
&lt;li&gt;Employ static code analysis to catch type errors prior to runtime&lt;/li&gt;
&lt;li&gt;Cleaner code/the code is self-documenting: “don’t use a comment when you can use a function or a variable”, we can now say “don’t use comments to specify a type, when you can use type annotation”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The other benefit (it's massive!): Code completion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Brian #4: &lt;a href="https://www.youtube.com/watch?v=tzFWz5fiVKU&amp;amp;feature=youtu.be&amp;amp;t=48m55s"&gt;&lt;strong&gt;Setting Expectations for Open Source Participation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Or &lt;strong&gt;Pay for Open Source with Kindness&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Brett Cannon’s morning talk this last Sunday at PyCon 2018&lt;/li&gt;
&lt;li&gt;This talk (or a variation of it and it’s content) is essential material for anyone working with open source.&lt;/li&gt;
&lt;li&gt;Everything in open source has a cost whether it’s time, effort, or emotional output.&lt;/li&gt;
&lt;li&gt;Open source should be a series of unsolicited kindnesses.&lt;/li&gt;
&lt;li&gt;Be open, considerate, and respectful&lt;/li&gt;
&lt;li&gt;Remember most of this runs on volunteer time and that people have lives.&lt;/li&gt;
&lt;li&gt;Guidelines for communicating online:
&lt;ul&gt;
&lt;li&gt;Assume you are asking for a favor.&lt;/li&gt;
&lt;li&gt;Assume your boss will read what you say.&lt;/li&gt;
&lt;li&gt;Assume your family will read what you say.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kojo #5:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python Community Events
&lt;ul&gt;
&lt;li&gt;Michael and I (along with Trey Hunner) helped lead a New Attendee Orientation&lt;/li&gt;
&lt;li&gt;Join your local Python community&lt;/li&gt;
&lt;li&gt;Be kind to your fellow Pythonistas&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Michael #6: &lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ngrok exposes local servers behind NATs and firewalls to the public internet over secure tunnels.&lt;/li&gt;
&lt;li&gt;Public URLs for testing on mobile devices, testing your chatbot, SSH access to your Raspberry Pi, sharing your local dev work on full stack web apps.&lt;/li&gt;
&lt;li&gt;Just a commandline away&lt;/li&gt;
&lt;li&gt;My use case: Course app development&lt;/li&gt;
&lt;li&gt;Features:
&lt;ul&gt;
&lt;li&gt;Secure Tunnels&lt;/li&gt;
&lt;li&gt;Request Inspection&lt;/li&gt;
&lt;li&gt;Fast (HTTP 2)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extras and our news:&lt;/p&gt;

&lt;p&gt;Michael:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Live recording video is out: &lt;a href="https://youtu.be/s9uUSQvrIaE"&gt;https://youtu.be/s9uUSQvrIaE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Now up to 8 video servers around the world, Japan, Sao Paulo, and Mumbai are the latest. Based on the systemd thing we discussed way back when (&lt;a href="https://pythonbytes.fm/episodes/show/54/pyannotate-your-way-to-the-future"&gt;episode 54&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#79 15 Tips to Enhance your Github Flow</title><link>https://pythonbytes.fm/episodes/show/79/15-tips-to-enhance-your-github-flow</link><guid>405419b6-7f31-4aa4-aa23-b79a8e7a74bf</guid><enclosure url="https://pythonbytes.fm/episodes/download/79/15-tips-to-enhance-your-github-flow.mp3" length="12310879" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 25 May 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>15 Tips to Enhance your Github Flow</itunes:title><itunes:episode>79</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:27:31</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://docs.pytest.org/en/latest/changelog.html#pytest-3-6-0-2018-05-23"&gt;&lt;strong&gt;pytest 3.6.0&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Revamp the internals of the &lt;code&gt;pytest.mark&lt;/code&gt; implementation with correct per node handling which fixes a number of long standing bugs caused by the old design. This introduces new &lt;code&gt;Node.iter_markers(name)&lt;/code&gt; and &lt;code&gt;Node.get_closest_mark(name)&lt;/code&gt; APIs. 
    - Depricating &lt;code&gt;Node.get_marker(name)&lt;/code&gt;. 
    - &lt;a href="https://docs.pytest.org/en/latest/mark.html#marker-revamp-and-iteration"&gt;reasons for the revamp&lt;/a&gt;
    - &lt;a href="https://docs.pytest.org/en/latest/mark.html#updating-code"&gt;updating existing code to use the new APIs&lt;/a&gt;
    - Now when &lt;code&gt;@pytest.fixture&lt;/code&gt; is applied more than once to the same function a &lt;code&gt;ValueError&lt;/code&gt; is raised. This buggy behavior would cause surprising problems and if was working for a test suite it was mostly by accident.&lt;/li&gt;
&lt;li&gt;Support for Python 3.7’s builtin &lt;code&gt;breakpoint()&lt;/code&gt; method, 
    - see &lt;a href="https://docs.pytest.org/en/latest/usage.html#breakpoint-builtin"&gt;Using the builtin breakpoint function&lt;/a&gt; for details.
    - Provided by friend of the show Anthony Shaw&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monkeypatch&lt;/code&gt; now supports a &lt;code&gt;context()&lt;/code&gt; function which acts as a context manager which undoes all patching done within the &lt;code&gt;with&lt;/code&gt; block.&lt;/li&gt;
&lt;li&gt;whitespace only diffs in failed assertions include escaped characters to be easier to read.&lt;/li&gt;
&lt;li&gt;plus more… see &lt;a href="https://docs.pytest.org/en/latest/changelog.html#pytest-3-6-0-2018-05-23"&gt;changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2: Hello&lt;/strong&gt; &lt;a href="https://blog.qt.io/blog/2018/05/04/hello-qt-for-python/"&gt;&lt;strong&gt;Qt for Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first Qt for Python technology preview release is almost here, and for this reason we want to give a brief example on how it will open the doors to the Python world.&lt;/li&gt;
&lt;li&gt;The real question is: how to access the methods of a Qt class? To simplify the process, we kept Qt APIs. (basically change -&gt; to . in the API)&lt;/li&gt;
&lt;li&gt;Can it be more pythonic? “We want to include more Python flavor features to Qt for Python in the near future, but at the moment we are focusing on the TP.”&lt;/li&gt;
&lt;li&gt;The wheels situation: we are planning a set of wheels for Linux, macOS and Windows for 64bit and a 32bit version only for windows. &lt;/li&gt;
&lt;li&gt;AFAIK, this is Pyside2 reborn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://groups.google.com/forum/m/#!msg/mongodb-user/UWIPZEAKYiw/C5twgBwrCwAJ"&gt;&lt;strong&gt;MongoDB 4.0.0-rc0 available&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MongoDB 4.0.0-rc0, the first release candidate of MongoDB 4.0, is out and is ready for testing. 
&lt;ul&gt;
&lt;li&gt;Multi-document ACID transactions&lt;/li&gt;
&lt;li&gt;Non-Blocking Secondary Reads&lt;/li&gt;
&lt;li&gt;lots of other goodies, see &lt;a href="https://groups.google.com/forum/#!msg/mongodb-user/UWIPZEAKYiw/C5twgBwrCwAJ"&gt;announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Did we mention &lt;a href="https://www.mongodb.com/transactions"&gt;Transactions&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://medium.com/@DJetelina/pipenv-review-after-using-in-production-a05e7176f3f0"&gt;&lt;strong&gt;Pipenv review, after using it in production&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nice summary:
“The current state of python’s packaging is awful, I don’t think there’s anyone who could disagree with that. This problem is recognized and there are many attempts at trying to solve the mess. Pipenv was the first and it has gained a lot of traction, however it doesn’t sit well with everyone. And it’s also not suited for every project — like libraries.”&lt;/li&gt;
&lt;li&gt;The multiple environment problem:
The tl;dr is — supporting multiple environments goes against Pipenv’s (therefore also Pipfile’s) philosophy of deterministic reproducible application environments. So if you want to use Pipenvfor a library, you’re out of luck. That means many projects just can not use Pipenv for their dependency managment.&lt;/li&gt;
&lt;li&gt;The good
&lt;ul&gt;
&lt;li&gt;Pipfile and Pipfile.lock really are superior to requirements.txt. By a ton.&lt;/li&gt;
&lt;li&gt;While I disliked it at first, having flake8 and security check builtin in a single tool is great&lt;/li&gt;
&lt;li&gt;Installing (exclusively) from a private respository works very well. Instead of replacing a dotfile somewhere in the system, specifying the repository in Pipfile is great&lt;/li&gt;
&lt;li&gt;Creating a new Pipfile is very easy&lt;/li&gt;
&lt;li&gt;No problems introducing Pipenv to it’s new users&lt;/li&gt;
&lt;li&gt;No problems installing from a mixture of indexes, git repositores…&lt;/li&gt;
&lt;li&gt;With --sequential it is actually deterministic, as advertised&lt;/li&gt;
&lt;li&gt;Virtualenv is much easier to get into and understand&lt;/li&gt;
&lt;li&gt;Dependencies can be installed into system (e.g. in Docker) — our case.&lt;/li&gt;
&lt;li&gt;At no point did anyone in the team even mentioned getting rid of Pipenv — which is a lot better than it sounds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Related:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=GBQAKldqgZs"&gt;PyCon 2018 talk about the history and future of Python packaging, including pipenv&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/pipenv/commit/71bf8e51300abe5c57117cc47fba1807cd4465fa#diff-88b99bb28683bd5b7e3a204826ead112"&gt;Recent changes to the official wording around pipenv&lt;/a&gt; (removes the statement that it’s the official way of managing &lt;strong&gt;application&lt;/strong&gt; dependencies)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian&lt;/strong&gt; &lt;strong&gt;#5:&lt;/strong&gt; &lt;a href="https://hackernoon.com/15-tips-to-enhance-your-github-flow-6af7ceb0d8a3"&gt;&lt;strong&gt;15 Tips to Enhance your Github Flow&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;using github projects to prioritize issues and track progress&lt;/li&gt;
&lt;li&gt;using tags on issues&lt;/li&gt;
&lt;li&gt;templates&lt;/li&gt;
&lt;li&gt;using hub and git-extras on command line&lt;/li&gt;
&lt;li&gt;commit message standards&lt;/li&gt;
&lt;li&gt;scoped commits&lt;/li&gt;
&lt;li&gt;style standards with pre-commit hooks&lt;/li&gt;
&lt;li&gt;automated tests and checks on pull requests&lt;/li&gt;
&lt;li&gt;protect master branch&lt;/li&gt;
&lt;li&gt;requiring code reviews&lt;/li&gt;
&lt;li&gt;squash pull requests&lt;/li&gt;
&lt;li&gt;…. more great topics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://twitter.com/randal_olson/status/985215366891646976"&gt;&lt;strong&gt;Pandas goes Python 3 only&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Via Randy Olseon&lt;/li&gt;
&lt;li&gt;It's official: Starting January 1, 2019, pandas will drop support for #Python 2. This includes no backports of security or bug fixes. &lt;/li&gt;
&lt;li&gt;Basically following NumPy’s lead&lt;/li&gt;
&lt;li&gt;The final release before &lt;strong&gt;December 31, 2018&lt;/strong&gt; will be the last release to support Python 2. The released package will continue to be available on PyPI and through conda.&lt;/li&gt;
&lt;li&gt;Starting &lt;strong&gt;January 1, 2019&lt;/strong&gt;, all releases will be Python 3 only.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Our news&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s GDPR eve, are you ready? &lt;/li&gt;
&lt;li&gt;Need a GDPR laugh? See &lt;a href="https://twitter.com/nadimpatel_/status/999111866633871361"&gt;https://twitter.com/nadimpatel_/status/999111866633871361&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;XKCD Python Environments: &lt;a href="https://xkcd.com/1987/"&gt;https://xkcd.com/1987/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#80 Dan Bader drops by and we found 30 new Python projects</title><link>https://pythonbytes.fm/episodes/show/80/dan-bader-drops-by-and-we-found-30-new-python-projects</link><guid>8b593809-b716-48c1-bcc3-afe7f9895991</guid><enclosure url="https://pythonbytes.fm/episodes/download/80/dan-bader-drops-by-and-we-found-30-new-python-projects.mp3" length="13595044" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Tue, 29 May 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Dan Bader drops by and we found 30 new Python projects</itunes:title><itunes:episode>80</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:30:45</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://packaging.python.org/tutorials/packaging-projects/"&gt;&lt;strong&gt;Packaging Python Projects&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tutorial on the PyPA has been updated.&lt;/li&gt;
&lt;li&gt;Includes &lt;code&gt;README.md&lt;/code&gt; instead of &lt;code&gt;REAMDE.rst&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Initial example of &lt;code&gt;setup.py&lt;/code&gt; no longer too minimal or too scary.&lt;/li&gt;
&lt;li&gt;Discussion of using &lt;code&gt;twine&lt;/code&gt; to upload to test.pypi.org/legacy before uploading to non-test pypi&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/flit/"&gt;Related project, flit&lt;/a&gt;
&lt;a href="https://pypi.org/project/flit/"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Dan #2:&lt;/strong&gt; &lt;a href="https://gidgethub.readthedocs.io/en/latest/"&gt;gidgethub — An async library for calling GitHub’s API&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Talk to GitHub API to add/modify issues, pull-requests, comments, …&lt;/li&gt;
&lt;li&gt;Also helpers to parse GitHub’s webhook events so you can write bots that react to new issues, comments, commits etc.&lt;/li&gt;
&lt;li&gt;Used it in @Mariatta’s GitHub Bot tutorial:&lt;a href="https://github.com/Mariatta/github-bot-tutorial"&gt;https://github.com/Mariatta/github-bot-tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cool architecture for a “modern” Python web API library (async, sansio, decorator based event callbacks)
&lt;ul&gt;
&lt;li&gt;supports different async backends: aiohttp, treq, Tornado
&lt;ul&gt;
&lt;li&gt;sans-I/O: “protocol implementations written in Python that perform &lt;strong&gt;no&lt;/strong&gt; I/O (this means libraries that operate directly on text or bytes)”&lt;/li&gt;
&lt;li&gt;Why? → “&lt;em&gt;reusability&lt;/em&gt;. By implementing network protocols without any I/O and instead operating on bytes or text alone, libraries allow for reuse by other code regardless of their I/O decisions. In other words by leaving I/O out of the picture a network protocol library allows itself to be used by both synchronous and asynchronous I/O code”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;(Biggest issue in that workshop was getting everyone upgraded to Python 3.6…but more on that later)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #3:&lt;/strong&gt; &lt;a href="https://github.com/aleivag/pystemd"&gt;&lt;strong&gt;pystemd&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recall I recently build a Python-based systemd service for geo syncing my course materials&lt;/li&gt;
&lt;li&gt;A thin Cython-based wrapper on top of libsystemd, focused on exposing the dbus API via sd-bus in an automated and easy to consume way.&lt;/li&gt;
&lt;li&gt;By Alvaro Leiva, a production engineer at Facebook / Instagram&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ZUX9Fx8Rwzg"&gt;Presented at PyCon 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Systemd:
&lt;ul&gt;
&lt;li&gt;Manages your services and their lifetimes&lt;/li&gt;
&lt;li&gt;e.g. I want my web app to start on boot but only after mongodb has started&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebookincubator/pystemd"&gt;pystemd&lt;/a&gt; lets you control and query these from a Python API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #4:&lt;/strong&gt; &lt;a href="https://blog.jetbrains.com/pycharm/2018/05/pycharm-2018-2-eap-1/"&gt;&lt;strong&gt;PyCharm 2018.2 EAP 1 includes improved pytest support&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From &lt;a href="https://twitter.com/nicoddemus/status/999424505171849221"&gt;Bruno Oliveira&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;“Oh my, full support for &lt;a href="https://twitter.com/hashtag/pytest?src=hash"&gt;#&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/pytest?src=hash"&gt;pytest&lt;/a&gt; fixtures and parameterized tests coming in &lt;a href="https://twitter.com/pycharm"&gt;@&lt;/a&gt;&lt;a href="https://twitter.com/pycharm"&gt;pycharm&lt;/a&gt; 2018.2.“&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;“PyCharm 2018.2 supports &lt;a href="https://docs.pytest.org/en/latest/fixture.html"&gt;using fixtures in Pytest&lt;/a&gt;. Using fixtures allows you to separate your setup code from the actual tests, making for more concise, and more readable tests. Additionally, there have been improvements to code navigation and refactoring Pytest tests, and to using parameterized tests.”&lt;/li&gt;
&lt;li&gt;It’s hard for me to fully express how FREAKING EXCITED I am about this.&lt;/li&gt;
&lt;li&gt;auto-complete now works with fixtures to test functions&lt;/li&gt;
&lt;li&gt;goto declaration now works with fixtures to test functions
&lt;ul&gt;
&lt;li&gt;(not fixtures of fixtures, but they know about that already)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;re-running a failed parametrization works (yay!)&lt;/li&gt;
&lt;li&gt;re-running a single parametrization works (yay!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Dan #5:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why is installing Python 3.6 so hard? (Recent GitHub Bot workshop experience)&lt;/li&gt;
&lt;li&gt;Sometimes hard to tell what’s easy/difficult for beginners&lt;/li&gt;
&lt;li&gt;People hit crazy edge cases:
&lt;ul&gt;
&lt;li&gt;running Linux Subsystem for Windows (WSL) on Windows host, install Python into wrong environment&lt;/li&gt;
&lt;li&gt;broken PPAs + bad StackOverflow advice → broken SSL and no pip on Ubuntu (deadsnakes PPA is the way to go)&lt;/li&gt;
&lt;li&gt;People install multiple Python environments: Anaconda + python.org distribution&lt;/li&gt;
&lt;li&gt;Hard to find instructions for compiling from source on Linux&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Shameless plug: &lt;a href="https://realpython.com/installing-python/"&gt;&lt;strong&gt;realpython.com/installing-python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://medium.mybridge.co/30-amazing-python-projects-for-the-past-year-v-2018-9c310b04cdb3"&gt;&lt;strong&gt;30 amazing Python projects (2018 edition)&lt;/strong&gt;&lt;/a&gt;
&lt;a href="https://realpython.com/installing-python/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mybridge AI evaluates the quality by considering popularity, engagement and recency. To give you an idea about the quality, the average number of Github stars is 3,707.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WZBSocialScienceCenter/pdftabextract?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;&lt;strong&gt;No 30&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt; PDFTabExtract: A set of tools for extracting tables from PDF files helping to do data mining on scanned documents. &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/NicolasHug/Surprise?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;&lt;strong&gt;No 28&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt; Surprise v1.0: A Python scikit for building and analyzing recommender systems &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ChrisKnott/Eel?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;&lt;strong&gt;No 27&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt; Eel: A little Python library for making simple Electron-like HTML/JS GUI apps &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/anfederico/Clairvoyant?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;&lt;strong&gt;No 25&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt; Clairvoyant: A Python program that identifies and monitors historical cues for short term stock movement — Have you seen &lt;a href="https://www.youtube.com/watch?v=kFQJNeQDDHA"&gt;The Wall Street Code - VPRO documentary&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Manisso/fsociety?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;&lt;strong&gt;No 21&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt; Fsociety: Hacking Tools Pack. A Penetration Testing Framework.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kennethreitz/maya?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;&lt;strong&gt;No 18&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt; Maya: Datetime for Humans in Python&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Qix-/better-exceptions?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;&lt;strong&gt;No 16&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt; Better-exceptions: Pretty and useful exceptions in Python, automatically &lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tomchristie/apistar?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;&lt;strong&gt;No 13&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt; Apistar: A fast and expressive API framework. For Python&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/micropython/micropython?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;&lt;strong&gt;No 8&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt; MicroPython: A lean and efficient Python implementation for microcontrollers and constrained systems&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/explosion/spaCy?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;&lt;strong&gt;No 6&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt; spaCy (v2.0): Industrial-strength Natural Language Processing (NLP) with Python and Cython&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pytorch/pytorch?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;&lt;strong&gt;No 2&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt; Pytorch: Tensors and Dynamic neural networks in Python with strong GPU acceleration&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/home-assistant/home-assistant?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more"&gt;&lt;strong&gt;No 1&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt; Home-assistant (v0.6+): Open-source home automation platform running on Python 3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Our news&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Michael: Notable mention Cris’s GDPR writeup: &lt;a href="http://tryexceptpass.org/article/gdpr/"&gt;http://tryexceptpass.org/article/gdpr/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Did you know about dropbox smart sync? &lt;a href="https://www.dropbox.com/smartsync"&gt;https://www.dropbox.com/smartsync&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#81 Making your C library callable from Python by wrapping it with Cython</title><link>https://pythonbytes.fm/episodes/show/81/making-your-c-library-callable-from-python-by-wrapping-it-with-cython</link><guid>dc0775d8-1146-44eb-827c-44d8ae3f6df1</guid><enclosure url="https://pythonbytes.fm/episodes/download/81/making-your-c-library-callable-from-python-by-wrapping-it-with-cython.mp3" length="7777512" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Tue, 05 Jun 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Making your C library callable from Python by wrapping it with Cython</itunes:title><itunes:episode>81</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:17:00</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by digitalocean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;pythonbytes.fm/digitalocean&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1: Learning about Machine Learning&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hello-tensorflow.glitch.me/"&gt;&lt;strong&gt;hello tensorflow&lt;/strong&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;one pager site with a demo of machine learning in action.&lt;/li&gt;
&lt;li&gt;“&lt;strong&gt;Machine Learning (ML)&lt;/strong&gt; is the dope new thing that everyone's talking about, because it's really good at learning from data so that it can predict similar things in the future.”&lt;/li&gt;
&lt;li&gt;Includes a graphical demo of ML trying to learn the correct coefficients to a polynomial.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.technotification.com/2018/04/google-free-machine-learning.html"&gt;Google Provides Free Machine Learning Course For All&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/machine-learning/crash-course/"&gt;Machine Learning Crash Course&lt;/a&gt; (MLCC) is a free 15 hours course that is divided into 25 lessons. It provides exercises, interactive visualizations, and instructional videos. These can help in learning machine learning concepts.&lt;/li&gt;
&lt;li&gt;40 exercises, 25 lessons, 15 hours, case studies, interactive visualizations&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://medium.com/@shamir.stav_83310/making-your-c-library-callable-from-python-by-wrapping-it-with-cython-b09db35012a3"&gt;&lt;strong&gt;Making your C library callable from Python by wrapping it with Cython&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Article by Stav Shamir&lt;/li&gt;
&lt;li&gt;Cython is known for its ability to increase the performance of Python code. Another useful feature of Cython is making existing C functions callable from within (seemingly) pure Python modules.&lt;/li&gt;
&lt;li&gt;Need to directly interact from Python with a small C library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Want to wrap this C function?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void hello(const char *name) {
    printf("hello %s\n", name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just install Cython and write this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cdef extern from "examples.h":
    void hello(const char *name)

def py_hello(name: bytes) -&amp;gt; None:
    hello(name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create a setup file (details in article), call &lt;code&gt;python setup.py build_ext --inplace&lt;/code&gt; and you’re good to go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://www.vinta.com.br/blog/2018/taming-irreversibility-feature-flags-python/"&gt;&lt;strong&gt;Taming Irreversibility with Feature Flags (in Python)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Feature Flags are a very simple technique to make features of your application quickly toggleable. The way it works is, everytime we change some behavior in our software, a logical branch is created and this new behavior is only accessible if some specific configuration variable is set or, in certain cases, if the application context respects some rules.”&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    def my_function():
        if is_feature_active('feature_one'):
            do_something()
        else:
            do_something_else()
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Benefits
&lt;ul&gt;
&lt;li&gt;Improving team’s response time to bugs. If a new feature causes a bunch of customer problems, just turn it off.&lt;/li&gt;
&lt;li&gt;Making possible to sync code more frequently. Merge to master with the feature turned off.&lt;/li&gt;
&lt;li&gt;Having a more fluid feature launching flow. Turn feature on in test/staging server.&lt;/li&gt;
&lt;li&gt;Validate your features easily with A/B testing, user groups, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Article discusses:
&lt;ul&gt;
&lt;li&gt;how to implement flags cleanly.&lt;/li&gt;
&lt;li&gt;measuring success with analytics&lt;/li&gt;
&lt;li&gt;implementing flags with third party packages and recommends a few.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://pypi.org/project/pretend/"&gt;&lt;strong&gt;pretend: a stubbing library&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Heard about this at the end of the pypi episode of Talk Python and wanted to highlight it more.&lt;/li&gt;
&lt;li&gt;Pretend is a library to make stubbing with Python easier.&lt;/li&gt;
&lt;li&gt;Stubbing is a technique for writing tests. A stub is an object that returns pre-canned responses, rather than doing any computation.&lt;/li&gt;
&lt;li&gt;Stubbing is related to mocking, but traditionally with stubs, you don’t care about behavior, you are just concerned with how your system under test responds to certain input data. 
&lt;ul&gt;
&lt;li&gt;However, pretend does include a call recorder feature.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Nice clean api:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; from pretend import stub
    &amp;gt;&amp;gt;&amp;gt; x = stub(country_code=lambda: "US")
    &amp;gt;&amp;gt;&amp;gt; x.country_code()
    'US'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; from pretend import stub, raiser
    &amp;gt;&amp;gt;&amp;gt; x = stub(func=raiser(ValueError))
    &amp;gt;&amp;gt;&amp;gt; x.func()
    Traceback (most recent call last):
      File "[HTML_REMOVED]", line 1, in [HTML_REMOVED]
      File "pretend.py", line 74, in inner
        raise exc
    ValueError
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="http://flask.pocoo.org/docs/1.0/tutorial/"&gt;&lt;strong&gt;The official Flask tutorial&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Has been updated recently.
&lt;ul&gt;
&lt;li&gt;simplified, updated, including the source code for the project.&lt;/li&gt;
&lt;li&gt;tutorial includes section on testing, including testing with pytest and coverage.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Flask is part of &lt;a href="https://www.palletsprojects.com/"&gt;Pallets&lt;/a&gt;, which develops and maintains several projects
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.palletsprojects.com/p/click/"&gt;Click&lt;/a&gt; — A package for creating beautiful command line interfaces in a composable way&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.palletsprojects.com/p/flask/"&gt;Flask&lt;/a&gt; — a flexible and popular web development framework&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.palletsprojects.com/p/itsdangerous/"&gt;ItsDangerous&lt;/a&gt; — cryptographically sign your data and hand it over to someone else&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.palletsprojects.com/p/jinja/"&gt;Jinja&lt;/a&gt; — a full featured template engine for Python&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.palletsprojects.com/p/markupsafe/"&gt;MarkupSafe&lt;/a&gt; — a HTML-Markup safe string for Python&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.palletsprojects.com/p/werkzeug/"&gt;Werkzeug&lt;/a&gt; — a WSGI utility library for Python&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You can now donate to pallets to help with the maintenance costs of these important packages.
&lt;ul&gt;
&lt;li&gt;There’s a donate button on the pallets site that takes you to a PSF page. Therefore, donations are deductible in the US.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://opensource.com/article/18/4/introduction-python-bytecode"&gt;&lt;strong&gt;An introduction to Python bytecode&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python is compiled&lt;/li&gt;
&lt;li&gt;Learn what Python bytecode is, how Python uses it to execute your code, and how knowing what it does can help you.&lt;/li&gt;
&lt;li&gt;Python is often described as an interpreted language—one in which your source code is translated into native CPU instructions as the program runs—but this is only partially correct. Python, like many interpreted languages, actually compiles source code to a set of instructions for a virtual machine, and the Python interpreter is an implementation of that virtual machine. This intermediate format is called "bytecode."&lt;/li&gt;
&lt;li&gt;These are your .PYC files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def hello()
    print("Hello, World!")


2           0 LOAD_GLOBAL              0 (print)
            2 LOAD_CONST               1 ('Hello, World!')
            4 CALL_FUNCTION            1
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;CPython uses a stack-based virtual machine. That is, it's oriented entirely around stack data structures (where you can "push" an item onto the "top" of the structure, or "pop" an item off the "top").&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;View and explore using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import dis
dis.dis(hello)
&lt;/code&gt;&lt;/pre&gt;</description></item><item><title>#82 Let's make a clear Python 3 statement</title><link>https://pythonbytes.fm/episodes/show/82/let-s-make-a-clear-python-3-statement</link><guid>30712fb9-7a6d-4eaf-bdc1-b5339ec2eda6</guid><enclosure url="https://pythonbytes.fm/episodes/download/82/let-s-make-a-clear-python-3-statement.mp3" length="11171913" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 15 Jun 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Let's make a clear Python 3 statement</itunes:title><itunes:episode>82</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:25:55</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;* GitHub coverage coming at the end! *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://realpython.com/flask-connexion-rest-api/"&gt;&lt;strong&gt;Building and Documenting Python REST APIs With Flask and Connexion&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Doug Farrell, &lt;a href="https://twitter.com/writeson"&gt;@writeson&lt;/a&gt;, on the RealPython site.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Tutorial with example.
&lt;ul&gt;
&lt;li&gt;REST explanation of what REST is and is not&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swagger.io/"&gt;Swagger&lt;/a&gt;, swagger.yml to define API&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://github.com/zalando/connexion"&gt;Connexion&lt;/a&gt; to incorporate swagger.yml into Flask app.&lt;/li&gt;
&lt;li&gt;Nice succinct explanation of swagger and API configuration.&lt;/li&gt;
&lt;li&gt;Demo of Swagger UI for API documentation.&lt;/li&gt;
&lt;li&gt;JavaScript included for MVC implementation.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://twitter.com/gvanrossum/status/1001869119937961984"&gt;&lt;strong&gt;MyPy + PyCharm&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Written by Ivan Levkivskyi&lt;/li&gt;
&lt;li&gt;via Guido van Rossum&lt;/li&gt;
&lt;li&gt;Ricky Teachey asks: “What advantages does using mypy bring to pycharm vs just using pycharm's native type checking- which is already pretty good?”&lt;/li&gt;
&lt;li&gt;Response: 
&lt;ul&gt;
&lt;li&gt;mypy is a bit more stricter/precise&lt;/li&gt;
&lt;li&gt;it is more configurable, lots of options regulating type system "rules"&lt;/li&gt;
&lt;li&gt;it typechecks the whole program, so that you immediately see errors your change causes in _other_ files&lt;/li&gt;
&lt;li&gt;people run mypy in CI and want to see the result before push&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3: Automatic code/doc conversion&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/asottile/pyupgrade/blob/master/README.md"&gt;pyupgrade&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;“A tool (and pre-commit hook) to automatically upgrade syntax for newer versions of the language.”&lt;/li&gt;
&lt;li&gt;Can even convert to f-strings with &lt;code&gt;--py36-plus&lt;/code&gt; option.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/asottile/blacken-docs"&gt;docs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;“Run &lt;code&gt;black&lt;/code&gt; on python code blocks in documentation files.”&lt;/li&gt;
&lt;li&gt;blacken-docs provides a single executable (blacken-docs) which will modify .rst / .md files in place.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://twitter.com/Mbussonn/status/1004177424488132608"&gt;&lt;strong&gt;python3statement&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Bruno Alla&lt;/li&gt;
&lt;li&gt;Matthias Bussonnier (Talk Python, &lt;a href="https://talkpython.fm/episodes/show/44/project-jupyter-and-ipython"&gt;episode 44&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;“We now have 44 projects that pledged to drop #python2 in less than 30 months. Some already did ! To see which one, and how to migrate with as few disruption as possible for both Python 2 and 3 users head to http://python3statement.org/ ”&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Supporting legacy Python: **it is a small but constant friction in the development of a lot of code.&lt;/li&gt;
&lt;li&gt;We are keen to use Python 3 to its full potential, and we currently accept the cost of writing cross-compatible code to allow a smooth transition, but we don’t intend to maintain this compatibility indefinitely. &lt;/li&gt;
&lt;li&gt;Nice “Why switch to Python 3?” section and resources&lt;/li&gt;
&lt;li&gt;Nice list of participating projects
&lt;ul&gt;
&lt;li&gt;Can we get some that are not data science? :)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Microsoft buys GitHub&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arstechnica.com/gadgets/2018/06/everyone-complaining-about-microsoft-buying-github-needs-to-offer-a-better-solution/?comments=1&amp;amp;unread=1"&gt;Everyone complaining about Microsoft buying GitHub needs to offer a better solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.microsoft.com/2018/06/04/microsoft-to-acquire-github-for-7-5-billion/"&gt;Microsoft to acquire GitHub for $7.5 billion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linuxfoundation.org/blog/microsoft-buys-github-the-linux-foundations-reaction/?SSAID=389818"&gt;Linux Foundation: Microsoft's GitHub buy is a win for open source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Coverage on Exponent podcast: &lt;a href="https://overcast.fm/ BihnqmtgQ"&gt;154 — Legacy Leverage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/AMA/comments/8pc8mf/im_nat_friedman_future_ceo_of_github_ama/?utm_source=amp&amp;amp;utm_medium=comment_list"&gt;Nat Friedman, future CEO of GitHub, AMA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Re gitlab:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://about.gitlab.com/2018/06/03/microsoft-acquires-github/"&gt;GitLab congratulates GitHub and Microsoft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/gitlab/status/1004143715844124673"&gt;GitLab imports from GitHub going up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our news and extras:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PyLadies Cleveland just launched:
&lt;ul&gt;
&lt;li&gt;First meeting June 26&lt;/li&gt;
&lt;li&gt;(FB Profile) &lt;a href="https://www.facebook.com/cleveland.pyladies.3"&gt;https://www.facebook.com/cleveland.pyladies.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(FB Community Page) &lt;a href="https://www.facebook.com/clepyladies/"&gt;https://www.facebook.com/clepyladies/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(Twitter) &lt;a href="https://twitter.com/CLEPyladies"&gt;https://twitter.com/CLEPyladies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(Meetup) &lt;a href="https://www.meetup.com/CLE-PyLadies/"&gt;https://www.meetup.com/CLE-PyLadies/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(YouTube) &lt;a href="https://www.youtube.com/channel/UCrX6AAcxXO_-8gitJWdjkuw"&gt;https://www.youtube.com/channel/UCrX6AAcxXO_-8gitJWdjkuw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#83 from __future__ import braces</title><link>https://pythonbytes.fm/episodes/show/83/from-future-import-braces</link><guid>62194ad3-7132-44e6-8152-f2be6b605466</guid><enclosure url="https://pythonbytes.fm/episodes/download/83/from-future-import-braces.mp3" length="13340669" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 22 Jun 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>from __future__ import braces</itunes:title><itunes:episode>83</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:29:22</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Special guest: &lt;a href="https://tryexceptpass.org/"&gt;Cristian Medina&lt;/a&gt;, &lt;a href="https://twitter.com/tryexceptpass"&gt;@tryexceptpass&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://codewith.mu/en/"&gt;&lt;strong&gt;Code with Mu: a simple Python editor for beginner programmers.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Found out about this from Nicholas Tollervey (&lt;a href="https://twitter.com/ntoll"&gt;@ntoll&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Built by an impressive list of people: &lt;a href="https://codewith.mu/en/"&gt;https://codewith.mu/en/&lt;/a&gt; thanks&lt;/li&gt;
&lt;li&gt;Beginning code editor that also works with Adafruit and micro:bit boards.&lt;/li&gt;
&lt;li&gt;From about:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Less is More.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Mu has only the most essential features, so users are not intimidated by a baffling interface.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tread the Path of Least Resistance.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Whatever the task, there is always only one obvious way to do it with Mu.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keep it Simple.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;It's quick and easy to learn Mu ~ complexity impedes a novice programmer's first steps.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Have fun!&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Learning should inspire fun ~ Mu helps learners quickly create and test working code.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cris #2:&lt;/strong&gt; &lt;a href="http://blog.lerner.co.il/python-parentheses-primer/"&gt;&lt;strong&gt;Python parenthesis primer&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Good for beginners. Covers the main uses of parenthesis, curly brackets and square brackets. Including code examples.&lt;/li&gt;
&lt;li&gt;Parenthesis
&lt;ul&gt;
&lt;li&gt;Callables.&lt;/li&gt;
&lt;li&gt;Operation prioritization.&lt;/li&gt;
&lt;li&gt;Tuples.&lt;/li&gt;
&lt;li&gt;Generator expressions.&lt;/li&gt;
&lt;li&gt;Skirting the indentation rules.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Square brackets
&lt;ul&gt;
&lt;li&gt;Lists and their comprehensions.&lt;/li&gt;
&lt;li&gt;Indexing.&lt;/li&gt;
&lt;li&gt;Slices.&lt;/li&gt;
&lt;li&gt;Comments also mention type hints.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Curly braces
&lt;ul&gt;
&lt;li&gt;Dictionaries and comprehensions.&lt;/li&gt;
&lt;li&gt;Sets and comprehensions.&lt;/li&gt;
&lt;li&gt;F-strings.&lt;/li&gt;
&lt;li&gt;str.format.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Try to import braces from &lt;code&gt;__future__&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; from __future__ import braces
      File "[HTML_REMOVED]", line 1
    SyntaxError: not a chance
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Michael #3:&lt;/strong&gt; &lt;a href="https://blog.qt.io/blog/2018/06/13/qt-python-5-11-released/"&gt;&lt;strong&gt;Python for Qt Released&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Qt Company happy to announce the first official release of Qt for Python (Pyside2).&lt;/li&gt;
&lt;li&gt;v5.11&lt;/li&gt;
&lt;li&gt;We hope we can receive plenty of feedback on what works and what does not. We want to patch early and often.&lt;/li&gt;
&lt;li&gt;Eventually the aim is to release Qt for Python 5.12 without the Tech Preview flag.&lt;/li&gt;
&lt;li&gt;Started two years ago with this &lt;a href="https://groups.google.com/forum/#!topic/pyside-dev/pqwzngAGLWE"&gt;announcement&lt;/a&gt; from &lt;a href="https://blog.qt.io/blog/author/lars/"&gt;Lars&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Get Qt for Python: The release supports Python 2.7, 3.5 &amp;amp; 3.6 on the three main desktop platforms. The packages can be obtained from download.qt.io or using pip with&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install --index-url=https://download.qt.io/official_releases/QtForPython/ pyside2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #4:&lt;/strong&gt; &lt;a href="https://realpython.com/python-itertools/"&gt;&lt;strong&gt;Itertools in Python 3, By Example&lt;/strong&gt;&lt;/a&gt;
&lt;a href="https://realpython.com/python-itertools/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by David Amos (&lt;a href="https://twitter.com/somacdivad"&gt;@somacdivad&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Iterators and generators are awesome.&lt;/li&gt;
&lt;li&gt;Nice discussion of lazy evaluation and iterator algebra.&lt;/li&gt;
&lt;li&gt;Naive approach using list can blow up in memory and time if you use huge datasets.&lt;/li&gt;
&lt;li&gt;Examples:
&lt;ul&gt;
&lt;li&gt;combinations, combinations_with_replacement, permutations&lt;/li&gt;
&lt;li&gt;count, repeat, cycle, accumulate&lt;/li&gt;
&lt;li&gt;product, tee, islice, chain&lt;/li&gt;
&lt;li&gt;filterfalse, takewhile, dropwhile&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cris #5:&lt;/strong&gt; &lt;a href="https://towardsdatascience.com/python-sets-and-set-theory-2ace093d1607"&gt;&lt;strong&gt;Python Sets and Set Theory&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nice primer on sets in python and a little set theory.&lt;/li&gt;
&lt;li&gt;How to build them: &lt;code&gt;set()&lt;/code&gt; vs &lt;code&gt;{``'``value1``'``,&lt;/code&gt; &lt;code&gt;'``value2``'``}&lt;/code&gt; vs &lt;code&gt;{name for name in name_list}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Membership tests (which are O(1))&lt;/li&gt;
&lt;li&gt;Set operations
&lt;ul&gt;
&lt;li&gt;Union&lt;/li&gt;
&lt;li&gt;Intersection&lt;/li&gt;
&lt;li&gt;Difference&lt;/li&gt;
&lt;li&gt;Symmetric Difference&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Frozen sets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://docs.python.org/3.7/whatsnew/3.7.html"&gt;&lt;strong&gt;Python 3.7 is coming soon&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Schedule
&lt;ul&gt;
&lt;li&gt;3.7.0 candidate 1: 2018-06-12&lt;/li&gt;
&lt;li&gt;3.7.0 final: 2018-06-27&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;What’s new / changed?
&lt;ul&gt;
&lt;li&gt;New syntax features: PEP 563, postponed evaluation of type annotations.&lt;/li&gt;
&lt;li&gt;New modules: dataclasses: PEP 557 – Data Classes&lt;/li&gt;
&lt;li&gt;New built-in features: PEP 553, the new breakpoint() function.&lt;/li&gt;
&lt;li&gt;Standard lib changes: 
&lt;ul&gt;
&lt;li&gt;The asyncio module has received new features, significant usability and performance improvements.&lt;/li&gt;
&lt;li&gt;The time module gained support for functions with nanosecond resolution.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Speed: 
&lt;ul&gt;
&lt;li&gt;Method calls are 20% faster&lt;/li&gt;
&lt;li&gt;3.7 is THE fastest Python available, period.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://app.pluralsight.com/library/courses/python-whats-new/"&gt;&lt;strong&gt;What’s new in Python 3.7 course&lt;/strong&gt;&lt;/a&gt; by Anthony Shaw&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Our news&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ahem… &lt;strong&gt;&lt;a href="https://www.mongodb.com/presentation/building-python-web-apps"&gt;https://www.mongodb.com/presentation/building-python-web-apps&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#84 Vibora web framework: It's fast, async, and means viper</title><link>https://pythonbytes.fm/episodes/show/84/vibora-web-framework-it-s-fast-async-and-means-viper</link><guid>ed71bacc-974c-4611-af2d-e2a2b2ad2dac</guid><enclosure url="https://pythonbytes.fm/episodes/download/84/vibora-web-framework-it-s-fast-async-and-means-viper.mp3" length="11563641" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 28 Jun 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Vibora web framework: It's fast, async, and means viper</itunes:title><itunes:episode>84</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:26:29</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Special guest &lt;a href="http://nnja.io"&gt;Nina Zakharenko&lt;/a&gt; (&lt;a href="http://twitter.com/nnja"&gt;@nnja&lt;/a&gt;) is a Cloud Developer Advocate at Microsoft!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://www.loganasherjones.com/2018/06/correcting-documentation-for-a-deployed-python-package/"&gt;&lt;strong&gt;Correcting Documentation for a Deployed Python Package&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"A clever way to release new documentation without releasing a new package that might confuse your user base.”&lt;/li&gt;
&lt;li&gt;Upload changes to pypi without bumping the version by using post release version numbers: &lt;code&gt;0.3.2&lt;/code&gt; =&amp;gt; &lt;code&gt;0.3.2.post1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Prevent documentation issues by using &lt;code&gt;restview --long-description&lt;/code&gt; before uploading. (or use md and really any md converter)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/tutorials/packaging-projects/"&gt;Packaging Python Projects&lt;/a&gt; : revamped pypa tutorial that works pretty darned well.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/guides/using-testpypi/"&gt;Using TestPyPI&lt;/a&gt; : more detailed instructions on testing with TestPyPI before pushing to final spot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Nina #2:&lt;/strong&gt; &lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;&lt;strong&gt;Flask Mega Tutorial&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazing resource for developers who’d like to learn about building web applications with Flask in Python.&lt;/li&gt;
&lt;li&gt;Covers important topics like databases, internationalization, and dates and times. &lt;/li&gt;
&lt;li&gt;Three full sections on deploying your web app using Linux, Heroku, or containers. &lt;/li&gt;
&lt;li&gt;&lt;a href="https://aka.ms/pythonbytes-vscodeflask"&gt;VS Code IDE has great Flask support&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Try Azure with a &lt;a href="http://aka.ms/azurepythonbytes"&gt;$200 credit to deploy Flask apps&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael&lt;/strong&gt; &lt;strong&gt;#3:&lt;/strong&gt; &lt;a href="https://hackernoon.com/10-common-security-gotchas-in-python-and-how-to-avoid-them-e19fbe265e03"&gt;&lt;strong&gt;10 common security gotchas in Python and how to avoid them&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Article by Anthony Shaw (congrats on being a 2018 PSF Fellow)&lt;/li&gt;
&lt;li&gt;The 10 topics 
&lt;ul&gt;
&lt;li&gt;Input injection (see &lt;a href="https://xkcd.com/327/"&gt;little bobby tables&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Use an ORM (db) or shlex module to escape input correctly (process)&lt;/li&gt;
&lt;li&gt;Parsing XML&lt;/li&gt;
&lt;li&gt;Assert statements&lt;/li&gt;
&lt;li&gt;Timing attacks&lt;/li&gt;
&lt;li&gt;A polluted site-packages or import path&lt;/li&gt;
&lt;li&gt;Temporary files&lt;/li&gt;
&lt;li&gt;Using yaml.load&lt;/li&gt;
&lt;li&gt;Pickles&lt;/li&gt;
&lt;li&gt;Using the system Python runtime and not patching it&lt;/li&gt;
&lt;li&gt;Not patching your dependencies&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #4:&lt;/strong&gt; &lt;a href="https://pre-commit.com/"&gt;&lt;strong&gt;pre-commit&lt;/strong&gt;&lt;/a&gt;
“A framework for managing and maintaining multi-language pre-commit hooks.”&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Describe pre-commit actions using yaml.&lt;/li&gt;
&lt;li&gt;Lots of projects already use it, like black. &lt;/li&gt;
&lt;li&gt;Does the work for you so you don’t have to read up on git commit hooks and such.&lt;/li&gt;
&lt;li&gt;Test out hooks ahead of time with &lt;code&gt;pre-commit run [HTML_REMOVED]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Nina #5: Python 3.7 release and PSF board members&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 3.7 has just been released today! 🎉&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python37-new-features/"&gt;New Features Overview Blog Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Debugging improvements - new &lt;code&gt;breakpoint()&lt;/code&gt; built-in function allows you to start an interactive session, like IPython. &lt;/li&gt;
&lt;li&gt;4 New PSF Board members elected - Congratulations to them!
&lt;ul&gt;
&lt;li&gt;Anna Ossowski&lt;/li&gt;
&lt;li&gt;Christopher Neugebauer&lt;/li&gt;
&lt;li&gt;Jeff Triplett&lt;/li&gt;
&lt;li&gt;Katie McLaughlin&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://vibora.io/"&gt;&lt;strong&gt;Vibora web framework&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A new speedy web framework&lt;/li&gt;
&lt;li&gt;Only 14 days old, but has 21 contributors and 2k stars&lt;/li&gt;
&lt;li&gt;Just like Flask: Vibora APIs were heavily inspired by the awesome Flask.&lt;/li&gt;
&lt;li&gt;Schemas validation, template engine, sessions and many more features were written from scratch to provide great performance along with an elegant async interface.&lt;/li&gt;
&lt;li&gt;Vibora also take advantage of multiple CPU cores by default thanks to the multi-processed architecture. Uvloop and other C speed-ups are used when available.&lt;/li&gt;
&lt;li&gt;Virtual Hosts: Maybe you have different domains and you want to host them all with a single Vibora application. &lt;/li&gt;
&lt;li&gt;Deployment has its own HTTP app server&lt;/li&gt;
&lt;li&gt;Docs need help&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our news and extras:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.qt.io/qt-for-python"&gt;Qt for Python Webinar&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;via &lt;a href="https://twitter.com/fredrikaverpil"&gt;Fredrik Averpil&lt;/a&gt;
&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#85 Visually debugging your Jupyter notebook</title><link>https://pythonbytes.fm/episodes/show/85/visually-debugging-your-jupyter-notebook</link><guid>09d41fba-613d-48c3-b21c-db16282441be</guid><enclosure url="https://pythonbytes.fm/episodes/download/85/visually-debugging-your-jupyter-notebook.mp3" length="11334970" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Tue, 03 Jul 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Visually debugging your Jupyter notebook</itunes:title><itunes:episode>85</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:24:40</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://www.bernat.tech/the-state-of-type-hints-in-python/"&gt;&lt;strong&gt;the state of type hints in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Therefore, type hints &lt;strong&gt;should be used whenever unit test are worth writing.”&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Type hints, especially for function arguments and return values, help make your code easier to read, and therefore, easier to maintain.&lt;/li&gt;
&lt;li&gt;This includes refactoring, allowing IDEs to help with code completion, and allow linters to find problems.&lt;/li&gt;
&lt;li&gt;For CPython
&lt;ul&gt;
&lt;li&gt;No runtime type inference happens.&lt;/li&gt;
&lt;li&gt;No performance tuning allowed. &lt;/li&gt;
&lt;li&gt;Of course, third party packages are not forbidden to do so.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Non-comment type annotations are available for functions in 3.0+&lt;/li&gt;
&lt;li&gt;Variable annotations for 3.6+&lt;/li&gt;
&lt;li&gt;In 3.7, you can postpone evaluation of annotations with:
from &lt;code&gt;__future__&lt;/code&gt; import annotations&lt;/li&gt;
&lt;li&gt;Interface stub files &lt;code&gt;.pyi&lt;/code&gt; files, are allowed now, but this is extra work and code to maintain.
&lt;ul&gt;
&lt;li&gt;typeshed has types for standard library plus many popular libraries.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;How do deal with multiple types, duck typing, and more discussed.&lt;/li&gt;
&lt;li&gt;A discussion of type generation and checking tools available now, including mypy&lt;/li&gt;
&lt;li&gt;See also: &lt;a href="https://youtu.be/GiZKuyLKvAA"&gt;Stanford Seminar - Optional Static Typing for Python - Talk by  Guido van Rossum&lt;/a&gt; 
&lt;ul&gt;
&lt;li&gt;Interesting discussion that starts with a bit of history of where mypy came from.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael&lt;/strong&gt; &lt;strong&gt;#2:&lt;/strong&gt; &lt;a href="https://nesdis.github.io/djongo/"&gt;&lt;strong&gt;Django MongoDB connector&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Via Robin on Twitter&lt;/li&gt;
&lt;li&gt;Use MongoDB as the backend for your Django project, without changing the Django ORM.&lt;/li&gt;
&lt;li&gt;Use Django Admin to access MongoDB&lt;/li&gt;
&lt;li&gt;Use Django with MongoDB data fields: Use MongoDB embedded documents and embedded arrays in Django Models.&lt;/li&gt;
&lt;li&gt;Connect 3rd party apps with MongoDB: Apps like Django Rest Framework and Viewflow app that use Django Models integrate easily with MongoDB.&lt;/li&gt;
&lt;li&gt;Requirements:
&lt;ul&gt;
&lt;li&gt;Python 3.6 or higher.&lt;/li&gt;
&lt;li&gt;MongoDB 3.4 or higher.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Example&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;inner_qs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Blog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Ch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blog__name__in&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;inner_qs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Brian #&lt;em&gt;*&lt;/strong&gt;3&lt;strong&gt;&lt;/em&gt;&lt;em&gt;:&lt;/strong&gt;  &lt;strong&gt;&lt;/em&gt;&lt;em&gt;&lt;a href="https://amir.rachum.com/blog/2018/06/23/python-multiline-idioms/"&gt;&lt;/strong&gt;Python Idioms: Multiline Strings&lt;/em&gt;*&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;or “How I use dedent”&lt;/li&gt;
&lt;li&gt;Example:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_snippet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;code_snippet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;textwrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dedent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;            int main(int argc, char* argv[]) {&lt;/span&gt;
&lt;span class="s2"&gt;                return 0;&lt;/span&gt;
&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code_snippet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://github.com/brettvanderwerff/Flaskerizer"&gt;&lt;strong&gt;Flaskerizer&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A program that automatically creates Flask apps from Bootstrap templates &lt;/li&gt;
&lt;li&gt;Bootstrap templates from websites like &lt;a href="https://Bootstrapmade.com/"&gt;https://Bootstrapmade.com/&lt;/a&gt; and &lt;a href="https://startBootstrap.com"&gt;https://startBootstrap.com&lt;/a&gt; are a fast way to get very dynamic website up and running&lt;/li&gt;
&lt;li&gt;Bootstap templates typically don't work "out of the box" with the python web framework Flask and require some tedious directory building and broken link fixing before being functional with Flask. &lt;/li&gt;
&lt;li&gt;The Flaskerizer automates the necessary directory building and link creation needed to make Bootstrap templates work "out of the box" with Flask. &lt;/li&gt;
&lt;li&gt;Queue black turtleneck!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #*5:&lt;/strong&gt; &lt;a href="https://realpython.com/learn-python-the-methodical-way/"&gt;&lt;strong&gt;Learn Python the Methodical Way&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From the article: 
&lt;ul&gt;
&lt;li&gt;Make your way through a tutorial/chapter that teaches you some discrete, four-to-six-step skill.&lt;/li&gt;
&lt;li&gt;Write down those steps as succinctly and generically as possible.&lt;/li&gt;
&lt;li&gt;Put the tutorial/chapter and its solutions away.&lt;/li&gt;
&lt;li&gt;Build your project from scratch, peeking only when you’re stuck.&lt;/li&gt;
&lt;li&gt;Erase what you built.&lt;/li&gt;
&lt;li&gt;Do the project again.&lt;/li&gt;
&lt;li&gt;Drink some water.&lt;/li&gt;
&lt;li&gt;Erase what you built and do it again.&lt;/li&gt;
&lt;li&gt;A day or two later, delete your work and do it again – this time without peeking even once.&lt;/li&gt;
&lt;li&gt;Erase your work and do it again.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The notion of treating code like you treat creative writing with rough drafts and sometimes complete do-overs is super liberating. &lt;/li&gt;
&lt;li&gt;You’ll be surprised how fast you can do something the second time, the third time, the fourth time. And it’s very gratifying.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://medium.com/ibm-watson-data-lab/the-visual-python-debugger-for-jupyter-notebooks-youve-always-wanted-761713babc62"&gt;&lt;strong&gt;PixieDebugger&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Visual Python Debugger for Jupyter Notebooks You’ve Always Wanted&lt;/li&gt;
&lt;li&gt;Jupyter already supports pdb for simple debugging, where you can manually and sequentially enter commands to do things like inspect variables, set breakpoints, etc.&lt;/li&gt;
&lt;li&gt;Check out the video to get a good idea of its usage: &lt;a href="https://www.youtube.com/watch?v=Z-tPeEkVqjk"&gt;https://www.youtube.com/watch?v=Z-tPeEkVqjk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#86 Make your NoSQL async and await-able with uMongo</title><link>https://pythonbytes.fm/episodes/show/86/make-your-nosql-async-and-await-able-with-umongo</link><guid>0eb9833b-982f-4081-9c55-e91e9855722b</guid><enclosure url="https://pythonbytes.fm/episodes/download/86/make-your-nosql-async-and-await-able-with-umongo.mp3" length="20753927" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 13 Jul 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Make your NoSQL async and await-able with uMongo</itunes:title><itunes:episode>86</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:26:04</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Special guest Bob Belderbos: &lt;a href="https://twitter.com/bbelderbos"&gt;@bbelderbos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://github.com/getsentry/responses"&gt;&lt;strong&gt;responses&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“A utility for mocking out the Python Requests library.”&lt;/li&gt;
&lt;li&gt;From Sentry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import responses
import requests

@responses.activate
def test_simple():
    responses.add(responses.GET, 'http://twitter.com/api/1/foobar',
                  json={'error': 'not found'}, status=404)
    resp = requests.get('http://twitter.com/api/1/foobar')
    assert resp.json() == {"error": "not found"}
    assert len(responses.calls) == 1
    assert responses.calls[0].request.url == 'http://twitter.com/api/1/foobar'
    assert responses.calls[0].response.text == '{"error": "not found"}'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Bob #2:&lt;/strong&gt; &lt;a href="https://pythonforbiologists.com/29-common-beginner-errors-on-one-page/"&gt;&lt;strong&gt;29 common beginner Python errors on one page&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decision trees / graphics are nice to digest and concise, it wraps a lot of experience on one slide&lt;/li&gt;
&lt;li&gt;Knowing about common errors can safe you a lot of time (the guide I wish I had when I started coding in Python)&lt;/li&gt;
&lt;li&gt;Reminded me of struggles I had when I started in Python, for example TypeErrors when converting suspected ints to strings, regexes before discovering raw strings&lt;/li&gt;
&lt;li&gt;It made me think of related issues newer Pythonistas face, for example “I am reading a file but getting no input” can be translated to “I am looping over a generator for the second time and don’t get any output”&lt;/li&gt;
&lt;li&gt;Made me realize that some things are subtle, like comparing 3 == “3” or require good knowledge of stdlib (sorted returning new sequence vs inplace sort() for example)&lt;/li&gt;
&lt;li&gt;Made me reflect on how much hand holding you would give your students when teaching. Part of the learning is in the struggle. &lt;/li&gt;
&lt;li&gt;About the source, I like seeing Python being taught in all different kind of domains, in this case biology.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #3:&lt;/strong&gt; &lt;a href="https://github.com/Scille/umongo"&gt;&lt;strong&gt;μMongo&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;μMongo is a Python MongoDB ODM. &lt;/li&gt;
&lt;li&gt;It inception comes from two needs: 
&lt;ul&gt;
&lt;li&gt;the lack of async ODM&lt;/li&gt;
&lt;li&gt;the difficulty to do document (un)serialization with existing ODMs.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;a few design choices:
&lt;ul&gt;
&lt;li&gt;Stay close to the standards MongoDB driver to keep the same API when possible: use &lt;code&gt;find({"field": "value"})&lt;/code&gt; like usual but retrieve your data nicely OO wrapped !&lt;/li&gt;
&lt;li&gt;Work with multiple drivers (PyMongo, TxMongo, motor_asyncio and mongomock for the moment)&lt;/li&gt;
&lt;li&gt;Tight integration with Marshmallow serialization library to easily dump and load your data with the outside world&lt;/li&gt;
&lt;li&gt;i18n integration to localize validation error messages&lt;/li&gt;
&lt;li&gt;Free software: MIT license&lt;/li&gt;
&lt;li&gt;Test with 90%+ coverage ;-)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;async / await support through Motor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #4:&lt;/strong&gt; &lt;a href="https://www.dataquest.io/blog/basic-statistics-with-python-descriptive-statistics/"&gt;&lt;strong&gt;Basic Statistics in Python: Descriptive Statistics&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cool use of Python to teach basic statistics topics. &lt;/li&gt;
&lt;li&gt;Includes code snippets to explain different concepts like min, max, mean, median, mode, …&lt;/li&gt;
&lt;li&gt;However, after you understand the math, DON’T write your own functions.
&lt;ul&gt;
&lt;li&gt;use built in Python functions and  t&lt;a href="https://docs.python.org/3/library/statistics.html"&gt;he statistics library built in to Python&lt;/a&gt; (or numpy if you are on older Python versions).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example from article:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sum_score = sum(scores)
num_score = len(scores)
avg_score = sum_score/num_score
avg_score
&amp;gt;&amp;gt;&amp;gt; 87.8884184721394
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using built in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; x = (2, 2, 3, 100)
&amp;gt;&amp;gt;&amp;gt; min(x), max(x)
(2, 100)
&amp;gt;&amp;gt;&amp;gt; import statistics as s
&amp;gt;&amp;gt;&amp;gt; s.mean(x), s.median(x), s.mode(x)
(26.75, 2.5, 2)
&amp;gt;&amp;gt;&amp;gt; s.pstdev(x), s.pvariance(x)
(42.29287765097097, 1788.6875)
&amp;gt;&amp;gt;&amp;gt; s.stdev(x), s.variance(x)
(48.835608593184, 2384.9166666666665)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Bob #5:&lt;/strong&gt; &lt;a href="https://realpython.com/python-strings/#.W0P9uWMUJ7U.twitter"&gt;&lt;strong&gt;Strings and Character Data in Python&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Everything you need to know to work with strings and more …&lt;/li&gt;
&lt;li&gt;Similar to &lt;a href="https://realpython.com/python-itertools/"&gt;that great itertools article&lt;/a&gt; you shared some weeks ago: exhaustive overview&lt;/li&gt;
&lt;li&gt;Nice re-usable code snippets and explanation of basic concepts, ideal for beginners but you likely will get something out of it, few useful bites:
&lt;ul&gt;
&lt;li&gt;Instead of &lt;code&gt;try int(…) except&lt;/code&gt;, you can use &lt;code&gt;isdigit()&lt;/code&gt; on a string&lt;/li&gt;
&lt;li&gt;You can use &lt;code&gt;isspace()&lt;/code&gt; to see if all characters of a nonempty string are whitespace characters ( &lt;code&gt;' '&lt;/code&gt;, tab &lt;code&gt;'\t'&lt;/code&gt;, and newline &lt;code&gt;'\n'&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;It’s easy to make a header in your Python scripts: &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 'bar'.center(10, '-')
        '---bar----'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;- Replace up till n occurrences:
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 'foo bar foo baz foo qux'.replace('foo', 'grault', 2)
        'grault bar grault baz foo qux'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;- Strip multiple characters from both ends of a string:
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 'www.realpython.com'.strip('w.moc')
        'realpython'
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;- Add leading padding to a string with `zfill`:
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; '42'.zfill(5)
        '00042'
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;This also reminded me of Python’s polymorphism, for example str.find and str.index work on both strings as well as lists&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; 'foo bar foo baz foo qux'.index('baz')
      12
    &amp;gt;&amp;gt;&amp;gt; 'foo bar foo baz foo qux'.split().index('baz')
      3
    &amp;gt;&amp;gt;&amp;gt; 'foo bar foo baz foo qux'.count('foo')
      3
    &amp;gt;&amp;gt;&amp;gt; 'foo bar foo baz foo qux'.split().count('foo')
      3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;strong&gt;PEP 572&lt;/strong&gt;: &lt;a href="https://twitter.com/raymondh/status/1014210487112818689"&gt;&lt;strong&gt;Assignment expressions accepted&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Whoa, check out that twitter conversation&lt;/li&gt;
&lt;li&gt;Splits 2 statements into an expressions (so they can be part of list comprehensions, etc).&lt;/li&gt;
&lt;li&gt;Not sure I like it but here you go:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Handle a matched regex
if (match := pattern.search(data)) is not None:
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Contrast old and new:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# old
if self._is_special:
    ans = self._check_nans(context=context)
    if ans:
        return ans


# new
if self._is_special and (ans := self._check_nans(context=context)):
    return ans
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Our news:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Michael: New course coming! Data-driven web apps in Pyramid&lt;/li&gt;
&lt;li&gt;Bob: Be sure to visit &lt;a href="https://codechalleng.es/"&gt;PyBites Code Challenges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Brian: More &lt;a href="http://testandcode.com/"&gt;Test and Code&lt;/a&gt; episodes coming!&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#87 Guido van Rossum steps down</title><link>https://pythonbytes.fm/episodes/show/87/guido-van-rossum-steps-down</link><guid>685e17ed-4066-406f-a4df-8216006a24b0</guid><enclosure url="https://pythonbytes.fm/episodes/download/87/guido-van-rossum-steps-down.mp3" length="16098413" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Tue, 17 Jul 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Guido van Rossum steps down</itunes:title><itunes:episode>87</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:33:20</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Datadog: &lt;a href="http://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.fm/datadog&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Special guests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Brett Cannon: &lt;a href="https://twitter.com/brettsky"&gt;&lt;strong&gt;@brettsky&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Carol Willing: &lt;a href="https://twitter.com/WillingCarol"&gt;&lt;strong&gt;@WillingCarol&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The topic: Guido steps down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The announcement&lt;/strong&gt;: &lt;a href="https://mail.python.org/pipermail/python-committers/2018-July/005664.html"&gt;&lt;strong&gt;Transfer of Power&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Now that PEP 572 is done, I don't ever want to have to fight so hard for a PEP and find that so many people despise my decisions.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;I would like to remove myself entirely from the decision process. I'll still be there for a while as an ordinary core dev, and I'll still be available to mentor people -- possibly more available. But I'm basically giving myself a permanent vacation from being BDFL, and you all will be on your own.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;After all that's eventually going to happen regardless -- there's still that bus lurking around the corner, and I'm not getting younger... (I'll spare you the list of medical issues.)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;I am not going to appoint a successor.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;So what are you all going to do? Create a democracy? Anarchy? A dictatorship? A federation?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;I'm not worried about the day to day decisions&lt;/strong&gt; in the issue tracker or on GitHub. Very rarely I get asked for an opinion, and usually it's not actually important. So this can just be dealt with as it has always been.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;The decisions that most matter are probably&lt;/em&gt;&lt;/strong&gt;
   &lt;strong&gt;&lt;em&gt;- How are PEPs decided&lt;/em&gt;&lt;/strong&gt;
   &lt;strong&gt;&lt;em&gt;- How are new core devs inducted&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;We may be able to write up processes for these things as PEPs (maybe those PEPs will form a kind of constitution). But here's the catch. I'm going to try and let you all (the current committers) figure it out for yourselves.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Note that there's still the CoC -- if you don't like that document your only option might be to leave this group voluntarily. Perhaps there are issues to decide like when should someone be kicked out (this could be banning people from python-dev or python-ideas too, since those are also covered by the CoC).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Finally. A reminder that the archives of this list are public ( &lt;a href="https://mail.python.org/pipermail/python-committers/"&gt;https://mail.python.org/pipermail/python-committers/&lt;/a&gt; ) although membership is closed (limited to core devs).&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;I'll still be here, but I'm trying to let you all figure something out for yourselves. I'm tired, and need a very long break.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;--Guido van Rossum (python.org/~guido)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Why it happened?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;e.g. PEP 572 burn-out/treatment&lt;/li&gt;
&lt;li&gt;View the twitter thread on &lt;a href="https://twitter.com/raymondh/status/1014210487112818689"&gt;&lt;strong&gt;this announcement tweet&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What this means?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“keep calm and keep coding”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Is there a danger of Python losing its momentum from this?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What comes next?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;current state of the governance discussion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What needs to be done to reduce this kind of pressure?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Brett’s &lt;a href="https://www.youtube.com/watch?v=-Nk-8fSJM6I"&gt;&lt;strong&gt;talk about setting open source expectations at PyCascades&lt;/strong&gt;&lt;/a&gt; is very relevant.&lt;/p&gt;</description></item><item><title>#88 Python has brought computer programming to a vast new audience</title><link>https://pythonbytes.fm/episodes/show/88/python-has-brought-computer-programming-to-a-vast-new-audience</link><guid>0db0a0c7-d778-4f97-93e4-2ea756d0c9d8</guid><enclosure url="https://pythonbytes.fm/episodes/download/88/python-has-brought-computer-programming-to-a-vast-new-audience.mp3" length="17134220" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 27 Jul 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Python has brought computer programming to a vast new audience</itunes:title><itunes:episode>88</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:23:08</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Datadog: &lt;a href="http://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.fm/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://realpython.com/documenting-python-code/"&gt;&lt;strong&gt;Documenting Python Code: A Complete Guide&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Article describes the why you should document, comments vs docstrings vs separate documentation.&lt;/li&gt;
&lt;li&gt;Let’s zoom in on comments, because I don’t think many people get how to use comments effectively.&lt;/li&gt;
&lt;li&gt;Commenting
&lt;ul&gt;
&lt;li&gt;comments are for you and other developers to help maintain the code. They can also help users understand your mental model and design. the source is often used as documentation if the other docs are lacking or confusing or incomplete.&lt;/li&gt;
&lt;li&gt;Comments start with &lt;code&gt;#&lt;/code&gt; and are not accessible at runtime.&lt;/li&gt;
&lt;li&gt;Comment uses:
&lt;ul&gt;
&lt;li&gt;planning and reviewing&lt;/li&gt;
&lt;li&gt;explaining intent&lt;/li&gt;
&lt;li&gt;explaining complicated algorithms&lt;/li&gt;
&lt;li&gt;tagging TODO, BUG, or FIXME sections.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Article includes some good tips:
&lt;ul&gt;
&lt;li&gt;keep comments as close to code it’s describing as possible.&lt;/li&gt;
&lt;li&gt;don’t try to format it with ascii alignment or whatever&lt;/li&gt;
&lt;li&gt;minimal, most of your code shouldn’t need comments.&lt;/li&gt;
&lt;li&gt;remove planning comments when they aren’t needed any more&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Docstrings:
&lt;ul&gt;
&lt;li&gt;available at runtime via &lt;code&gt;help()&lt;/code&gt;, &lt;code&gt;thing.__doc__&lt;/code&gt;, and through many code completion tools in IDEs&lt;/li&gt;
&lt;li&gt;Can be used at function, class, module, and package level.&lt;/li&gt;
&lt;li&gt;Should help the user as if they don’t have the source available to look at.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Also covered:
&lt;ul&gt;
&lt;li&gt;Commenting with type hints&lt;/li&gt;
&lt;li&gt;How to use docstrings.&lt;/li&gt;
&lt;li&gt;Docstring standard practices and formatting.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Necessary elements of documenting projects&lt;/li&gt;
&lt;li&gt;Using tools like Sphinx, MkDocs, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2: &lt;a href="https://blog.github.com/2018-07-12-security-vulnerability-alerts-for-python/"&gt;Security vulnerability alerts for Python at Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Last year, GitHub released security alerts that track security vulnerabilities in Ruby and JavaScript packages. &lt;/li&gt;
&lt;li&gt;They have identified millions of vulnerabilities and have prompted many patches.&lt;/li&gt;
&lt;li&gt;As of this week, Python users can now access the dependency graph and receive security alerts whenever their repositories depend on packages with known security vulnerabilities.&lt;/li&gt;
&lt;li&gt;See it under insights &amp;gt; dependency graph&lt;/li&gt;
&lt;li&gt;Using it:
&lt;ul&gt;
&lt;li&gt;Ensure that you have checked in a requirements.txt or Pipfile.lock file inside of repositories that have Python code.&lt;/li&gt;
&lt;li&gt;Give access to private repos&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://rushter.com/blog/python-virtualenv/"&gt;&lt;strong&gt;How virtual environment libraries work in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Have you ever wondered what happens when you activate a virtual environment and how it works internally? Here is a quick overview of internals behind popular virtual environments, e.g., virtualenv, virtualenvwrapper, conda, pipenv.”&lt;/li&gt;
&lt;li&gt;“When Python starts its interpreter, it searches for the site-specific directory where all packages are stored. The search starts at the parent directory of a Python executable location and continues by backtracking the path (i.e., looking at the parent directories) until it reaches the root directory. To determine if it's a site-specific directory, Python looks for the &lt;code&gt;os.py&lt;/code&gt; module, which is a mandatory requirement by Python in order to work.”&lt;/li&gt;
&lt;li&gt;virtualenv creates a directory with some bin files, and the lib that mostly points to the parent Python site versions using symbolic links.&lt;/li&gt;
&lt;li&gt;Python 3.3, with PEP 405, added a pyvenv.cfg file that allows the interpreter itself to be a symbolic link, as well as an option to use system site packages, saving on lots of symbolic links at the start.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael&lt;/strong&gt; 4:** &lt;a href="http://blog.qt.io/blog/2018/07/17/qt-python-available-pypi/"&gt;&lt;strong&gt;Qt for Python available at PyPi&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Announcement: Finally the technical preview of Qt for Python is available at the Python Package Index (PyPI).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install PySide2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Try it at one of the demo apps &lt;strong&gt;&lt;a href="http://blog.qt.io/blog/2018/05/04/hello-qt-for-python/"&gt;http://blog.qt.io/blog/2018/05/04/hello-qt-for-python/&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://www.pythonforthelab.com/blog/learning-not-to-handle-exceptions/"&gt;&lt;strong&gt;Learning (not) to Handle Exceptions&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understanding exceptions is important even if you never throw your own, since much of Python and 3rd party packages utilize them quite a bit.&lt;/li&gt;
&lt;li&gt;Try to catch specific exceptions. Don’t have &lt;code&gt;except:&lt;/code&gt; catch everything.&lt;/li&gt;
&lt;li&gt;If you really need to intercept any exception, consider re-raising it with &lt;code&gt;raise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Some tips with handling multiple exceptions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;finally&lt;/code&gt; can be used for stuff that needs to run regardless of an exception or not&lt;/li&gt;
&lt;li&gt;&lt;code&gt;else&lt;/code&gt; runs if no exception occurs.&lt;/li&gt;
&lt;li&gt;You can use both &lt;code&gt;finally&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Also:
&lt;ul&gt;
&lt;li&gt;tracebacks&lt;/li&gt;
&lt;li&gt;custom exceptions&lt;/li&gt;
&lt;li&gt;best practices&lt;/li&gt;
&lt;li&gt;adding arguments to exceptions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.economist.com/science-and-technology/2018/07/21/python-has-brought-computer-programming-to-a-vast-new-audience"&gt;&lt;strong&gt;Python has brought computer programming to a vast new audience&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Features quotes from Guido van Rossum&lt;/li&gt;
&lt;li&gt;Interesting history&lt;/li&gt;
&lt;li&gt;Seeing with “outside eyes” is pretty novel and something we don’t often get to do.&lt;/li&gt;
&lt;li&gt;More about the meteoric growth of Python&lt;/li&gt;
&lt;li&gt;Warnings about AI in the hands of half educated novices&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#89 A tenacious episode that won't give up</title><link>https://pythonbytes.fm/episodes/show/89/a-tenacious-episode-that-won-t-give-up</link><guid>aff47349-3cf5-4cff-a425-3b8f8c78304e</guid><enclosure url="https://pythonbytes.fm/episodes/download/89/a-tenacious-episode-that-won-t-give-up.mp3" length="18862783" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Sat, 04 Aug 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>A tenacious episode that won't give up</itunes:title><itunes:episode>89</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:28:50</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;h1&gt;Python Bytes 89&lt;/h1&gt;

&lt;p&gt;Sponsored by Datadog -- &lt;a href="http://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.fm/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://tenacity.readthedocs.io/en/latest/"&gt;&lt;strong&gt;tenacity&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Tenacity is a general-purpose retrying library to simplify the task of adding retry behavior to just about anything.”&lt;/li&gt;
&lt;li&gt;Example (Also, nice Trollhunters reference):&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    import random
    from tenacity import retry

    @retry
    def do_something_unreliable():
        if random.randint(0, 10) &amp;gt; 1:
            raise IOError("Broken sauce, everything is hosed!!!")
        else:
            return "Awesome sauce!"  # Toby says this frequently

    print(do_something_unreliable())
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Features:
&lt;ul&gt;
&lt;li&gt;Generic Decorator API&lt;/li&gt;
&lt;li&gt;Specify stop condition (i.e. limit by number of attempts)&lt;/li&gt;
&lt;li&gt;Specify wait condition (i.e. exponential backoff sleeping between attempts)&lt;/li&gt;
&lt;li&gt;Customize retrying on Exceptions&lt;/li&gt;
&lt;li&gt;Customize retrying on expected returned result&lt;/li&gt;
&lt;li&gt;Retry on coroutines&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://hackernoon.com/why-is-python-so-slow-e5074b6fe55b"&gt;&lt;strong&gt;Why is Python so slow?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Answer this question: &lt;em&gt;When Python completes a comparable application 2–10x slower than another language, why is it slow and can’t we make it faster?&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Here are the top theories:
&lt;ul&gt;
&lt;li&gt;“It’s the GIL (Global Interpreter Lock)”&lt;/li&gt;
&lt;li&gt;“It’s because its interpreted and not compiled”&lt;/li&gt;
&lt;li&gt;“It’s because its a dynamically typed language”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;“It’s the GIL”&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Modern computers come with CPU’s that have multiple cores&lt;/li&gt;
&lt;li&gt;For web apps, it might not matter (e.g. &lt;a href="https://training.talkpython.fm/"&gt;https://training.talkpython.fm/&lt;/a&gt; has 16 worker processes, &lt;a href="https://talkpython.fm/"&gt;https://talkpython.fm/&lt;/a&gt; has 8 workers)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;“It’s because its an interpreted language”&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;I hear this a lot and I find it a gross-simplification of the way CPython actually works.&lt;/li&gt;
&lt;li&gt;JIT vs. NonJIT is interesting (startup time too)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;“It’s because its a dynamically typed language”&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;In a “Statically-Typed” language, you have to specify the type of a variable when it is declared. Those would include C, C++, Java, C#, Go.&lt;/li&gt;
&lt;li&gt;In a dynamically-typed language, there are still the concept of types, but the type of a variable is dynamic.&lt;/li&gt;
&lt;li&gt;Not having to declare the type isn’t what makes Python slow&lt;/li&gt;
&lt;li&gt;It’s this design that makes it incredibly hard to optimize Python.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Python is primarily slow because of its dynamic nature and versatility. It can be used as a tool for all sorts of problems, where more optimized and faster alternatives are probably available.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3&lt;/strong&gt;: &lt;a href="https://madewith.mu/mu/users/2018/07/30/keynoting-mu.html"&gt;&lt;strong&gt;Keynoting with Mu&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;David Beazley gave his &lt;a href="https://youtu.be/U66KuyD3T0M"&gt;EuroPython talk/demo “Die Threads”&lt;/a&gt; using Mu.&lt;/li&gt;
&lt;li&gt;Article also notes that simple tools are great not just for learning, but for teaching, as the extra clutter of a full power editor doesn’t distract too much.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.nexedi.com/NXD-Blog.Multicore.Python.HTTP.Server"&gt;&lt;strong&gt;A multi-core Python HTTP server (much) faster than Go (spoiler: Cython)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exploring  the question, “So, I’ve heard Python is slow… is it?”&lt;/li&gt;
&lt;li&gt;A multi-core Python HTTP server that is about 40% to 110% faster than Go can be built by relying on the Cython language and LWAN C library. &lt;/li&gt;
&lt;li&gt;Just a proof of concept validates the possibility of high performance system programming in the Cython language. &lt;/li&gt;
&lt;li&gt;Primarily interesting as a highlight of Cython
&lt;ul&gt;
&lt;li&gt;Cython is both an optimizing static compiler and a hybrid language. It mainly gives the ability to:&lt;/li&gt;
&lt;li&gt;write Python code that can call back and forth from and to C/C++;&lt;/li&gt;
&lt;li&gt;add static typing using C declarations to Python code in order to boost performance;&lt;/li&gt;
&lt;li&gt;release the GIL in some code sections.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cython generates very efficient C code, which is then compiled into a module that Python can import. So it is an ideal language for wrapping external C libraries, and for developing C modules that speed up the execution of Python code.&lt;/li&gt;
&lt;li&gt;However, all experiments we are aware that rely on Cython for system programming fail short in at least two ways:
&lt;ul&gt;
&lt;li&gt;as soon as some Python code is invoked (as opposed to pure Cython &lt;code&gt;cdef&lt;/code&gt; code), &lt;a href="https://www.nexedi.com/NXD-Document.Blog.UVLoop.Python.Benchmark"&gt;performance degrades by one or two orders of magnitude&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;benchmarks are most of the time provided for single core execution only, which is somehow unfair considering Golang's ability to scale up on multiple cores.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5&lt;/strong&gt;: &lt;a href="https://www.jetbrains.com/pycharm/whatsnew/#v2018-2-python"&gt;&lt;strong&gt;PyCharm  2018.2 beefs up pytest support&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Honestly, I’m super excited about this release to help my team navigate to all of the fixtures I create on a regular basis.&lt;/li&gt;
&lt;li&gt;This is the release I’ve been waiting for.&lt;/li&gt;
&lt;li&gt;I can now fully utilize the power of pytest from PyCharm&lt;/li&gt;
&lt;li&gt;Here’s the few things that were missing that now work great:
&lt;ul&gt;
&lt;li&gt;Autocomplete fixtures from various sources&lt;/li&gt;
&lt;li&gt;Quick documentation and navigation to fixtures&lt;/li&gt;
&lt;li&gt;Renaming a fixture from either the definition or a usage&lt;/li&gt;
&lt;li&gt;Support for pytest’s parametrize&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;See also: &lt;a href="https://blog.jetbrains.com/pycharm/2018/08/pycharm-2018-2-and-pytest-fixtures/"&gt;PyCharm 2018.2 and pytest Fixtures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;But if you really want to understand fixtures quickly, &lt;a href="https://amzn.to/2KfB9Dz"&gt;read chapters 3 and 4 of the pytest book.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6&lt;/strong&gt;: &lt;a href="https://github.com/facebookincubator/xar"&gt;&lt;strong&gt;XAR for Facebook&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;XAR lets you package many files into a single self-contained executable file. This makes it easy to distribute and install.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;.xar&lt;/code&gt; file is a read-only file system image which, when mounted, looks like a regular directory to user-space programs. This requires a one-time installation of a driver for this file system (&lt;a href="https://en.wikipedia.org/wiki/SquashFS"&gt;SquashFS&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;There are two primary use cases for XAR files. 
&lt;ul&gt;
&lt;li&gt;Simply collecting a number of files for automatic, atomic mounting somewhere on the filesystem. &lt;/li&gt;
&lt;li&gt;By making the XAR file executable and using the xarexec helper, a XAR becomes a self-contained package of executable code and its data. A popular example is Python application archives that include all Python source code files, as well as native shared libraries, configuration files, other data.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Advantages of XAR for Python usage
&lt;ul&gt;
&lt;li&gt;SquashFS looks like regular files on disk to Python. This lets it use regular imports which are better supported by CPython.&lt;/li&gt;
&lt;li&gt;SquashFS looks like regular files to your application, too. You don't need to use &lt;code&gt;pkg_resources&lt;/code&gt; or other tricks to access data files in your package.&lt;/li&gt;
&lt;li&gt;SquashFS with Zstandard compression saves disk space, also compared to a ZIP file.&lt;/li&gt;
&lt;li&gt;SquashFS doesn't require unpacking of &lt;code&gt;.so&lt;/code&gt; files to a temporary location like ZIP files do.&lt;/li&gt;
&lt;li&gt;SquashFS is faster to start up than unpacking a ZIP file. You only need to mount the file system once. Subsequent calls to your application will reuse the existing mount.&lt;/li&gt;
&lt;li&gt;SquashFS only decompresses the pages that are used by the application, and decompressed pages are cached in the page cache.&lt;/li&gt;
&lt;li&gt;SquashFS is read-only so the integrity of your application is guaranteed compared to using virtualenvs or unpacking to a temporary directory.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Performance is interesting too&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extras:&lt;/p&gt;

&lt;p&gt;Brian:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/numpy/numpy/releases/tag/v1.15.0"&gt;&lt;strong&gt;numpy 1.15.0&lt;/strong&gt;&lt;/a&gt; just released recently. Switched testing to pytest.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Michael:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SciPy 2018 &lt;a href="https://www.youtube.com/watch?v=y7zGnKzaKIw&amp;amp;index=1&amp;amp;list=PLYx7XA2nY5Gd-tNhm79CNMe_qvi35PgUR"&gt;&lt;strong&gt;videos are out&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyOhio 2018 &lt;a href="https://www.youtube.com/playlist?list=PL2k6bbM_wgjvY02EFUMhwHRyaSaEokT2B"&gt;&lt;strong&gt;videos are out&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.papercall.io/pyconca2018"&gt;&lt;strong&gt;Call for papers&lt;/strong&gt;&lt;/a&gt; at PyCon Canada in Toronto&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pybay.com/"&gt;&lt;strong&gt;PyBay 2018&lt;/strong&gt;&lt;/a&gt; conference in a few weeks&lt;/li&gt;
&lt;li&gt;My latest course, &lt;a href="https://training.talkpython.fm/courses/explore_pyramid/building-data-driven-web-applications-in-python-with-pyramid-sqlalchemy-and-bootstrap"&gt;&lt;strong&gt;Building data-driven web apps with Pyramid and SQLAlchemy&lt;/strong&gt;&lt;/a&gt;, is out!&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#90 A Django Async Roadmap</title><link>https://pythonbytes.fm/episodes/show/90/a-django-async-roadmap</link><guid>9274a3a7-320f-4e9a-a863-ce43b0b42def</guid><enclosure url="https://pythonbytes.fm/episodes/download/90/a-django-async-roadmap.mp3" length="11230448" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Tue, 07 Aug 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>A Django Async Roadmap</itunes:title><itunes:episode>90</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:25:18</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Digital Ocean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;pythonbytes.fm/digitalocean&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Brian #1: &lt;a href="https://www.youtube.com/playlist?list=PLYCpMb24GpOC704uO9svUrihl-HY1tTJJ"&gt;Reproducible Data Analysis in Jupyter&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazing series of videos by Jake Vanderplas&lt;/li&gt;
&lt;li&gt;Exploring a data set through visualization in a Jupyter notebook&lt;/li&gt;
&lt;li&gt;There’s a lot of dense material there, from saving datasets to files, plotting in the notebook as opposed to outside in a separate window, using resampling, … &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Michael #2: &lt;a href="https://github.com/MikeTheWatchGuy/PySimpleGUI"&gt;PySimpleGUI - For simple Python GUIs&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Via Mike Barnett&lt;/li&gt;
&lt;li&gt;Looking to take your Python code from the world of command lines and into the convenience of a GUI? &lt;/li&gt;
&lt;li&gt;Have a Raspberry Pi with a touchscreen that's going to waste because you don't have the time to learn a GUI SDK? &lt;/li&gt;
&lt;li&gt;Look no further, you've found your GUI package.&lt;/li&gt;
&lt;li&gt;Based on tkinter&lt;/li&gt;
&lt;li&gt;No dependencies (outside of Python itself): &lt;code&gt;pip install PySimpleGUI&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Python3 is required to run PySimpleGUI. It takes advantage of some Python3 features that do not translate well into Python2.&lt;/li&gt;
&lt;li&gt;Looking to help? → Port to other graphic engines. Hook up the front-end interface to a backend other than tkinter. Qt, WxPython, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Brian #3: &lt;a href="https://dev.to/srebalaji/useful-tricks-you-might-not-know-about-git-stash-117e"&gt;&lt;strong&gt;Useful tricks you might not know about Git stash&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git stash save&lt;/code&gt;  - Stash the changes in a dirty working directory away&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash apply&lt;/code&gt; - re-applies your changes after you do whatever you need to to your directory, like perhaps pull.&lt;/li&gt;
&lt;li&gt;Lots of neat things to do with stash
&lt;ul&gt;
&lt;li&gt;you can add a message so the stashed content has a nice label&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt; will include untracked files when saving.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash branch [HTML_REMOVED] stash@{1}&lt;/code&gt; will create a new branch with the latest stash, and then deletes the latest stash&lt;/li&gt;
&lt;li&gt;Lots of other nice tricks in the article&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;See also: &lt;a href="https://git-scm.com/docs/git-stash"&gt;git-stash in git-scm book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Michael #4: &lt;a href="https://www.aeracode.org/2018/06/04/django-async-roadmap/"&gt;A Django Async Roadmap&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Andrew Godwin, from Django Channels&lt;/li&gt;
&lt;li&gt;Thinks that the time has come to start talking seriously about bringing async functionality into Django itself&lt;/li&gt;
&lt;li&gt;Open for public feedback&lt;/li&gt;
&lt;li&gt;The goal is to make Django a world-class example of what async can enable for HTTP requests, such as:
&lt;ul&gt;
&lt;li&gt;Doing ORM queries in parallel&lt;/li&gt;
&lt;li&gt;Allowing views to query external APIs without blocking threads&lt;/li&gt;
&lt;li&gt;Running slow-response/long-poll endpoints alongside each other efficiently&lt;/li&gt;
&lt;li&gt;Bringing easy performance improvements to any project that spends a majority of time blocking on databases or sockets (which is most projects!)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Imperative that we keep Django backwards-compatible with existing code&lt;/li&gt;
&lt;li&gt;Why now?  Django 2.1 will be the first release that only supports Python 3.5 and up, and so this provides us the perfect place to start working on async-native code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Brian #5: &lt;a href="https://github.com/jiaaro/pydub"&gt;&lt;strong&gt;pydub&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Manipulate audio with a simple and easy high level interface”&lt;/li&gt;
&lt;li&gt;Really clean use of operators.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    from pydub import AudioSegment 

    # also handles lots of other formats 
    song = AudioSegment.from_mp3("never_gonna_give_you_up.mp3") 

    # pydub does things in milliseconds 
    ten_seconds = 10 * 1000 
    first_10_seconds = song[:ten_seconds] 
    last_5_seconds = song[-5000:] 

    # boost volume by 6dB 
    beginning = first_10_seconds + 6 

    # reduce volume by 3dB 
    end = last_5_seconds - 3 

    # Concatenate audio (add one file to the end of another) 
    without_the_middle = beginning + end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;also:
&lt;ul&gt;
&lt;li&gt;crossfade&lt;/li&gt;
&lt;li&gt;repeat&lt;/li&gt;
&lt;li&gt;fade&lt;/li&gt;
&lt;li&gt;switch formats&lt;/li&gt;
&lt;li&gt;add metadata tags&lt;/li&gt;
&lt;li&gt;save with a specific bitrate&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Michael #6: &lt;a href="https://moltenframework.com/"&gt;Molten: Modern API framework&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;molten is a minimal, extensible, fast and productive framework for building HTTP APIs with Python.&lt;/li&gt;
&lt;li&gt;Heavy use of type annotations&lt;/li&gt;
&lt;li&gt;Officially supports Python 3.6 and later&lt;/li&gt;
&lt;li&gt;Request Validation: molten can automatically validate requests according to predefined schemas, ensuring that your handlers only ever run if given valid input&lt;/li&gt;
&lt;li&gt;Dependency Injection: Write clean, decoupled code by leveraging DI.&lt;/li&gt;
&lt;li&gt;Still experimental at this stage.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#91 Will there be a PyBlazor?</title><link>https://pythonbytes.fm/episodes/show/91/will-there-be-a-pyblazor</link><guid>424963a7-3b25-4d4f-80d1-f5e30ac06a59</guid><enclosure url="https://pythonbytes.fm/episodes/download/91/will-there-be-a-pyblazor.mp3" length="9259695" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 15 Aug 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Will there be a PyBlazor?</itunes:title><itunes:episode>91</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:20:28</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Datadog &lt;a href="http://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.fm/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt;  &lt;a href="https://hackernoon.com/what-makes-the-python-cool-426e4c576685"&gt;&lt;strong&gt;What makes the Python Cool&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shankar Jha&lt;/li&gt;
&lt;li&gt;“some of the cool feature provided by Python”&lt;/li&gt;
&lt;li&gt;The Zen of Python: &lt;code&gt;import this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;XKCD: &lt;code&gt;import antigravity&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Swapping of two variable in one line: &lt;code&gt;a, b = b, a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a web server using one line: &lt;code&gt;python -m http.server 8000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;itertools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Looping with index: &lt;code&gt;enumerate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;reverse a list: &lt;code&gt;list(reversed(a_list))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zip&lt;/code&gt; tricks&lt;/li&gt;
&lt;li&gt;list/set/dict comprehensions&lt;/li&gt;
&lt;li&gt;Modern dictionary&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pprint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt; when in interactive REPL&lt;/li&gt;
&lt;li&gt;Lots of great external libraries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.djangoproject.com/weblog/2018/aug/01/django-21-released/"&gt;&lt;strong&gt;Django 2.1 released&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/stable/releases/2.1/"&gt;The release notes&lt;/a&gt; cover the smorgasbord of new features in detail, the &lt;a href="https://docs.djangoproject.com/en/stable/releases/2.1/#model-view-permission"&gt;model “view” permission&lt;/a&gt; is a highlight that many will appreciate.&lt;/li&gt;
&lt;li&gt;Django 2.0 has reached the end of mainstream support. The final minor bug fix release (which is also a security release), &lt;a href="https://docs.djangoproject.com/en/stable/releases/2.0.8/"&gt;2.0.8&lt;/a&gt;, was issued today.&lt;/li&gt;
&lt;li&gt;Features
&lt;ul&gt;
&lt;li&gt;model  “view” feature: This allows giving users read-only access to models in the admin.&lt;/li&gt;
&lt;li&gt;The new &lt;code&gt;[ModelAdmin.delete_queryset()](https://docs.djangoproject.com/en/2.1/ref/contrib/admin/#django.contrib.admin.ModelAdmin.delete_queryset)&lt;/code&gt; method allows customizing the deletion process of the “delete selected objects” action.&lt;/li&gt;
&lt;li&gt;You can now &lt;a href="https://docs.djangoproject.com/en/2.1/ref/contrib/admin/#overriding-default-admin-site"&gt;override the default admin site&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Lots of ORM features&lt;/li&gt;
&lt;li&gt;Cache: The &lt;a href="https://docs.djangoproject.com/en/2.1/topics/cache/#local-memory-caching"&gt;local-memory cache backend&lt;/a&gt; now uses a least-recently-used (LRU) culling strategy rather than a pseudo-random one.&lt;/li&gt;
&lt;li&gt;Migrations: To support frozen environments, migrations may be loaded from &lt;code&gt;.pyc&lt;/code&gt; files.&lt;/li&gt;
&lt;li&gt;Lots more&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://github.com/zotroneneis/harry_potter_universe"&gt;&lt;strong&gt;Awesome Python Features Explained Using Harry Potter&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anna-Lena Popkes&lt;/li&gt;
&lt;li&gt;&lt;a href="http://alpopkes.com/posts/2018/07/blog-post-1/"&gt;Initial blog post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;100 Days of code, with a Harry Potter universe bent.&lt;/li&gt;
&lt;li&gt;Up to day 18 so far.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://blog.soroco.com/articles/pyce/"&gt;&lt;strong&gt;Executing Encrypted Python with no Performance Penalty&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploying Python in production presents a large attack surface that allows a malicious user to modify or reverse engineer potentially sensitive business logic. &lt;/li&gt;
&lt;li&gt;This is worse in cases of distributed apps.&lt;/li&gt;
&lt;li&gt;Common techniques to protect code in production are &lt;a href="https://en.wikipedia.org/wiki/Code_signing"&gt;binary signing&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Obfuscation_(software)"&gt;obfuscation&lt;/a&gt;, or &lt;a href="http://phrack.org/issues/58/5.html#article"&gt;encryption&lt;/a&gt;. But, these techniques typically assume that we are protecting either a single file (EXE), or a small set of files (EXE and DLLs).&lt;/li&gt;
&lt;li&gt;In Python signing is not an option and source code is wide open.&lt;/li&gt;
&lt;li&gt;requirements were threefold:
&lt;ol&gt;
&lt;li&gt;Work with the reference implementation of Python,&lt;/li&gt;
&lt;li&gt;Provide strong protection of code against malicious and natural threats,&lt;/li&gt;
&lt;li&gt;Be performant both in execution time and in stored space&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;This led to a pure Python solution using authenticated cryptography.&lt;/li&gt;
&lt;li&gt;Created a &lt;code&gt;.pyce&lt;/code&gt; file that is encrypted and signed&lt;/li&gt;
&lt;li&gt;Customized import statement to load and decrypt them&lt;/li&gt;
&lt;li&gt;Implementation has no overhead in production. This is due to Python's &lt;a href="https://docs.python.org/3/reference/import.html#the-module-cache"&gt;in-memory bytecode cache&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;strong&gt;icdiff and pytest-icdiff&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jeffkaufman/icdiff"&gt;icdiff&lt;/a&gt;: “Improved colored diff”
&lt;ul&gt;
&lt;li&gt;Jeff Kaufman&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hjwp/pytest-icdiff"&gt;pytest-icdiff&lt;/a&gt;: “better error messages for assert equals in pytest”
&lt;ul&gt;
&lt;li&gt;Harry Percival&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6: Will there be a PyBlazor?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The .NET guys, and Steve Sanderson in particular, are undertaking &lt;a href="http://blog.stevensanderson.com/2018/02/06/blazor-intro/"&gt;&lt;strong&gt;an interesting project&lt;/strong&gt;&lt;/a&gt; with WebAssembly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebAssembly&lt;/strong&gt; (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.&lt;/li&gt;
&lt;li&gt;Works in Firefox, Edge, Safari, and Chrome&lt;/li&gt;
&lt;li&gt;Their project, &lt;a href="http://blog.stevensanderson.com/2018/02/06/blazor-intro/"&gt;&lt;strong&gt;Blazor&lt;/strong&gt;&lt;/a&gt;, has nearly the entire .NET runtime (AKA the CLR) running natively in the browser via WebAssembly.&lt;/li&gt;
&lt;li&gt;This is notable because the CLR is basically pure C code. What else is C code? Well, CPython!&lt;/li&gt;
&lt;li&gt;Includes Interpreted and AOT mode:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ahead-of-time (AOT) compiled mode:&lt;/strong&gt; In AOT mode, your application’s .NET assemblies are transformed to pure WebAssembly binaries at build time.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Being able to run .NET in the browser is a good start, but it’s not enough. To be a productive app builder, you’ll need a coherent set of standard solutions to standard problems such as UI composition/reuse, state management, routing, unit testing, build optimization, and much more.&lt;/li&gt;
&lt;li&gt;Mozilla called for this to exist for Python, but sadly didn’t contribute or kick anything off at PyCon 2018: &lt;a href="https://www.youtube.com/watch?v=ITksU31c1WY"&gt;https://www.youtube.com/watch?v=ITksU31c1WY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gary Bernhardt’s &lt;a href="https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript"&gt;Birth and Death of JavaScript&lt;/a&gt; video is required pre-reqs as well (&lt;code&gt;asm.js&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extras and personal info:&lt;/p&gt;

&lt;p&gt;Michael:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://training.talkpython.fm/courses/explore_pyramid/building-data-driven-web-applications-in-python-with-pyramid-sqlalchemy-and-bootstrap"&gt;&lt;strong&gt;Building data-driven web apps&lt;/strong&gt;&lt;/a&gt; course is being well received&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Oiw23yfqQy8&amp;amp;feature=youtu.be"&gt;&lt;strong&gt;Guido van Rossum: Python 3 retrospective&lt;/strong&gt;&lt;/a&gt; — Guido’s final presentation as BDFL&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#92 Will your Python be compiled?</title><link>https://pythonbytes.fm/episodes/show/92/will-your-python-be-compiled</link><guid>07fe170a-2b4d-4c98-a2d2-950ca3d87eab</guid><enclosure url="https://pythonbytes.fm/episodes/download/92/will-your-python-be-compiled.mp3" length="16464211" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Sat, 25 Aug 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Will your Python be compiled?</itunes:title><itunes:episode>92</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:26:57</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by Digital Ocean -- &lt;a href="http://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://www.eetimes.com/document.asp?doc_id=1333572"&gt;&lt;strong&gt;IEEE Survey Ranks Programming Languages&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Martin Rowe, &lt;a href="https://twitter.com/measurementblue"&gt;@measureentblue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python on top. Was last year also, but this year it’s on top even for embedded.&lt;/li&gt;
&lt;li&gt;Some people dispute the numbers but I believe it.&lt;/li&gt;
&lt;li&gt;Projects contributing to the rise of Python in embedded:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://micropython.org/"&gt;MicroPython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.adafruit.com/welcome-to-circuitpython/what-is-circuitpython"&gt;CircuitPython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://microbit.org/code/"&gt;micro:bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codewith.mu/en/tutorials/"&gt;Mu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://mail.python.org/pipermail/python-dev/2018-August/154951.html"&gt;&lt;strong&gt;MyPyC&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Thread on Python-Dev: Use of Cython&lt;/li&gt;
&lt;li&gt;&lt;em&gt;It'd be *really&lt;/em&gt; nice to at least be able to write some of the C API tests directly in Cython rather than having to fiddle about with splitting the test between the regrtest parts that actually define the test case and the extension module parts that expose the interfaces that we want to test.*&lt;/li&gt;
&lt;li&gt;Later in the thread, Yury Selivanov dropped a bomb shell.
&lt;ul&gt;
&lt;li&gt;Speaking of which, Dropbox is working on a new compiler they call "mypyc".&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mypyc will compile type-annotated Python code to an optimized C.&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;Essentially, mypyc will be similar to Cython, but mypyc is a &lt;em&gt;subset of Python&lt;/em&gt;, not a superset.&lt;/li&gt;
&lt;li&gt;Interfacing with C libraries can be easily achieved with cffi. Being a strict subset of Python means that mypyc code will execute just fine in PyPy. They can even apply some optimizations to it eventually, as it has a strict and static type system.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://medium.com/netflix-techblog/notebook-innovation-591ee3221233"&gt;&lt;strong&gt;Beyond Interactive: Notebook Innovation at Netflix&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Netflix is doing some very cool things with Jupyter, and sharing much of it through open source projects.&lt;/li&gt;
&lt;li&gt;Netflix has growing their use of Jupyter notebooks for many data related roles:
&lt;ul&gt;
&lt;li&gt;business, data, &amp;amp; quantitative analysts&lt;/li&gt;
&lt;li&gt;algorithm, analytics, &amp;amp; data engineers&lt;/li&gt;
&lt;li&gt;data, machine learning, &amp;amp; research scientists&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;All of these roles have common needs that are solved by Jupyter and related projects:
&lt;ul&gt;
&lt;li&gt;data exploration, preparation, validation, and productionalization (is that a word?)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;To help solve their use cases and make notebooks even easier to use for everyone at Netflix, they’ve started many open source projects that can be used by non-Netflix folks as well:
&lt;ul&gt;
&lt;li&gt;“&lt;a href="https://github.com/nteract"&gt;&lt;strong&gt;nteract&lt;/strong&gt;&lt;/a&gt; is a next-gen React-based UI for Jupyter notebooks.”&lt;/li&gt;
&lt;li&gt;“&lt;a href="https://github.com/nteract/papermill"&gt;&lt;strong&gt;Papermill&lt;/strong&gt;&lt;/a&gt; is a library for parameterizing, executing, and analyzing Jupyter notebooks. “&lt;/li&gt;
&lt;li&gt;“&lt;a href="https://github.com/nteract/nteract/blob/master/applications/commuter/README.md"&gt;&lt;strong&gt;Commuter&lt;/strong&gt;&lt;/a&gt; is a lightweight, vertically-scalable service for viewing and sharing notebooks.”&lt;/li&gt;
&lt;li&gt;“&lt;a href="https://netflix.github.io/titus/"&gt;&lt;strong&gt;Titus&lt;/strong&gt;&lt;/a&gt; is a container management platform that provides scalable and reliable container execution and cloud-native integration with Amazon AWS. “&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;There’s a follow-on post that discusses how Netflix is scheduling notebook execution: &lt;a href="https://medium.com/@NetflixTechBlog/scheduling-notebooks-348e6c14cfd6"&gt;Scheduling Notebooks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.thepythoncorner.com/2018/08/how-to-create-windows-service-in-hi.html"&gt;&lt;strong&gt;How to create a Windows Service in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have spoken about how to &lt;a href="https://gist.github.com/ewenchou/be496b2b73be801fd85267ef5471458c"&gt;&lt;strong&gt;run Python script as systemd service&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Here’s the Windows edition
&lt;ul&gt;
&lt;li&gt;Run Python code on boo&lt;/li&gt;
&lt;li&gt;When logged out or logged in as another user&lt;/li&gt;
&lt;li&gt;As a restricted or different account&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Based on &lt;a href="https://github.com/mhammond/pywin32"&gt;pywin32&lt;/a&gt;  (very little documentation)&lt;/li&gt;
&lt;li&gt;Derive from a given base class then override the three main methods:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;def start(self)&lt;/code&gt; : if you need to do something at the service initialization.&lt;/li&gt;
&lt;li&gt;A good idea is to put here the initialization of the running condition&lt;/li&gt;
&lt;li&gt;&lt;code&gt;def stop(self)&lt;/code&gt; : if you need to do something just before the service is stopped.&lt;/li&gt;
&lt;li&gt;A good idea is to put here the invalidation of the running condition&lt;/li&gt;
&lt;li&gt;&lt;code&gt;def main(self)&lt;/code&gt; : your actual run loop. Just create a loop based on your running condition&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://packaging.python.org/overview/"&gt;&lt;strong&gt;An Overview of Packaging for Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/mhashemi/status/1029071335513677824"&gt;Started from an essay by Mahmoud Hashemi&lt;/a&gt;, &lt;a href="https://twitter.com/mhashemi"&gt;@mhashemi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Now part of PyPA documentation
&lt;ul&gt;
&lt;li&gt;Different techniques and tools for different types of Python projects&lt;/li&gt;
&lt;li&gt;modules&lt;/li&gt;
&lt;li&gt;packages
&lt;ul&gt;
&lt;li&gt;source distributions&lt;/li&gt;
&lt;li&gt;wheels&lt;/li&gt;
&lt;li&gt;binary distributions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;applications
&lt;ul&gt;
&lt;li&gt;this is the hairy part where a bullet point summary just won’t be enough. :)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.python.org/dev/peps/pep-0505/"&gt;&lt;strong&gt;PEP 505 -- None-aware operators&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Several modern programming languages have so-called "null-coalescing" or "null- aware" operators, including C# and Swift. These operators provide syntactic sugar for common patterns involving null references.&lt;/li&gt;
&lt;li&gt;Why not Python?&lt;/li&gt;
&lt;li&gt;Two cases:
&lt;ul&gt;
&lt;li&gt;The "null-coalescing" operator: To replace inline conditionals such as this &lt;code&gt;value if value is not None else "MISSING"&lt;/code&gt; can now be just &lt;code&gt;value ??&lt;/code&gt; &lt;code&gt;"MISSING"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The "null-aware member access" operator: Chain calls into a fluent interface without testing for None: &lt;code&gt;return user?.orders.first()?.name&lt;/code&gt; would replace this&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    if user is None:
        return None

    first_order = user.orders.first()

    if first_order is None:
        return None

    return first_order.name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extras:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PyCascades: &lt;a href="https://2019.pycascades.com/"&gt;https://2019.pycascades.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Test and Code episode with DHH: &lt;a href="http://testandcode.com/45"&gt;http://testandcode.com/45
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#93 Looking like there will be a PyBlazor!</title><link>https://pythonbytes.fm/episodes/show/93/looking-like-there-will-be-a-pyblazor</link><guid>f32e00ff-aadd-4b26-8abc-1393feab1df6</guid><enclosure url="https://pythonbytes.fm/episodes/download/93/looking-like-there-will-be-a-pyblazor.mp3" length="15104361" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 31 Aug 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Looking like there will be a PyBlazor!</itunes:title><itunes:episode>93</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:24:15</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DataDog -- &lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.fm/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://github.com/ninjaaron/replacing-bash-scripting-with-python"&gt;&lt;strong&gt;Replacing Bash Scripting with Python&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reading &amp;amp; writing files&lt;/li&gt;
&lt;li&gt;CLI’s and working with stdin, stdout, stderr&lt;/li&gt;
&lt;li&gt;Path and shutil&lt;/li&gt;
&lt;li&gt;replacing sed, grep, awk, with regex&lt;/li&gt;
&lt;li&gt;running processes&lt;/li&gt;
&lt;li&gt;dealing with datetime&lt;/li&gt;
&lt;li&gt;see also:
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pythontesting.net/python/regex-search-replace-examples/"&gt;regex search and replace example scripts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://iodide.io/pyodide-demo/python.html"&gt;&lt;strong&gt;pyodide&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scientific Python in the browser
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;ALL&lt;/em&gt; of CPython (allowed in the browser)&lt;/li&gt;
&lt;li&gt;NumPy&lt;/li&gt;
&lt;li&gt;MatPlotLib&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Project by Mozilla&lt;/li&gt;
&lt;li&gt;We asked “&lt;a href="https://pythonbytes.fm/episodes/show/91/will-there-be-a-pyblazor"&gt;Will there be a PyBlazor?&lt;/a&gt;” just two weeks ago. I think we are on a path…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://simonwillison.net/2018/Aug/25/restructuredtext/"&gt;&lt;strong&gt;The subset of reStructuredText worth committing to memory&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A lot of Python packages document with reStructuredText, a lot of reStructuredText tutorials are overwhelming. This post is the answer.&lt;/li&gt;
&lt;li&gt;paragraphs are with two newlines&lt;/li&gt;
&lt;li&gt;headings use a weird underlined method of above and below and =, -, and ~&lt;/li&gt;
&lt;li&gt;bulleted lists work with asterisks but spacing is important&lt;/li&gt;
&lt;li&gt;italics and bold are with one or two surrounding asterisks&lt;/li&gt;
&lt;li&gt;inline code uses two backticks&lt;/li&gt;
&lt;li&gt;links and code snippets are weird and I have to always look this up, as with images, and internal references.&lt;/li&gt;
&lt;li&gt;so I’ll bookmark this link&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://github.com/PyCQA/bandit"&gt;&lt;strong&gt;bandit&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Anthony Shaw&lt;/li&gt;
&lt;li&gt;Bandit is a tool designed to find common security issues in Python code. &lt;/li&gt;
&lt;li&gt;To do this Bandit processes each file, builds an AST from it, and runs appropriate plugins against the AST nodes. Once Bandit has finished scanning all the files it generates a report.&lt;/li&gt;
&lt;li&gt;Issues detected:
&lt;ul&gt;
&lt;li&gt;B312  telnetlib&lt;/li&gt;
&lt;li&gt;B307  eval&lt;/li&gt;
&lt;li&gt;B110  try_except_pass&lt;/li&gt;
&lt;li&gt;B602  subprocess_popen_with_shell_equals_true&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://github.com/jerry-git/learn-python3/blob/master/README.md"&gt;&lt;strong&gt;Learn Python 3 within Jupyter Notebooks&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;just fun&lt;/li&gt;
&lt;li&gt;Also shows how to run &lt;code&gt;pytest&lt;/code&gt; in a cell.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://github.com/Yelp/detect-secrets"&gt;&lt;strong&gt;detect-secrets&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An enterprise friendly way of detecting and preventing secrets in code. &lt;/li&gt;
&lt;li&gt;From Yelp&lt;/li&gt;
&lt;li&gt;detect-secrets is an aptly named module for (surprise, surprise) detecting secrets within a code base.&lt;/li&gt;
&lt;li&gt;However, unlike other similar packages that solely focus on finding secrets, this package is designed with the enterprise client in mind: providing a &lt;strong&gt;backwards compatible&lt;/strong&gt;, systematic means of:
&lt;ol&gt;
&lt;li&gt;Preventing new secrets from entering the code base,&lt;/li&gt;
&lt;li&gt;Detecting if such preventions are explicitly bypassed, and&lt;/li&gt;
&lt;li&gt;Providing a checklist of secrets to roll, and migrate off to a more secure storage.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Allows you to set a baseline&lt;/li&gt;
&lt;li&gt;set it up as a git commit hook&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#94 Why don't you like notebooks?</title><link>https://pythonbytes.fm/episodes/show/94/why-don-t-you-like-notebooks</link><guid>a2e97a62-0681-44a0-868c-016042a84e22</guid><enclosure url="https://pythonbytes.fm/episodes/download/94/why-don-t-you-like-notebooks.mp3" length="10251383" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 06 Sep 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Why don't you like notebooks?</itunes:title><itunes:episode>94</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:23:49</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigialOcean -- &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="http://python-patterns.guide/"&gt;&lt;strong&gt;Python Patterns&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/brandon_rhodes"&gt;@brandon_rhodes&lt;/a&gt; vs GOF&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://github.com/manahl/arctic"&gt;&lt;strong&gt;Arctic: Millions of rows a sec (time data)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arctic is a high-performance datastore for numeric data. It supports Pandas, numpy arrays and pickled objects out-of-the-box, with pluggable support for other data types and optional versioning.&lt;/li&gt;
&lt;li&gt;Arctic can query millions of rows per second per client, achieves ~10x compression on network bandwidth, ~10x compression on disk, and scales to hundreds of millions of rows per second per MongoDB instance.&lt;/li&gt;
&lt;li&gt;Arctic has been under active development at Man AHL since 2012.&lt;/li&gt;
&lt;li&gt;Super fast, some latency numbers:
&lt;ul&gt;
&lt;li&gt;1xDay Data 4ms for 10k rows, vs 2,210 ms from SQL Server)&lt;/li&gt;
&lt;li&gt;Tick Data 1s for 3.5 MB (Python) or 15 MB (Java) vs 15-40sec from “other tick”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Versioned data&lt;/li&gt;
&lt;li&gt;Built on MongoDB&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.slideshare.net/JamesBlackburn1/2015-pydata-highperformance-iot-and-financial-data-storage-with-python-and-mongodb"&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Based on pandas&lt;/li&gt;
&lt;li&gt;Tested with pytest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://www.youtube.com/playlist?list=PLs4CJRBY5F1KrUr7z_2mur2QdAKXyh-k3"&gt;&lt;strong&gt;PyCon Australia videos&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=QgZ7qv4Cd0Y&amp;amp;t=0s&amp;amp;list=PLs4CJRBY5F1KrUr7z_2mur2QdAKXyh-k3&amp;amp;index=39"&gt;How To Publish A Package On PyPI&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Mark Smith &lt;a href="https://twitter.com/judy2k"&gt;@judy2k&lt;/a&gt;
&lt;a href="https://www.youtube.com/watch?v=QgZ7qv4Cd0Y&amp;amp;t=0s&amp;amp;list=PLs4CJRBY5F1KrUr7z_2mur2QdAKXyh-k3&amp;amp;index=39"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://cloud.google.com/blog/products/gcp/introducing-app-engine-second-generation-runtimes-and-python-3-7"&gt;&lt;strong&gt;GAE: Introducing App Engine Second Generation runtimes and Python 3.7&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Today, Google Cloud is announcing the availability of Second Generation App Engine standard runtimes, a significant upgrade to the platform that allows you to easily run web apps using up-to-date versions of popular languages, frameworks and libraries.&lt;/li&gt;
&lt;li&gt;Python 3.7 is one of the new Second Generation runtimes that we &lt;a href="https://cloud.google.com/blog/products/gcp/bringing-the-best-of-serverless-to-you"&gt;announced at Cloud Next&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;Based on technology from the &lt;a href="https://cloud.google.com/blog/products/gcp/open-sourcing-gvisor-a-sandboxed-container-runtime"&gt;gVisor container sandbox&lt;/a&gt;, these Second Generation runtimes eliminate many previous App Engine restrictions, giving you the ability to write portable web apps and microservices that take advantage of App Engine's unique auto-scaling, built-in security and pay-per-use billing model.&lt;/li&gt;
&lt;li&gt;This new runtime allows you to take advantage of Python's vibrant ecosystem of open-source libraries and frameworks. While the Python 2 runtime only allowed the use of specific versions of whitelisted libraries, Python 3 supports arbitrary third-party libraries, including those that rely on C code and native extensions. Just add &lt;a href="https://docs.djangoproject.com/en/2.0/releases/2.0/"&gt;Django 2.0&lt;/a&gt;, &lt;a href="http://www.numpy.org/"&gt;NumPy&lt;/a&gt;, &lt;a href="http://scikit-learn.org/stable/"&gt;scikit-learn&lt;/a&gt; or your library of choice to a &lt;code&gt;requirements.txt&lt;/code&gt; file. App Engine will install these libraries in the cloud when you deploy your app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://docs.google.com/presentation/d/1n2RlMdmv1p25Xy5thJUhkKGvjtV-dkAIsUXP-AL4ffI/edit#slide=id.g3b55ec3453_0_4"&gt;&lt;strong&gt;I don’t like notebooks&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/joelgrus"&gt;@joelgrus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.python.org/dev/peps/pep-8000/"&gt;&lt;strong&gt;PEP 8000 -- Python Language Governance Proposal Overview&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This PEP provides an overview of the selection process for a new model of Python language governance in the wake of &lt;a href="https://mail.python.org/pipermail/python-committers/2018-July/005664.html"&gt;Guido's retirement&lt;/a&gt;. Once the governance model is selected, it will be codified in &lt;a href="https://www.python.org/dev/peps/pep-0013"&gt;PEP 13&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;PEPs in the lower 8000s describe the general process for selecting a governance model.
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-8001"&gt;PEP 8001&lt;/a&gt; - Python Governance Voting Process&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-8002"&gt;PEP 8002&lt;/a&gt; - Open Source Governance Survey&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PEPs in the 8010s describe the actual proposals for Python governance. 
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-8010"&gt;PEP 8010&lt;/a&gt; - The BDFL Governance Model&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-8011"&gt;PEP 8011&lt;/a&gt; - The Council Governance Model&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-8012"&gt;PEP 8012&lt;/a&gt; - The Community Governance Model&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extras&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free Brian Granger &lt;a href="https://on.acm.org/t/project-jupyter-from-computational-notebooks-to-large-scale-data-science-with-sensitive-data/879"&gt;ACM webcast&lt;/a&gt; on Jupyter Friday&lt;/li&gt;
&lt;li&gt;TIOBE jump to #3: https://www.tiobe.com/tiobe-index/&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#95 Unleash the py-spy!</title><link>https://pythonbytes.fm/episodes/show/95/unleash-the-py-spy</link><guid>1d16e8ea-e337-40f1-959e-002a38956145</guid><enclosure url="https://pythonbytes.fm/episodes/download/95/unleash-the-py-spy.mp3" length="14773449" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Sat, 15 Sep 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Unleash the py-spy!</itunes:title><itunes:episode>95</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:23:33</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DataDog -- &lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.fm/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://dataset.readthedocs.io/en/latest/"&gt;&lt;strong&gt;dataset: databases for lazy people&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dataset&lt;/strong&gt; provides a simple abstraction layer removes most direct SQL statements without the necessity for a full ORM model - essentially, databases can be used like a JSON file or NoSQL store.&lt;/li&gt;
&lt;li&gt;A simple data loading script using &lt;strong&gt;dataset&lt;/strong&gt; might look like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    import dataset

    db = dataset.connect('sqlite:///:memory:')

    table = db['sometable']
    table.insert(dict(name='John Doe', age=37))
    table.insert(dict(name='Jane Doe', age=34, gender='female'))

    john = table.find_one(name='John Doe')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://cupy.chainer.org/"&gt;&lt;strong&gt;CuPy GPU NumPy&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A NumPy-compatible matrix library accelerated by CUDA&lt;/li&gt;
&lt;li&gt;How many cores does a modern GPU have?&lt;/li&gt;
&lt;li&gt;CuPy's interface is highly compatible with NumPy; in most cases it can be used as a drop-in replacement.&lt;/li&gt;
&lt;li&gt;You can easily make a custom CUDA kernel if you want to make your code run faster, requiring only a small code snippet of C++. CuPy automatically wraps and compiles it to make a CUDA binary&lt;/li&gt;
&lt;li&gt;PyCon 2018 presentation: &lt;a href="https://www.youtube.com/watch?v=MAz1xolSB68"&gt;Shohei Hido - CuPy: A NumPy-compatible Library for GPU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code  example&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; # This will run on your GPU!
    &amp;gt;&amp;gt;&amp;gt; import cupy as np # This is the only non-NumPy line

    &amp;gt;&amp;gt;&amp;gt; x = np.arange(6).reshape(2, 3).astype('f')
    &amp;gt;&amp;gt;&amp;gt; x
    array([[ 0.,  1.,  2.],
           [ 3.,  4.,  5.]], dtype=float32)
    &amp;gt;&amp;gt;&amp;gt; x.sum(axis=1)
    array([  3.,  12.], dtype=float32)           
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://ljvmiranda921.github.io/notebook/2018/06/21/precommits-using-black-and-flake8/"&gt;&lt;strong&gt;Automate Python workflow using pre-commits&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We covered pre-commit in &lt;a href="https://pythonbytes.fm/84"&gt;episode 84&lt;/a&gt;, but I still had trouble getting my head around it.&lt;/li&gt;
&lt;li&gt;This article by LJ Miranda does a great job with the workflow introduction and configuration necessary to get pre-commit working for black and flake8.&lt;/li&gt;
&lt;li&gt;Includes a nice visual of the flow.&lt;/li&gt;
&lt;li&gt;Demo of it all in action with a short video.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://github.com/benfred/py-spy"&gt;&lt;strong&gt;py-spy&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sampling profiler for Python programs &lt;/li&gt;
&lt;li&gt;Written by &lt;a href="https://twitter.com/benfrederickson"&gt;Ben Frederickson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lets you visualize what your Python program is spending time on without restarting the program or modifying the code in any way.&lt;/li&gt;
&lt;li&gt;Written in Rust for speed&lt;/li&gt;
&lt;li&gt;Doesn't run in the same process as the profiled Python program&lt;/li&gt;
&lt;li&gt;Does NOT it interrupt the running program in any way.&lt;/li&gt;
&lt;li&gt;This means Py-Spy is safe to use against production Python code.&lt;/li&gt;
&lt;li&gt;The default visualization is a top-like live view of your python program&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/benfred/py-spy#how-does-py-spy-work"&gt;&lt;strong&gt;How does py-spy work?&lt;/strong&gt;&lt;/a&gt; Py-spy works by directly reading the memory of the python program using the &lt;a href="http://man7.org/linux/man-pages/man2/process_vm_readv.2.html"&gt;process_vm_readv&lt;/a&gt; system call on Linux, the &lt;a href="https://developer.apple.com/documentation/kernel/1585350-vm_read?language=objc"&gt;vm_read&lt;/a&gt; call on OSX or the &lt;a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms680553(v=vs.85).aspx"&gt;ReadProcessMemory&lt;/a&gt; call on Windows.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://docs.sympy.org/latest/tutorial/intro.html"&gt;&lt;strong&gt;SymPy is a Python library for symbolic mathematics&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Symbolic computation deals with the computation of mathematical objects symbolically. This means that the mathematical objects are represented exactly, not approximately, and mathematical expressions with unevaluated variables are left in symbolic form.”&lt;/li&gt;
&lt;li&gt;example:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; integrate(sin(x**2), (x, -oo, oo))
    √2⋅√π
    ─────
      2
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;examples on site are interactive so you can play with it without installing anything.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.starlette.io/"&gt;&lt;strong&gt;Starlette ASGI web framework&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The little ASGI framework that shines.&lt;/li&gt;
&lt;li&gt;It is ideal for building high performance asyncio services, and supports both HTTP and WebSockets.&lt;/li&gt;
&lt;li&gt;Very flask-esq&lt;/li&gt;
&lt;li&gt;Can use 
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/esnme/ultrajson"&gt;ultrajson - Ultra fast JSON decoder and encoder written in C with Python bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;aiofiles for file responses&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Run using uvicorn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extras:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael:&lt;/strong&gt; &lt;a href="https://us.pycon.org/2019/"&gt;&lt;strong&gt;PyCon 2019&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;dates out, put them on your calendar!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tutorials: May 1-2 • Wednesday, Thursday&lt;/li&gt;
&lt;li&gt;Talks and Events: May 3–5 • Friday, Saturday, Sunday&lt;/li&gt;
&lt;li&gt;Sprints: May 6–9 • Monday through Thursday&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Listener follow up on git pre-commit hooks util:&lt;/strong&gt; &lt;a href="https://pre-commit.com/"&gt;&lt;strong&gt;pre-commit package&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Matthew Layman, &lt;a href="https://twitter.com/mblayman"&gt;@mblayman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Heard the discussion about Git commit hooks at the end. I wanted to bring up pre-commit as an interesting project (written in Python!) that's useful for Git commit hooks.&lt;/li&gt;
&lt;li&gt;tl;dr:
&lt;ul&gt;
&lt;li&gt;$ pip install pre-commit&lt;/li&gt;
&lt;li&gt;$ ... create a .pre-commit-config.yaml&lt;/li&gt;
&lt;li&gt;$ pre-commit install  # This is a one time operation.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;pre-commit's job is to manage a project's Git commit hooks. We use this on my team at work and the devs only need to run &lt;code&gt;pre-commit install&lt;/code&gt;. This saves us from a bunch of failing CI builds where flake8 or other code style checks would fail.&lt;/li&gt;
&lt;li&gt;We use pre-commit to run flake8 and black before allowing a commit to proceed. Some projects have a pre-commit configuration to use right out of the box (e.g., black &lt;a href="https://github.com/ambv/black#version-control-integration"&gt;https://github.com/ambv/black#version-control-integration&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Listener: You don't need that (pattern)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;John Tocher&lt;/li&gt;
&lt;li&gt;PyCon AU &lt;a href="https://2018.pycon-au.org/talks/45184-you-dont-need-that/"&gt;Talk Called "You don't need that&lt;/a&gt;” - by Christopher Neugebauer,  it was an interesting take on why with a modern and powerful language like python, you may not need the conventionally described design patterns, ala the "Gang of four".&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#96 Python Language Summit 2018</title><link>https://pythonbytes.fm/episodes/show/96/python-language-summit-2018</link><guid>0c2a4c66-dd04-4338-bac0-6b1556d5235a</guid><enclosure url="https://pythonbytes.fm/episodes/download/96/python-language-summit-2018.mp3" length="19383583" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Sat, 22 Sep 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Python Language Summit 2018</itunes:title><itunes:episode>96</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:26:33</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean -- &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://plumbum.readthedocs.io/en/latest/"&gt;&lt;strong&gt;Plumbum: Shell Combinators and More&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Toolbox of goodies to do shell-like things from Python.&lt;/li&gt;
&lt;li&gt;“The motto of the library is &lt;strong&gt;“Never write shell scripts again”&lt;/strong&gt;, and thus it attempts to mimic the &lt;strong&gt;shell syntax&lt;/strong&gt; (&lt;em&gt;shell combinators&lt;/em&gt;) where it makes sense, while keeping it all &lt;strong&gt;Pythonic and cross-platform&lt;/strong&gt;.”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from plumbum.cmd import grep, wc, cat, head
&amp;gt;&amp;gt;&amp;gt; chain = ls["-a"] | grep["-v", "\\.py"] | wc["-l"]
&amp;gt;&amp;gt;&amp;gt; print chain
/bin/ls -a | /bin/grep -v '\.py' | /usr/bin/wc -l
&amp;gt;&amp;gt;&amp;gt; chain()
u'13\n'
&amp;gt;&amp;gt;&amp;gt; ((cat &amp;lt; "setup.py") | head["-n", 4])()
u'#!/usr/bin/env python\nimport os\n\ntry:\n'
&amp;gt;&amp;gt;&amp;gt; (ls["-a"] &amp;gt; "file.list")()
u''
&amp;gt;&amp;gt;&amp;gt; (cat["file.list"] | wc["-l"])()
u'17\n'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.betteridiot.tech/blog/pop/betterblog/2018/9/windows-10-linux-subsystem-for-python-developers"&gt;Windows 10 Linux subsystem for Python developers&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via &lt;a href="https://twitter.com/better_idiot/status/1036762663953620992"&gt;Marcus Sherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“One of the hardest days in teaching introduction to bioinformatics material is the first day: Setting up your machine.”&lt;/li&gt;
&lt;li&gt;While I have seen a very large bias towards Macs in academia, there are plenty of people that keep their Windows machines as a badge of pride... Marcus included.&lt;/li&gt;
&lt;li&gt;Even though Anaconda is cross platform and helpful, how does this work on Windows?
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python3 -m venv .env&lt;/code&gt; and &lt;code&gt;source .env/bin/activate&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;Spoiler alert: Not well.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Step by step getting Ubuntu on Windows&lt;/li&gt;
&lt;li&gt;Shows how to setup an x-server &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html"&gt;&lt;strong&gt;Type hints cheat sheet (Python 3)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you remember how to type hint duck types?
&lt;ul&gt;
&lt;li&gt;Something accessed like an array (list or tuple or …) and holds strings → &lt;code&gt;Sequence[str&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;Something that works like a dictionary mapping integers to strings → &lt;code&gt;Mapping[int, str]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;As I’m adding more and more typing to interface functions, I keep this cheat sheet bookmarked.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.techrepublic.com/article/how-programming-will-change-over-the-next-10-years-5-predictions/"&gt;&lt;strong&gt;Python driving new languages&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here are five predictions for what programming will look like 10 years from now.
&lt;ul&gt;
&lt;li&gt;Programming will be more abstract&lt;/li&gt;
&lt;li&gt;Trends like serverless technologies, containers, and low code platforms suggest that many developers may work at higher levels of abstraction in the future&lt;/li&gt;
&lt;li&gt;AI will become part of every developer's toolkit—but won't replace them&lt;/li&gt;
&lt;li&gt;A universal programming language will arise&lt;/li&gt;
&lt;li&gt;To reap the benefits of emerging technologies like AI, programming has to be easy to learn and easy to build upon&lt;/li&gt;
&lt;li&gt;"Python may be remembered as being the great-great-great grandmother of languages of the future, which underneath the hood may look like the English language, but are far easier to use,"&lt;/li&gt;
&lt;li&gt;Every developer will need to work with data&lt;/li&gt;
&lt;li&gt;Programming will be a core tenet of the education system&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://docs.python.org/3/library/asyncio.html"&gt;&lt;strong&gt;asyncio documentation rewritten from scratch&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/1st1/status/1041855362402541568"&gt;twitter thread&lt;/a&gt; by &lt;a href="https://twitter.com/1st1"&gt;&lt;strong&gt;Yury Selivanov&lt;/strong&gt;&lt;/a&gt;&lt;a href="https://twitter.com/1st1"&gt;&lt;strong&gt;‏&lt;/strong&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;“Big news! asyncio documentation has been rewritten from scratch! Read the new version here: &lt;a href="https://t.co/Hoa08x3Y3Z"&gt;https://docs.python.org/3/library/asyncio.html …&lt;/a&gt;.
Huge thanks to &lt;a href="https://twitter.com/WillingCarol"&gt;@WillingCarol&lt;/a&gt;, &lt;a href="https://twitter.com/elprans"&gt;@elprans&lt;/a&gt;, and &lt;a href="https://twitter.com/andrew_svetlov"&gt;@andrew_svetlov&lt;/a&gt; for support, ideas, and reviews!’&lt;/li&gt;
&lt;li&gt;“BTW, this is just the beginning. We'll continue to refine and update the documentation. Next up is adding two tutorials: one teaching high-level concepts and APIs, and another teaching how to use protocols and transports. A section about asyncio architecture is also planned.”&lt;/li&gt;
&lt;li&gt;“And this is just the beginning not only for asyncio documentation, but for asyncio itself.  Just for Python 3.8 we plan to add:
&lt;ul&gt;
&lt;li&gt;new streaming API&lt;/li&gt;
&lt;li&gt;TaskGroups and cancel scopes&lt;/li&gt;
&lt;li&gt;Supervisors and tracing API&lt;/li&gt;
&lt;li&gt;new SSL implementation&lt;/li&gt;
&lt;li&gt;many usability improvements”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://lwn.net/Articles/754152/"&gt;&lt;strong&gt;The 2018 Python Language Summit&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here are the sessions:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/754162/"&gt;Subinterpreter support for Python&lt;/a&gt;: a way to have a better story for multicore scalability using an existing feature of the language.
&lt;ul&gt;
&lt;li&gt;Subinterpreters will allow multiple Python interpreters per process and there is the potential for zero-copy data sharing between them. &lt;/li&gt;
&lt;li&gt;But subinterpreters share the GIL, so that needs to be changed in order to make it multicore friendly.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/754163/"&gt;Modifying the Python object model&lt;/a&gt;: looking at changes to CPython data structures to increase the performance of the interpreter.
    - via Instagram and Carl Shapiro
    - By modifying the Python object model fairly substantially, they were able to roughly double the performance
    - A little controversial
    - Shapiro's overall point was that he felt Python sacrificed its performance for flexibility and generality, but the dynamic features are typically not used heavily in performance-sensitive production workloads.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/754577/"&gt;A Gilectomy update&lt;/a&gt;: a status report on the effort to remove the GIL from CPython.
&lt;ul&gt;
&lt;li&gt;Larry Hastings updated attendees on the status of his &lt;a href="https://lwn.net/Articles/689548/"&gt;Gilectomy&lt;/a&gt; project.&lt;/li&gt;
&lt;li&gt;Since his &lt;a href="https://lwn.net/Articles/723514/"&gt;status report&lt;/a&gt; at last year's summit, little has happened, which is part of why the session was so short. He hasn't given up on the overall idea, but it needs a new approach.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/754779/"&gt;Using GitHub Issues for Python&lt;/a&gt;: a discussion on moving from bugs.python.org to GitHub Issues.
&lt;ul&gt;
&lt;li&gt;Mariatta Wijaya described her reasoning for advocating moving Python away from its &lt;a href="https://bugs.python.org/"&gt;current bug tracker&lt;/a&gt; to GitHub Issues.&lt;/li&gt;
&lt;li&gt;it would complete Python's &lt;a href="https://lwn.net/Articles/689937/"&gt;journey to GitHub&lt;/a&gt; that &lt;a href="https://lwn.net/Articles/623905/"&gt;started a ways back&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/755224/"&gt;Shortening the Python release schedule&lt;/a&gt;: a discussion on possibly changing from an 18-month to a yearly cadence.
&lt;ul&gt;
&lt;li&gt;The Python release cycle has an 18-month cadence; a new major release (e.g. Python 3.7) is made roughly on that schedule. &lt;/li&gt;
&lt;li&gt;But Łukasz Langa, who is the release manager for Python 3.8 and 3.9, would like to see things move more quickly—perhaps on a yearly cadence.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/755229/"&gt;Unplugging old batteries&lt;/a&gt;: should some older, unloved modules be removed from the standard library?
&lt;ul&gt;
&lt;li&gt;Python is famous for being a "batteries included" language—its standard library provides a versatile set of modules with the language&lt;/li&gt;
&lt;li&gt;There may be times when some of those batteries have reached their end of life.&lt;/li&gt;
&lt;li&gt;Christian Heimes wanted to suggest a few batteries that may have outlived their usefulness and to discuss how the process of retiring standard library modules should work.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/756628/"&gt;Linux distributions and Python 2&lt;/a&gt;: the end of life for Python 2 is coming, what distributions are doing to prepare.
&lt;ul&gt;
&lt;li&gt;Christian Heimes wanted to suggest a few batteries that may have outlived their usefulness and to discuss how the process of retiring standard library modules should work.&lt;/li&gt;
&lt;li&gt;To figure out how to help the Python downstreams so that Python 2 can be fully discontinued.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/757218/"&gt;Python static typing update&lt;/a&gt;: a look at where static typing is now and where it is headed for Python 3.7.
&lt;ul&gt;
&lt;li&gt;Started things off by talking about &lt;a href="https://www.python.org/dev/peps/pep-0484/#stub-files"&gt;stub files&lt;/a&gt;, which contain type information for libraries and other modules.&lt;/li&gt;
&lt;li&gt;Right now, static typing is only partially useful for large projects because they tend to use a lot of packages from the Python Package Index (PyPI), which has limited stub coverage. There are only 35 stubs for third-party modules in the &lt;a href="https://github.com/python/typeshed"&gt;typeshed&lt;/a&gt; library, which is Python's stub repository.&lt;/li&gt;
&lt;li&gt;He suggested that perhaps a centralized library for stubs is not the right development model. Some projects have stubs that live outside of typeshed, such as Django and SQLAlchemy.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0561/"&gt;PEP 561&lt;/a&gt; ("Distributing and Packaging Type Information") will provide a way to pip install stubs from packages that advertise that they have them.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/757354/"&gt;Python virtual environments&lt;/a&gt;: a short session on virtual environments and ideas for other ways to isolate local installations.
&lt;ul&gt;
&lt;li&gt;Steve Dower brought up the shortcomings of Python &lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;virtual environments&lt;/a&gt;, which are meant to create isolated installations of the language and its modules.&lt;/li&gt;
&lt;li&gt;Thomas Wouters defended virtual environments in a response: The correct justification is that for the average person, not using a virtualenv all too soon creates confusion, pain, and very difficult to fix breakage. Starting with a virtualenv is the easiest way to avoid that, at &lt;em&gt;very&lt;/em&gt; little cost.&lt;/li&gt;
&lt;li&gt;But Beazley and others (including Dower) think that starting Python tutorials or training classes with a 20-minute digression on setting up a virtual environment is wasted time. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/757713/"&gt;PEP 572 and decision-making in Python&lt;/a&gt;: a discussion of the controversy around PEP 572 and how to avoid the thread explosion that it caused in the future.
&lt;ul&gt;
&lt;li&gt;The "PEP 572 mess" was the topic of a 2018 Python Language Summit session led by benevolent dictator for life (BDFL) Guido van Rossum.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/757714/"&gt;Getting along in the Python community&lt;/a&gt;: trying to find ways to keep the mailing list welcoming even in the face of rudeness.
&lt;ul&gt;
&lt;li&gt;About tkinter…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lwn.net/Articles/757715/"&gt;Mentoring and diversity for Python&lt;/a&gt;: a discussion on how to increase the diversity of the core development team.
&lt;ul&gt;
&lt;li&gt;Victor Stinner outlined some work he has been doing to mentor new developers on their path toward joining the core development ranks&lt;/li&gt;
&lt;li&gt;Mariatta Wijaya gave a very personal talk that described the diversity problem while also providing some concrete action items that the project and individuals could take to help make Python more welcoming to minorities.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Extras&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Listener feedback: CUDA is NVidia only, so no MacBook pro unless you have a custom external GPU.&lt;/p&gt;</description></item><item><title>#97 Java goes paid</title><link>https://pythonbytes.fm/episodes/show/97/java-goes-paid</link><guid>80af76fe-f45f-4f63-a514-a9c844dee929</guid><enclosure url="https://pythonbytes.fm/episodes/download/97/java-goes-paid.mp3" length="18103367" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 28 Sep 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Java goes paid</itunes:title><itunes:episode>97</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:24:36</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DataDog -- &lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.fm/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://packaging.python.org/guides/making-a-pypi-friendly-readme/"&gt;&lt;strong&gt;Making a PyPI-friendly README&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;twine now checks for rendering problems with README&lt;/li&gt;
&lt;li&gt;Install the latest version of &lt;a href="https://github.com/pypa/twine"&gt;twine&lt;/a&gt;; version 1.12.0 or higher is required: &lt;code&gt;pip install --upgrade twine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Build the sdist and wheel for your project as described under &lt;a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/#packaging-your-project"&gt;Packaging your project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;twine check&lt;/code&gt; on the sdist and wheel: &lt;code&gt;twine check dist/*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This command will report any problems rendering your README. If your markup renders fine, the command will output &lt;code&gt;Checking distribution FILENAME: Passed&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.theregister.co.uk/2018/06/22/oracle_java_se_subscriptions/"&gt;&lt;strong&gt;Java goes paid&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Oracle's new Java SE subs: Code and support for $25/processor/month&lt;/li&gt;
&lt;li&gt;Prepare for audit after inevitable change, says Oracle licensing consultant&lt;/li&gt;
&lt;li&gt;There’s also a little bit of stick to go with the carrot, because come January 2019 Java SE 8 on the desktop won’t be updated any more … unless you buy a sub.&lt;/li&gt;
&lt;li&gt;The short version is that every commercial enterprise needs to look at their Java SE (Standard Edition) usage to see if they need to do something with licensing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://realpython.com/absolute-vs-relative-python-imports/"&gt;&lt;strong&gt;Absolute vs Relative Imports in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Review of how imports are used, along with subpackages  and &lt;code&gt;from&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;ex: &lt;code&gt;from package.sub import func&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Relative: what does this mean:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;from .some_module import some_class
from ..some_package import some_function
from . import some_class
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://github.com/kitao/pyxel"&gt;&lt;strong&gt;pyxel - A retro game engine for Python&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Thanks to its simple specifications inspired by retro gaming consoles, such as only 16 colors can be displayed and only 4 sounds can be played back at the same time, you can feel free to enjoy making pixel art style games.&lt;/li&gt;
&lt;li&gt;Run on Windows, Mac, and Linux&lt;/li&gt;
&lt;li&gt;Code writing with Python3&lt;/li&gt;
&lt;li&gt;After installing Pyxel, the examples of Pyxel will be copied to the current directory with the following command: &lt;code&gt;install_pyxel_examples&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://palletsprojects.com/blog/click-7-0-released/"&gt;&lt;strong&gt;Click 7.0 Released&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://click.palletsprojects.com/en/master/changelog/#version-7-0"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Drop support for Python 2.6 and 3.3.&lt;/li&gt;
&lt;li&gt;Add native ZSH autocompletion support. &lt;/li&gt;
&lt;li&gt;Usage errors now hint at the &lt;code&gt;--help&lt;/code&gt; option&lt;/li&gt;
&lt;li&gt;Really long list of changes since the last release at the beginning of 2017&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://hackernoon.com/how-we-spent-30k-usd-in-firebase-in-less-than-72-hours-307490bd24d"&gt;&lt;strong&gt;How we spent 30k USD in Firebase in less than 72 hours&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the largest crowdfunding campaign in Colombia, collecting 3 times more than the previous record so far in only two days!&lt;/li&gt;
&lt;li&gt;Run on the Vaki platform -- subject of this article&lt;/li&gt;
&lt;li&gt;We had reached more than 2 million sessions, more than 20 million pages visited and received more than 15 thousand supports. This averages to a thousand users active on the site in average and collecting more than 20 supports per minute.&lt;/li&gt;
&lt;li&gt;Site was running slow, tried things like upgraded the frontend frameworks &lt;/li&gt;
&lt;li&gt;Logged into Firebase: had spent $30,356.56 USD in just 72 hours! Going at $600/hr&lt;/li&gt;
&lt;li&gt;All came down to a very bad implementation of &lt;code&gt;this.loadPayments()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Comments are interesting&lt;/li&gt;
&lt;li&gt;It could happen to any of us, it happened to me this month.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extras:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blogs.dropbox.com/tech/2018/09/how-we-rolled-out-one-of-the-largest-python-3-migrations-ever/"&gt;&lt;strong&gt;Dropbox has upgraded from Python 2 → 3&lt;/strong&gt;&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;Michael’s async course is live: &lt;a href="https://training.talkpython.fm/courses/explore_async_python/async-in-python-with-threading-and-multiprocessing"&gt;&lt;strong&gt;Async Techniques and Examples in Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://us.pycon.org/2019/speaking/"&gt;&lt;strong&gt;2019 PyCon CFPs open&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://2019.pycascades.com/"&gt;&lt;strong&gt;PyCascades CFP is open until mid-Oct&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#98 Python-Electron as a Python GUI</title><link>https://pythonbytes.fm/episodes/show/98/python-electron-as-a-python-gui</link><guid>a57b7cf1-dd0f-41fe-98e6-edf334a043c0</guid><enclosure url="https://pythonbytes.fm/episodes/download/98/python-electron-as-a-python-gui.mp3" length="22819411" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Mon, 08 Oct 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Python-Electron as a Python GUI</itunes:title><itunes:episode>98</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:26:58</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="http://sunnybala.com/2018/09/10/python-etch-a-sketch.html"&gt;&lt;strong&gt;Making Etch-a-Sketch Art With Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Really nice write up of methodically solving problems with simplifying the problem space, figuring out what parts need solved, grabbing off the shelf bits that can help, and putting it all together. &lt;/li&gt;
&lt;li&gt;Plus it would be a fun weekend (or several) project with kids helping.&lt;/li&gt;
&lt;li&gt;Controlling the Etch-a-Sketch
&lt;ul&gt;
&lt;li&gt;Raspberry Pi, motors, cables, wood fixture&lt;/li&gt;
&lt;li&gt;Software to control the motors&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Picture simplification with edge detection with Canny edge detection.&lt;/li&gt;
&lt;li&gt;Lines to motor control with path finding with &lt;a href="https://networkx.github.io/"&gt;networkx&lt;/a&gt; library.&lt;/li&gt;
&lt;li&gt;Example results included in article.&lt;/li&gt;
&lt;li&gt;Pentium song: https://www.youtube.com/watch?v=qpMvS1Q1sos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://blogs.dropbox.com/tech/2018/09/how-we-rolled-out-one-of-the-largest-python-3-migrations-ever/"&gt;&lt;strong&gt;Dropbox moves to Python 3&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They just rolled out one of the largest Python 3 migrations ever&lt;/li&gt;
&lt;li&gt;Dropbox is one of the most popular desktop applications in the world&lt;/li&gt;
&lt;li&gt;Much of the application is written using Python. In fact, Drew’s very first lines of code for Dropbox were written in Python for Windows using venerable libraries such as pywin32.&lt;/li&gt;
&lt;li&gt;Though we’ve relied on Python 2 for many years (most recently, we used Python 2.7), we began moving to Python 3 back in 2015.&lt;/li&gt;
&lt;li&gt;If you’re using Dropbox today, the application is powered by a Dropbox-customized variant of Python 3.5. &lt;/li&gt;
&lt;li&gt;Why Python 3?
&lt;ul&gt;
&lt;li&gt;Exciting new features: Type annotations and async &amp;amp; await&lt;/li&gt;
&lt;li&gt;Aging toolchains: As Python 2 has aged, the set of toolchains initially compatible for deploying it has largely become obsolete&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Embedding Python
&lt;ul&gt;
&lt;li&gt;To solve build and deploy problem, we decided on a new architecture to embed the Python runtime in our native application.&lt;/li&gt;
&lt;li&gt;Deep integration with the OS (e.g. smart sync) means native apps are required&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;In future posts, we’ll look at:
&lt;ul&gt;
&lt;li&gt;How we report crashes on Windows and macOS and use them to debug both native and Python code.&lt;/li&gt;
&lt;li&gt;How we maintained a hybrid Python 2 and 3 syntax, and what tools helped.&lt;/li&gt;
&lt;li&gt;Our very best bugs and stories from the Python 3 migration.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3: Resources for PyCon that relate to really any talk venue&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://us.pycon.org/2019/speaking/"&gt;Speaking page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://us.pycon.org/2019/speaking/talks/"&gt;Talk proposal tips and resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;And the &lt;a href="https://us.pycon.org/2019/speaking/posters/"&gt;poster session&lt;/a&gt;. Way cooler than I originally understood.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://talk-talk-talk.readthedocs.io/en/latest/"&gt;Mariatta recently published her set of proposals&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Nice clean examples that don’t look overwhelming&lt;/li&gt;
&lt;li&gt;There’s also some links to examples at the talk proposal page.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Related, on attending PyCon (or other technical conferences):
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pybit.es/howto-crack-pycon.html"&gt;You don't need to be a Pro @ Python to crack the code of Pycon&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;missing: hang out and talk with, ask questions, and possibly help out with communities as part of the Expo.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://github.com/fyears/electron-python-example"&gt;&lt;strong&gt;Electron as GUI of Python Applications&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via &lt;a href="http://www.andypatterns.com/"&gt;Andy Bulka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fyears/electron-python-example"&gt;&lt;strong&gt;Electron Python&lt;/strong&gt;&lt;/a&gt; is a template of code where you use &lt;a href="https://electronjs.org/"&gt;Electron&lt;/a&gt; (nodejs + chromium) as a GUI talking to Python 3 as a backend via zerorpc. Similar to &lt;a href="https://github.com/ChrisKnott/Eel"&gt;Eel&lt;/a&gt; but much more capable e.g. you get proper native operating system menus — and users don’t need to have Chrome already installed.&lt;/li&gt;
&lt;li&gt;Needs to run zerorpc server and then start electron separately — can be done via the node backend&lt;/li&gt;
&lt;li&gt;using Electron as a GUI toolkit gets you
&lt;ul&gt;
&lt;li&gt;native menus, notifications&lt;/li&gt;
&lt;li&gt;installers, automatic updates to your app&lt;/li&gt;
&lt;li&gt;debugging and profiling that you are used to, using the Chrome debugger&lt;/li&gt;
&lt;li&gt;ES6 syntax (a cleaner Javascript with classes, module imports, no need for semicolons etc.). Squint, look sideways, and it kinda looks like Python… ;-)&lt;/li&gt;
&lt;li&gt;the full power of nodejs and its huge npm package repository&lt;/li&gt;
&lt;li&gt;the large community and ecosystem of Electron&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;How to package this all?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@abulka/electron-python-4e8c807bfa5e"&gt;&lt;strong&gt;Building a deployable Python-Electron App&lt;/strong&gt;&lt;/a&gt; post by Andy Bulka
&lt;ul&gt;
&lt;li&gt;One of the great things about using Electron as a GUI for Python is that you get to use cutting edge web technologies and you don’t have to learn some old, barely maintained GUI toolkit&lt;/li&gt;
&lt;li&gt;How much momentum, money, time and how many developer minds are focused on advancing web technologies? Answer: it’s staggeringly huge. &lt;/li&gt;
&lt;li&gt;Compare this with the number of people maintaining old toolkits from the 90’s e.g. wxPython? Answer: perhaps one or two people in their spare time. &lt;/li&gt;
&lt;li&gt;Which would you rather use?&lt;/li&gt;
&lt;li&gt;Final quote: And someone please wrap Electron-Python into an IDE so that in the future all we have to do is click a ‘build’ button — like we could 20 years ago. :-)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://github.com/pytest-dev/pluggy"&gt;&lt;strong&gt;pluggy: A minimalist production ready plugin system&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pluggy.readthedocs.io/en/latest/"&gt;docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;plugin management and hook system used by pytest&lt;/li&gt;
&lt;li&gt;A separate package to allow other projects to include plugin capabilities without exposing unnecessary state or behavior of the host project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.bloomberg.com/news/features/2018-10-04/the-big-hack-how-china-used-a-tiny-chip-to-infiltrate-america-s-top-companies"&gt;&lt;strong&gt;How China Used a Tiny Chip to Infiltrate U.S. Companies&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via &lt;a href="https://twitter.com/EduardoOrochena/status/1047785560004341760"&gt;Eduardo Orochena&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The attack by Chinese spies reached almost 30 U.S. companies, including Amazon and Apple, by compromising America’s technology supply chain, according to extensive interviews with government and corporate sources.&lt;/li&gt;
&lt;li&gt;In 2015, Amazon.com Inc. began quietly evaluating a startup called Elemental Technologies, a potential acquisition to help with a major expansion of its streaming video service, known today as Amazon Prime Video. (from Portland!)&lt;/li&gt;
&lt;li&gt;To help with due diligence, AWS, which was overseeing the prospective acquisition, hired a third-party company to scrutinize Elemental’s security&lt;/li&gt;
&lt;li&gt;servers were assembled for Elemental by &lt;a href="https://www.bloomberg.com/quote/SMCI:US"&gt;Super Micro Computer Inc.&lt;/a&gt;, a San Jose-based company (commonly known as Supermicro) that’s also one of the world’s biggest suppliers of server motherboards&lt;/li&gt;
&lt;li&gt;Nested on the servers’ motherboards, the testers found a tiny microchip, not much bigger than a grain of rice, that wasn’t part of the boards’ original design.&lt;/li&gt;
&lt;li&gt;Amazon reported the discovery to U.S. authorities, sending a shudder through the intelligence community. Elemental’s servers could be found in Department of Defense data centers, the CIA’s drone operations, and the onboard networks of Navy warships. And Elemental was just one of hundreds of Supermicro customers.&lt;/li&gt;
&lt;li&gt;During the ensuing top-secret probe, which remains open more than three years later, investigators determined that the chips allowed the attackers to create a stealth doorway into any network that included the altered machines. Multiple people familiar with the matter say investigators found that the chips had been inserted at factories run by manufacturing subcontractors in China.&lt;/li&gt;
&lt;li&gt;One government official says China’s goal was long-term access to high-value corporate secrets and sensitive government networks. No consumer data is known to have been stolen.&lt;/li&gt;
&lt;li&gt;American investigators eventually figured out who else had been hit. Since the implanted chips were designed to ping anonymous computers on the internet for further instructions, operatives could hack those computers to identify others who’d been affected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Extra:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Michael's Async course &lt;a href="https://talkpython.fm/async"&gt;&lt;strong&gt;talkpython.fm/async&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#99 parse - the regex antidote in Python</title><link>https://pythonbytes.fm/episodes/show/99/parse-the-regex-antidote-in-python</link><guid>8f59166c-abdb-4330-94fc-6c5ff62f0c7c</guid><enclosure url="https://pythonbytes.fm/episodes/download/99/parse-the-regex-antidote-in-python.mp3" length="18267056" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Tue, 16 Oct 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>parse - the regex antidote in Python</itunes:title><itunes:episode>99</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:21:18</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forbes cyber article&lt;/strong&gt;: &lt;a href="http://fortune.com/2018/10/14/cyber-saturday-doubts-swirl-around-bloombergs-china-chip-hack-report/"&gt;&lt;strong&gt;Cyber Saturday—Doubts Swirl Around Bloomberg's China Chip Hack Report&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://pypi.org/project/parse/"&gt;&lt;strong&gt;parse&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“&lt;em&gt;parse() is the opposite of format()&lt;/em&gt;&lt;em&gt;”&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex&lt;/code&gt; not required for parsing strings.&lt;/li&gt;
&lt;li&gt;Provides these functionalities: export &lt;code&gt;parse()&lt;/code&gt;, &lt;code&gt;search()&lt;/code&gt;, &lt;code&gt;findall()&lt;/code&gt;, and &lt;code&gt;with_pattern()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    # Note: space around &amp;lt; p &amp;gt; etc added to escape markdown parser safety measures
    &amp;gt;&amp;gt;&amp;gt; parse("It's {}, I love it!", "It's spam, I love it!")
    &amp;lt; Result ('spam',) {} &amp;gt;
    &amp;gt;&amp;gt;&amp;gt; search('Age: {:d}\n', 'Name: Rufus\nAge: 42\nColor: red\n')
    ( Result (42,) {} )
    &amp;gt;&amp;gt;&amp;gt; ''.join(r.fixed[0] for r in findall("&amp;lt;{}&amp;gt;", "\&amp;lt; p &amp;gt;the &amp;lt; b &amp;gt;bold&amp;lt; /b &amp;gt; text&amp;lt; /p &amp;gt;"))
    'the bold text'
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Can also compile for repeated use.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://build-system.fman.io/#features"&gt;&lt;strong&gt;fman Build System&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FBS lets you create GUI apps for Windows, Mac and Linux &lt;/li&gt;
&lt;li&gt;via Michael Herrmann&lt;/li&gt;
&lt;li&gt;Build Python GUIs, with Qt – in minutes&lt;/li&gt;
&lt;li&gt;Write a desktop application with PyQt or Qt for Python. &lt;/li&gt;
&lt;li&gt;Use fbs to package and deploy it on Windows, Mac and Linux. &lt;/li&gt;
&lt;li&gt;Avoid months of painful work with the proven solutions provided by fbs.&lt;/li&gt;
&lt;li&gt;Easy Packaging: Unlike other solutions, fbs makes packaging easy. Create installers for your app in seconds and distribute them to your users – on Windows, Mac and Linux!&lt;/li&gt;
&lt;li&gt;Open Source: fbs's source code is available on GitHub. You can use it for free in open source projects licensed under the GPL. Commercial licenses are also offered.
&lt;ul&gt;
&lt;li&gt;Free under the GPL. If that's too restrictive, a commercial license is 250 Euros once.&lt;/li&gt;
&lt;li&gt;PyQt's licensing is similar (GPL/Commercial). A license for it is € 450 (&lt;a href="https://www.riverbankcomputing.com/commercial/buy"&gt;source&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Came from fman, a dual-pane file manager for Mac, Windows and Linux&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://horejsek.github.io/python-fastjsonschema/"&gt;&lt;strong&gt;fastjsonschema&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validate JSON against a schema, quickly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://blog.horejsek.com/fastjsonschema/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://blog.jupyter.org/ipython-7-0-async-repl-a35ce050f7f7"&gt;&lt;strong&gt;IPython 7.0, Async REPL&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via &lt;a href="https://twitter.com/Spirix3"&gt;Nick Spirit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Article by &lt;a href="https://blog.jupyter.org/@mbussonn?source=post_header_lockup"&gt;Matthias Bussonnier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We are pleased to announce the release of &lt;a href="https://ipython.readthedocs.io/"&gt;IPython 7.0, the powerful Python interactive shell&lt;/a&gt; that goes above and beyond the default Python REPL with advanced tab completion, syntactic coloration, and more.&lt;/li&gt;
&lt;li&gt;Not having to support Python 2 allowed us to make full use of new Python 3 features and bring never before seen capability in a Python Console, see the &lt;a href="https://python3statement.org/"&gt;Python 3 Statement.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;One of the core features we focused on for this release is the ability to (ab)use the &lt;em&gt;async&lt;/em&gt; and &lt;em&gt;await&lt;/em&gt; syntax available in Python 3.5+.&lt;/li&gt;
&lt;li&gt;TL;DR: You can now use &lt;em&gt;async&lt;/em&gt;/&lt;em&gt;await&lt;/em&gt; at the top level in the IPython terminal and in the notebook, it should — in most of the cases — “just work”.&lt;/li&gt;
&lt;li&gt;The only thing you need to remember is: If it is an async function you need to await it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://moltenframework.com"&gt;&lt;strong&gt;molten&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.reddit.com/r/Python/comments/8ndhel/dear_python_where_have_you_been_all_my_life/"&gt;&lt;strong&gt;A Python love letter&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dear Python, where have you been all my life? (reddit thread)&lt;/li&gt;
&lt;li&gt;I am NOT a developer. But, I've tinkered with programming (in BASIC, Visual Basic, Perl, now Python) when needed over the years&lt;/li&gt;
&lt;li&gt;I decided that I needed to script something, and hoped that learning how to do it in Python was going to take me significantly less time than doing it manually - with the benefit of future timesavings. No, I didn't go from 0 to production in a day. But if my coworkers will leave me alone, I might be in production by the end of the day tomorrow.&lt;/li&gt;
&lt;li&gt;What I'm working on today isn't super complex —  But putting together what I've done so far has just been a complete joy.&lt;/li&gt;
&lt;li&gt;Overall it feels natural, intuitive, and relatively easy to understand and write the code for the basic things I'm doing - I haven't had this much fun doing stuff with code since the days fooling around with BASIC in my teens.&lt;/li&gt;
&lt;li&gt;Feedback / comments
&lt;ul&gt;
&lt;li&gt;Welcome to the club. I came up on c++; my job highly trained me in C and assembly but every project I touch I think, wait, "we can do 95% this in python". And we do.&lt;/li&gt;
&lt;li&gt;I used to have a chip on my shoulder. I wanted to do things the hard way to truly understand them. I went with C++. … I learned that doing things the smart way was better than doing things the hard way and didn't interfere with learning.&lt;/li&gt;
&lt;li&gt;I felt the exact same way I finally decided to learn it. It's like a breath of fresh air. Sadly there are few things in my life that made me feel like this, Python and Bitcoin both give me the same levels of enjoyment. … I've used Java, Groovy, Scala, Objective-C, C, C++, C#, Perl and Javascript in a professional capacity over the years and nothing feels as natural to me as Python does. The developers truly deserve any donations they get for making it. … Hell &lt;strong&gt;my next two planned tattoos are bitcoin and python&lt;/strong&gt; logos on my wrists.&lt;/li&gt;
&lt;li&gt;I taught myself Python a little over 3 years ago and I quickly went from not being programmer to being a programmer. … However the real popularity of Python comes from the depth and quality of 3rd party libraries and how easy they are to install. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Extra:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://plugins.jetbrains.com/plugin/8251-power-mode-ii"&gt;&lt;strong&gt;Brian: Power Mode II&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#100 The big 100 with special guests</title><link>https://pythonbytes.fm/episodes/show/100/the-big-100-with-special-guests</link><guid>7f76b397-ba60-4cc7-a7c2-3f54b31108fd</guid><enclosure url="https://pythonbytes.fm/episodes/download/100/the-big-100-with-special-guests.mp3" length="27322000" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 19 Oct 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>The big 100 with special guests</itunes:title><itunes:episode>100</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:42:00</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Special guests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://twitter.com/anthonypjshaw"&gt;Anthony Shaw&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/dbader_org"&gt;&lt;strong&gt;Dan Bader&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://twitter.com/brettsky"&gt;Brett Cannon&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://twitter.com/nnja"&gt;Nina Zakharenko&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://pypi.org/project/poetry/"&gt;&lt;strong&gt;poetry&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“poetry is a tool to handle dependency installation as well as building and packaging of Python packages. It only needs one file to do all of that: the new, standardized pyproject.toml. 
In other words, poetry uses pyproject.toml to replace setup.py, requirements.txt, setup.cfg, MANIFEST.in and the newly added Pipfile.”&lt;/li&gt;
&lt;li&gt;poetry 
&lt;ul&gt;
&lt;li&gt;can be used for both application and library development&lt;/li&gt;
&lt;li&gt;handles dependencies and lock files &lt;/li&gt;
&lt;li&gt;strongly encourages virtual environment use (need specifically turn it off)&lt;/li&gt;
&lt;li&gt;can be used within an existing venv or be used to create a new venv&lt;/li&gt;
&lt;li&gt;automates package build process&lt;/li&gt;
&lt;li&gt;automates deployment to PyPI or to another repository&lt;/li&gt;
&lt;li&gt;CLI and the use model is very different than pipenv. Even if they produced the same files (which they don’t), you’d still want to try both to see which workflow works best for you. For me, I think poetry matches my way of working a bit more than pipenv, but I’m still in the early stages of using either.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;From &lt;a href="http://andrewsforge.com/article/python-new-package-landscape/"&gt;&lt;strong&gt;Python's New Package Landscape&lt;/strong&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;“&lt;a href="https://www.python.org/dev/peps/pep-0517/"&gt;PEP 517&lt;/a&gt; and &lt;a href="https://www.python.org/dev/peps/pep-0518/"&gt;PEP 518&lt;/a&gt;—accepted in September 2017 and May 2016, respectively—changed this status quo by enabling package authors to select different build systems. Said differently, &lt;strong&gt;for the first time in Python, developers may opt to use a distribution build tool other than&lt;/strong&gt; &lt;code&gt;**distutils**&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; &lt;code&gt;**setuptools**&lt;/code&gt;&lt;strong&gt;. The ubiquitous&lt;/strong&gt; &lt;code&gt;**setup.py**&lt;/code&gt; &lt;strong&gt;file is no longer mandatory in Python libraries.”&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0517/"&gt;PEP 517 -- A build-system independent format for source trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0518/"&gt;PEP 518 -- Specifying Minimum Build System Requirements for Python Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Another project that utilizes pyproject.toml is &lt;a href="https://flit.readthedocs.io/en/latest/index.html"&gt;flit&lt;/a&gt;, which seems to overlap quite a bit with poetry, but I don’t think it does the venv, dependency management, dependency updating, etc.&lt;/li&gt;
&lt;li&gt;See also:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://snarky.ca/clarifying-pep-518/"&gt;Clarifying PEP 518 (a.k.a. pyproject.toml)&lt;/a&gt; - From Brett&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Question for @Brett C 517 and 518 still say “provisional” and not “final”. What’s that mean?
&lt;ul&gt;
&lt;li&gt;We are still allowed to tweak it as necessary before it&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Biggest difference is poetry uses pyproject.toml (&lt;a href="https://www.python.org/dev/peps/pep-0518/#id26"&gt;PEP518&lt;/a&gt;) instead of Pipfile. Replaces all others (setup.py, setup.cfg, requirements*.txt, manifest.IN)
&lt;ul&gt;
&lt;li&gt;Even its lock file is in TOML&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Author “does not like” pipenv, or some of the decisions it has made. Note that Kenneth has recently made some calls to introduce more discussion and openness with a PEP-style process called PEEP (&lt;a href="https://github.com/pypa/pipenv/blob/master/peeps/PEEP-001.md"&gt;PipEnv Enhancement Proposals&lt;/a&gt;).
&lt;ul&gt;
&lt;li&gt;E.g. uses a more extensive dependency resolver&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Pipenv does not support multiple environments (by design) making it useless for library development. Poetry makes this more open. See &lt;a href="https://medium.com/@DJetelina/pipenv-review-after-using-in-production-a05e7176f3f0"&gt;https://medium.com/@DJetelina/pipenv-review-after-using-in-production-a05e7176f3f0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wait. Why am I doing your notes for you @Brian O ! (awesome. Thanks Ant.)&lt;/li&gt;
&lt;li&gt;Brett has had initial discussions on Twitter with both pipenv and poetry about possibly standardizing on a lockfile format so that’s the artifact these tools produce and everything else is tool preference&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Anthony Shaw #2:&lt;/strong&gt; &lt;a href="https://github.com/klen/pylama"&gt;&lt;strong&gt;pylama&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;a href="https://radon.readthedocs.io/en/latest/"&gt;&lt;strong&gt;radon&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have been investigating tools for measuring complexity and performance of code and how that relates to test&lt;/li&gt;
&lt;li&gt;If you can refactor your code so the tests still pass, the customers are still happy AND it’s simpler then that’s a good thing - right?&lt;/li&gt;
&lt;li&gt;Radon is a Python tool that leverages the AST to give statistics on Cyclomatic Complexity (number of decisions — nested if’s are bad), maintainability index (LoC &amp;amp; Halstead) and Halstead (number of operations an complexity of AST).&lt;/li&gt;
&lt;li&gt;Radon works by adding a ComplexityVisitor to the AST.&lt;/li&gt;
&lt;li&gt;Another option is Ned Batchelder’s McCabe tool which measures the number of possible branches (similar to cyclomatic)&lt;/li&gt;
&lt;li&gt;All of these tools are combined in pylama - a code linter for Python and Javascript. Embeds pycodestyle, mccabe, radon, gjslint and pyflakes. &lt;/li&gt;
&lt;li&gt;Final goal is to have a pytest plugin that fails tests if you make your code more complicated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Nina Zakharenko #3:&lt;/strong&gt; &lt;strong&gt;Tools for teaching Python&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Teaching Python can come with hurdles — virtual environments, installing python3, pip, working with the command line.
&lt;ul&gt;
&lt;li&gt;Put out a call on twitter asking - “What software and tools do you use to teach Python?”.&lt;/li&gt;
&lt;li&gt;50 Responses, 414 votes, learned about lots of new tools. Read the &lt;a href="https://twitter.com/nnja/status/1047190883064397825"&gt;thread&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;27% use python or ipython repl&lt;/li&gt;
&lt;li&gt;13% use built-in IDLE&lt;/li&gt;
&lt;li&gt;39% use an IDE or editor - &lt;a href="https://code.visualstudio.com/docs/languages/python?WT.mc_id=pythonbytes-podcast-ninaz"&gt;Visual Studio Code&lt;/a&gt;, &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;, &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;21% use other (mix of local and &lt;a href="https://notebooks.azure.com/?WT.mc_id=pythonbytes-podcast-ninaz"&gt;hosted Jupyter notebooks&lt;/a&gt; and other responses)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;New tools I learned about:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codewith.mu"&gt;Mu editor&lt;/a&gt; - simple python editor, great for those completely new to programming. 
&lt;ul&gt;
&lt;li&gt;Large buttons with common actions above the editor.&lt;/li&gt;
&lt;li&gt;Support for educational platforms
&lt;ul&gt;
&lt;li&gt;Integrates with hardware platforms -- adafruit &lt;a href="https://www.adafruit.com/product/3333"&gt;Circuit Playground,&lt;/a&gt; &lt;a href="https://microbit.org/"&gt;micro:bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyGame&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codewith.mu/en/tutorials/"&gt;Awesome tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=neuron.neuron-IPE&amp;amp;WT.mc_id=pythonbytes-podcast-ninaz"&gt;Neuron plugin for VS Code&lt;/a&gt;, &lt;a href="https://atom.io/packages/hydrogen"&gt;Hydrogen plugin for Atom&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Interactive coding environment, brings a taste of Jupyter notebooks into your editor.&lt;/li&gt;
&lt;li&gt;Targeted towards data scientists.&lt;/li&gt;
&lt;li&gt;Show evaluated values, output pane to display charts and graphs&lt;/li&gt;
&lt;li&gt;Import to/from Jupyter notebooks&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://repl.it"&gt;repl.it&lt;/a&gt; - open source hosted cloud repl with reasonable free tier
&lt;ul&gt;
&lt;li&gt;project goal - &lt;a href="https://twitter.com/replit/status/1048064521460281345"&gt;zero effort setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 vertical panes: files, editor, repl, and a button to run the current code.&lt;/li&gt;
&lt;li&gt;no login, no signup needed to get started&lt;/li&gt;
&lt;li&gt;visual package installation - no running pip, requirements.txt automatically generated&lt;/li&gt;
&lt;li&gt;includes a debugger&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bpython/bpython"&gt;bpython&lt;/a&gt; - Used it years ago, still an active project.
&lt;ul&gt;
&lt;li&gt;Fancy curses interface to the Python interactive interpreter. Windows, type hints, expected parameters lists.&lt;/li&gt;
&lt;li&gt;Really cool feature — you can rewind your session! Pops the last line, and the entire session is reevaluated. &lt;/li&gt;
&lt;li&gt;Easily reload imported modules. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Honorable mentions: 
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://edublocks.org/"&gt;Edublocks&lt;/a&gt; - Teaching tool for kids, visually drag and drop blocks of Python code. &lt;a href="https://github.com/AllAboutCode/EduBlocks"&gt;Open source&lt;/a&gt;, created by &lt;a href="http://allaboutcode.co.uk/"&gt;Joshua Lowe&lt;/a&gt;, a brilliant 14 year old maker and programmer.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pythonanywhere.com"&gt;pythonanywhere&lt;/a&gt;, &lt;a href="http://www.codeskulptor.org/"&gt;codeskulptor.org&lt;/a&gt;, &lt;a href="https://www.codesters.com/"&gt;codesters&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Dan Bader #4: My favorite tool of 2018:&lt;/strong&gt; &lt;a href="https://black.readthedocs.io/en/stable/"&gt;&lt;strong&gt;“Black” code formatter&lt;/strong&gt;&lt;/a&gt; by Łukasz Langa&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Black is the “uncompromising Python code formatter”&lt;/li&gt;
&lt;li&gt;An opinionated auto-formatter for your code (like YAPF/autopep for Python, or gofmt for golang who popularized the idea)&lt;/li&gt;
&lt;li&gt;Heard about it &lt;a href="https://pythonbytes.fm/episodes/show/73/this-podcast-comes-in-any-color-you-want-as-long-as-it-s-black"&gt;in episode #73 by Brian&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Started using it for some small tools, then rolled it out to the whole &lt;a href="https://realpython.com"&gt;realpython.com&lt;/a&gt; code base including our public example code repo (&lt;a href="https://github.com/realpython/materials"&gt;https://github.com/realpython/materials&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Benefits are:
&lt;ul&gt;
&lt;li&gt;Auto formatting—Not only does it call you out on formatting violations, it auto-fixes them&lt;/li&gt;
&lt;li&gt;Code style discussions disappear—just use whatever Black does&lt;/li&gt;
&lt;li&gt;Super easy to make several code bases look consistent (no more mental gymnastics to format new code to match its surroundings)&lt;/li&gt;
&lt;li&gt;Automatically enforce consistent formatting on CI with “black --check” (I use a combo of flake8 + black because flake8 also catches syntax errors and some other “code smells”)
&lt;ul&gt;
&lt;li&gt;pro-tip: set up a pre-commit hook/rule to automatically run black before committing to Git. Also add it to your editor workflow (reformat on save / reformat on paste)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Tool support:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/python/editing#_formatting"&gt;Built into&lt;/a&gt; the Python extension for VS Code (which Łukasz uses 😉)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plugins.jetbrains.com/plugin/10563-black-pycharm"&gt;Plug-in&lt;/a&gt; for PyCharm (for Michael and Brian 😁 )&lt;/li&gt;
&lt;li&gt;Support in &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;For the most part I really like the formatting Black applies, if you’re not a fan you might hate this tool because it makes your code look “ugly” 🙂 &lt;/li&gt;
&lt;li&gt;Still in beta but found it very useful and helpful as of October 2018. Give it a try!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brett Cannon #5:&lt;/strong&gt; &lt;a href="https://www.youtube.com/watch?v=2XSeNQyPlTY"&gt;&lt;strong&gt;A Web without JavaScript&lt;/strong&gt;&lt;/a&gt;: Russell Keith-Magee at PyCon AU&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript has a monopoly in web browsers for client-side programming&lt;/li&gt;
&lt;li&gt;Mono-language situations are not good for anyone&lt;/li&gt;
&lt;li&gt;Can Python somehow break into the client-side web world?&lt;/li&gt;
&lt;li&gt;Example implementation of Luhn algorithm:
&lt;ul&gt;
&lt;li&gt;JavaScript: 0.4KB&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.transcrypt.org/"&gt;Transcrypt&lt;/a&gt;: transpile to 32KB&lt;/li&gt;
&lt;li&gt;&lt;a href="https://brython.info/"&gt;Brython&lt;/a&gt;: Python compiler for 0.5KB + 646KB bootstrap&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pybee.org/project/projects/bridges/batavia/"&gt;Batavia&lt;/a&gt;: Eval loop for 1.2KB + 5MB bootstrap&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/iodide-project/pyodide"&gt;Pyodide&lt;/a&gt;: CPython compiled to WASM for 0.5KB + 3MB bootstrap&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;WASM as a Python target might make this feasible
&lt;ul&gt;
&lt;li&gt;Example written in C compiled to 22KB (w/ a 65KB bootstrap for older browsers)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Maybe easier to target Electron/Node instead of client-side web initially?&lt;/li&gt;
&lt;li&gt;Scott Hanselman’s blog post &lt;a href="https://www.hanselman.com/blog/JavaScriptIsWebAssemblyLanguageAndThatsOK.aspx"&gt;https://www.hanselman.com/blog/JavaScriptIsWebAssemblyLanguageAndThatsOK.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hanselminutes interview &lt;a href="https://hanselminutes.com/638/c-and-browser-monoculture-with-vivaldis-patricia-aas"&gt;https://hanselminutes.com/638/c-and-browser-monoculture-with-vivaldis-patricia-aas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://github.com/HDE/arsenic"&gt;&lt;strong&gt;Async WebDriver implementation for asyncio and asyncio-compatible frameworks&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You’ve heard of Selenium but in an async world what do we use? Answer: &lt;code&gt;arsenic&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    # Example: Let's run a local Firefox instance.
    async def example():
        # Runs geckodriver and starts a firefox session
        async with get_session(Geckodriver(), Firefox()) as session:
              # go to example.com
              await session.get('http://example.com')
              # wait up to 5 seconds to get the h1 element from the page
              h1 = await session.wait_for_element(5, 'h1')
              # print the text of the h1 element
              print(await h1.get_text())
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Use cases include testing of web applications, load testing, automating websites, web scraping or anything else you need a web browser for. &lt;/li&gt;
&lt;li&gt;It uses real web browsers using the Webdriver specification.&lt;/li&gt;
&lt;li&gt;Warning: While this library is asynchronous, web drivers are not. You must call the APIs in sequence. The purpose of this library is to allow you to control multiple web drivers asynchronously or to use a web driver in the same thread as an asynchronous web server.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arsenic.readthedocs.io/en/latest/howto/pytest.html"&gt;Arsenic with pytest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Supported browsers
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arsenic.readthedocs.io/en/latest/reference/supported-browsers.html#headless-google-chrome"&gt;Headless Google Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arsenic.readthedocs.io/en/latest/reference/supported-browsers.html#headless-firefox"&gt;Headless Firefox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Everyone’s thoughts on async in Python these days?&lt;/li&gt;
&lt;li&gt;Selenium-Grid &lt;a href="https://www.seleniumhq.org/docs/07_selenium_grid.jsp"&gt;https://www.seleniumhq.org/docs/07_selenium_grid.jsp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Extra:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take the python survey: &lt;a href="https://talkpython.fm/survey2018"&gt;https://talkpython.fm/survey2018&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;3.7.1rc1 is out &lt;a href="https://docs.python.org/3.7/whatsnew/changelog.html#python-3-7-1-release-candidate-1"&gt;https://docs.python.org/3.7/whatsnew/changelog.html#python-3-7-1-release-candidate-1&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;A good review on Python packaging &lt;a href="http://andrewsforge.com/article/python-new-package-landscape/"&gt;http://andrewsforge.com/article/python-new-package-landscape/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;New September release of &lt;a href="https://blogs.msdn.microsoft.com/pythonengineering/2018/10/09/python-in-visual-studio-code-september-2018-release/?WT.mc_id=pythonbytes-podcast-ninaz"&gt;Python Extension for Visual Studio Code&lt;/a&gt; — lots of new features, like automatic environment activation in the terminal, debugging improvements, and more!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://2019.pycascades.com/news/2-cfp-now-open/"&gt;Submit a talk&lt;/a&gt; to &lt;a href="https://2019.pycascades.com/"&gt;PyCascades&lt;/a&gt; happening February 2019 in Seattle. &lt;a href="https://2019.pycascades.com/news/2-cfp-now-open/"&gt;Call for proposals&lt;/a&gt; closes October 21st. Mentorship available.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#101 Nobel Prize awarded to a Python convert</title><link>https://pythonbytes.fm/episodes/show/101/nobel-prize-awarded-to-a-python-convert</link><guid>5d6bb89f-8c82-4c6d-9ca5-d59765498cda</guid><enclosure url="https://pythonbytes.fm/episodes/download/101/nobel-prize-awarded-to-a-python-convert.mp3" length="15480754" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 24 Oct 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Nobel Prize awarded to a Python convert</itunes:title><itunes:episode>101</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:21:34</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythnonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://treyhunner.com/2018/10/asterisks-in-python-what-they-are-and-how-to-use-them/"&gt;&lt;strong&gt;Asterisks in Python: what they are and how to use them&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I just ** love *s&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; to pass arguments to a function
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; for list, &lt;code&gt;**&lt;/code&gt; for keyword arguments from a dictionary&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; to capture arguments passed into a function&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;*&lt;/code&gt; to accept keyword-only arguments&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;*&lt;/code&gt; to capture items during tuple unpacking
&lt;ul&gt;
&lt;li&gt;you can capture the rest if you only want to grab a few&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;*&lt;/code&gt; to unpack iterables into a list/tuple&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;**&lt;/code&gt; to unpack dictionaries into other dictionaries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="http://python-responder.org/en/latest/"&gt;&lt;strong&gt;responder web framework&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From Kenneth Reitz — A familiar HTTP Service Framework&lt;/li&gt;
&lt;li&gt;Already has 1,393 github stars&lt;/li&gt;
&lt;li&gt;Flask-like but with async support and
&lt;ul&gt;
&lt;li&gt;A pleasant API, with a single import statement.&lt;/li&gt;
&lt;li&gt;Class-based views without inheritance.&lt;/li&gt;
&lt;li&gt;ASGI framework, the future of Python web services.&lt;/li&gt;
&lt;li&gt;WebSocket support!&lt;/li&gt;
&lt;li&gt;The ability to mount any ASGI / WSGI app at a subroute.&lt;/li&gt;
&lt;li&gt;f-string syntax route declaration.&lt;/li&gt;
&lt;li&gt;Mutable response object, passed into each view. No need to return anything.&lt;/li&gt;
&lt;li&gt;Background tasks, spawned off in a ThreadPoolExecutor.&lt;/li&gt;
&lt;li&gt;GraphQL (with GraphiQL) support!&lt;/li&gt;
&lt;li&gt;OpenAPI schema generation.&lt;/li&gt;
&lt;li&gt;Single-page webapp support&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Responder gives you the ability to mount another ASGI / WSGI app at a subroute&lt;/li&gt;
&lt;li&gt;uvicorn: powers responder and is built on top of uvloop&lt;/li&gt;
&lt;li&gt;asgi: &lt;a href="https://www.encode.io/articles/hello-asgi/"&gt;https://www.encode.io/articles/hello-asgi/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3: Python Example resource:&lt;/strong&gt; &lt;a href="https://www.pythonprogramming.in/"&gt;&lt;strong&gt;pythonprogramming.in&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lots of examples&lt;/li&gt;
&lt;li&gt;Python basics including date time, strings, dictionaries &lt;/li&gt;
&lt;li&gt;pandas, matplotlib, tensorflow basics&lt;/li&gt;
&lt;li&gt;data structures and algorithms&lt;/li&gt;
&lt;li&gt;Nice reference, especially for people getting into Python for data science or scientific work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4&lt;/strong&gt;: &lt;a href="https://qz.com/1417145/economics-nobel-laureate-paul-romer-is-a-python-programming-convert/"&gt;&lt;strong&gt;This year’s Nobel Prize in economics was awarded to a Python convert&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nordhaus and Romer “have designed methods that address some of our time’s most fundamental and pressing issues: long-term sustainable growth in the global economy and the welfare of the world’s population,”&lt;/li&gt;
&lt;li&gt;Notably for a 62-year-old economist of his distinction, he is a user of the &lt;a href="https://paulromer.net/jupyter-mathematica-and-the-future-of-the-research-paper/"&gt;programming language Python&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Romer believes in making &lt;a href="https://paulromer.net/my-email-quoted-by-the-financial-times/"&gt;research transparent&lt;/a&gt;. He argues that openness and clarity about methodology is important for scientific research to gain trust.&lt;/li&gt;
&lt;li&gt;He tried to use Mathematica to share one of his studies in a way that anyone could explore every detail of his data and methods. It didn’t work. He says that Mathematica’s owner, Wolfram Research, made it too difficult to share his work in a way that didn’t require other people to use the proprietary software, too.&lt;/li&gt;
&lt;li&gt;Romer believes that open-source notebooks are the way forward for sharing research. He believes they support integrity, while proprietary software encourage secrecy. &lt;strong&gt;“The more I learn about proprietary software, the more I worry that objective truth might perish from the earth,”&lt;/strong&gt; he wrote.&lt;/li&gt;
&lt;li&gt;Michael covered a similar story for the Nobel Prize in &lt;a href="https://talkpython.fm/episodes/show/29/python-at-the-large-hadron-collider-and-cern"&gt;Physics at CERN on Talk Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jake Vanderplas Keynote at PyCon 2017: “The unexpected effectiveness of Python in Science”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://github.com/open-source-for-science/TensorFlow-Course"&gt;&lt;strong&gt;More in depth TensorFlow&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt;  &lt;a href="https://www.kickstarter.com/projects/albertgajsak/makerphone-an-educational-diy-mobile-phone"&gt;&lt;strong&gt;MAKERphone - an educational DIY mobile phone&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MAKERphone is an educational DIY mobile phone designed to bring electronics and programming to the crowd in a fun and interesting way.
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;fully functional&lt;/strong&gt; mobile phone that you can code yourself&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Games&lt;/strong&gt; such as space invaders, pong, or snake&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Apps&lt;/strong&gt; such as a custom media player that only plays cat videos&lt;/li&gt;
&lt;li&gt;Programs in &lt;strong&gt;Arduino&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;Lines of code in &lt;strong&gt;Python&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;Your first working piece of code in &lt;strong&gt;Scratch&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;custom&lt;/strong&gt; case &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Extras:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MK: &lt;a href="https://www.zdnet.com/article/around-62-of-all-internet-sites-will-run-an-unsupported-php-version-in-10-weeks/"&gt;Around 62% of all Internet sites will run an unsupported PHP version in 10 weeks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;The highly popular PHP 5.x branch will stop receiving security updates at the end of the year.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#102 Structure of a Flask Project</title><link>https://pythonbytes.fm/episodes/show/102/structure-of-a-flask-project</link><guid>458c9c86-eca9-4116-b984-b90985ae1f44</guid><enclosure url="https://pythonbytes.fm/episodes/download/102/structure-of-a-flask-project.mp3" length="17445810" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 31 Oct 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Structure of a Flask Project</itunes:title><itunes:episode>102</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:26:52</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://quantecon.org/"&gt;&lt;strong&gt;QuantEcon&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Open source code for economic modeling”&lt;/li&gt;
&lt;li&gt;“QuantEcon is a &lt;a href="http://www.numfocus.org/"&gt;NumFOCUS&lt;/a&gt; fiscally sponsored project dedicated to development and documentation of modern open source computational tools for economics, econometrics, and decision making.”&lt;/li&gt;
&lt;li&gt;Educational resource that includes:
&lt;ul&gt;
&lt;li&gt;Lectures, workshops, and seminars&lt;/li&gt;
&lt;li&gt;Cheatsheets for scientific programming in Python and Julia&lt;/li&gt;
&lt;li&gt;Notebooks&lt;/li&gt;
&lt;li&gt;QuantEcon.py : open source Python code library for economics&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://lepture.com/en/2018/structure-of-a-flask-project"&gt;&lt;strong&gt;Structure of a Flask Project&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flask is very flexible, it has no certain pattern of a project folder structure. Here are some suggestions.&lt;/li&gt;
&lt;li&gt;I always keep this one certain rule when writing modules and packages:
&lt;ul&gt;
&lt;li&gt;“Don't backward import from root &lt;code&gt;__init__.py&lt;/code&gt;.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Candidate structure:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    project/
      __init__.py
      models/
        __init__.py
        users.py
        posts.py
        ...
      routes/
        __init__.py
        home.py
        account.py
        dashboard.py
        ...
      templates/
        base.html
        post.html
        ...
      services/
        __init__.py
        google.py
        mail.py
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Love it! To this, I would rename &lt;code&gt;routes&lt;/code&gt; to &lt;code&gt;views&lt;/code&gt; or &lt;code&gt;controllers&lt;/code&gt; and add a &lt;code&gt;viewmodels&lt;/code&gt; folder and viewmodels themselves.&lt;/li&gt;
&lt;li&gt;Brian, see anything missing? 
&lt;ul&gt;
&lt;li&gt;ya. tests. :)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Another famous folder structure is app based structure, which means things are grouped bp application&lt;/li&gt;
&lt;li&gt;I (Michael) STRONGLY recommend &lt;a href="http://flask.pocoo.org/docs/1.0/blueprints/"&gt;&lt;strong&gt;Flask blueprints&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://treyhunner.com/2018/09/stop-writing-lambda-expressions/"&gt;&lt;strong&gt;Overusing lambda expressions in Python&lt;/strong&gt;&lt;/a&gt;
&lt;a href="https://treyhunner.com/2018/09/stop-writing-lambda-expressions/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lambda expressions vs defined functions
&lt;ol&gt;
&lt;li&gt;They can be immediately passed around (no variable needed)&lt;/li&gt;
&lt;li&gt;They can only have a single line of code within them&lt;/li&gt;
&lt;li&gt;They return automatically&lt;/li&gt;
&lt;li&gt;They can’t have a docstring and they don’t have a name&lt;/li&gt;
&lt;li&gt;They use a different and unfamiliar syntax&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;misuses: 
&lt;ul&gt;
&lt;li&gt;naming them. Just write a function instead&lt;/li&gt;
&lt;li&gt;calling a single function with a single argument : just use that func instead&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;overuse:
&lt;ul&gt;
&lt;li&gt;if they get complex, even a little bit, they are hard to read&lt;/li&gt;
&lt;li&gt;has to be all on one line, which reduces readibility&lt;/li&gt;
&lt;li&gt;map and filter : use comprehensions instead&lt;/li&gt;
&lt;li&gt;using custom lambdas instead of using operators from the &lt;a href="https://docs.python.org/3/library/operator.html"&gt;operator module&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://tryexceptpass.org/article/asyncio-in-37/"&gt;&lt;strong&gt;Asyncio in Python 3.7&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Cris Medina&lt;/li&gt;
&lt;li&gt;The release of Python 3.7 introduced a number of changes into the async world. 
&lt;ul&gt;
&lt;li&gt;Some may even affect you even if you don’t use asyncio.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;New Reserved Keywords: The async and await keywords are now reserved.
&lt;ul&gt;
&lt;li&gt;There’s already quite a few modules broken because of this. However, the fix is easy: rename any variables and parameters.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Context Variables: Version 3.7 now allows the use of context variables within async tasks. If this is a new concept to you, it might be easier to picture it as global variables whose values are local to the currently running coroutines.&lt;/li&gt;
&lt;li&gt;Python has similar constructs for doing this very thing across threads. However, those were not sufficient in async-world&lt;/li&gt;
&lt;li&gt;New &lt;code&gt;asyncio.run()&lt;/code&gt; function
&lt;ul&gt;
&lt;li&gt;With a call to &lt;code&gt;asyncio.run()&lt;/code&gt;, we can now automatically create a loop, run a task on it, and close it when complete.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Simpler Task Management: Along the same lines, there’s a new asyncio.create_task() function that helps make tasks that inside the current loop, instead of having to get the loop first and calling create task on top of it.&lt;/li&gt;
&lt;li&gt;Simpler Event Loop Management: The addition of asyncio.get_running_loop() will help determine the active event loop, and catch a RuntimeError if there’s no loop running. &lt;/li&gt;
&lt;li&gt;Async Context Managers: Another quality-of-life improvement. We now have the asynccontextmanager() decorator for producing async context managers without the need for a class that implements __aenter__() or __aexit__(). &lt;/li&gt;
&lt;li&gt;Performance Improvements: Several functions are now optimized for speed, some were even reimplemented in C. Here’s the list:
&lt;ul&gt;
&lt;li&gt;asyncio.get_event_loop() is now 15 times faster.&lt;/li&gt;
&lt;li&gt;asyncio.gather() is 15% faster.&lt;/li&gt;
&lt;li&gt;asyncio.sleep() is two times faster when the delay is zero or negative.&lt;/li&gt;
&lt;li&gt;asyncio.Future callback management is optimized.&lt;/li&gt;
&lt;li&gt;Reduced overhead for asyncio debug mode.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Lots lots more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Brian #5: Giving thanks with&lt;/strong&gt; &lt;code&gt;**pip thank**&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;proposal: &lt;strong&gt;&lt;a href="https://github.com/pypa/pip/issues/5970"&gt;https://github.com/pypa/pip/issues/5970&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://realpython.com/python-testing/"&gt;&lt;strong&gt;Getting Started With Testing in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Anthony Shaw, 33 minutes reading time according to Instapaper&lt;/li&gt;
&lt;li&gt;Automated vs. Manual Testing&lt;/li&gt;
&lt;li&gt;Unit Tests vs. Integration Tests: A unit test is a smaller test, one that checks that a single component operates in the right way. A unit test helps you to isolate what is broken in your application and fix it faster.&lt;/li&gt;
&lt;li&gt;Compares unittest,  nose or nose2, pytest&lt;/li&gt;
&lt;li&gt;Covers things like:
&lt;ul&gt;
&lt;li&gt;Writing Your First Test&lt;/li&gt;
&lt;li&gt;Where to Write the Test&lt;/li&gt;
&lt;li&gt;How to Structure a Simple Test&lt;/li&gt;
&lt;li&gt;How to Write Assertions&lt;/li&gt;
&lt;li&gt;Dangers of Side Effects&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Testing in PyCharm and VS Code&lt;/li&gt;
&lt;li&gt;Testing for Web Frameworks Like Django and Flask&lt;/li&gt;
&lt;li&gt;Advanced Testing Scenarios&lt;/li&gt;
&lt;li&gt;Even: Testing for Security Flaws in Your Application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Extras:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MK:&lt;/strong&gt; &lt;a href="http://hackurname.com/"&gt;&lt;strong&gt;Hack ur name&lt;/strong&gt;&lt;/a&gt; — aka Pivot me bro (done in Python: &lt;a href="https://github.com/veekaybee/hustlr"&gt;https://github.com/veekaybee/hustlr&lt;/a&gt; ) by Vicki Boykis&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MK&lt;/strong&gt;: &lt;a href="https://blog.python.org/2018/10/python-371-and-367-are-now-available.html"&gt;&lt;strong&gt;Python 3.7.1 and 3.6.7 Are Now Available&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MK&lt;/strong&gt;: Click-Driven Development (CDD) - via @&lt;a href="https://twitter.com/tombaker"&gt;tombaker&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Use Python Click package to mock up suite of commands w/options/args. &lt;/li&gt;
&lt;li&gt;Decorated functions print description of intended results. &lt;/li&gt;
&lt;li&gt;Replace placeholders with code.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#103 Getting to 10x (results for developers)</title><link>https://pythonbytes.fm/episodes/show/103/getting-to-10x-results-for-developers</link><guid>963916fb-1e28-4246-8b18-74dcd5a2b535</guid><enclosure url="https://pythonbytes.fm/episodes/download/103/getting-to-10x-results-for-developers.mp3" length="26105035" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 08 Nov 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Getting to 10x (results for developers)</itunes:title><itunes:episode>103</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:27:06</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://fenicsproject.org/"&gt;&lt;strong&gt;FEniCS&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“FEniCS is a popular open-source (&lt;a href="https://www.gnu.org/licenses/lgpl-3.0.en.html"&gt;LGPLv3&lt;/a&gt;) computing platform for solving partial differential equations (PDEs). FEniCS enables users to quickly translate scientific models into efficient finite element code. With the high-level Python and C++ interfaces to FEniCS, it is easy to get started, but FEniCS offers also powerful capabilities for more experienced programmers. FEniCS runs on a multitude of platforms ranging from laptops to high-performance clusters.”&lt;/li&gt;
&lt;li&gt;Solves partial differential equations efficiently with a combination of C++ and Python.&lt;/li&gt;
&lt;li&gt;Can be run on a desktop/laptop or deployed to a supercomputer with thousands of parallel processes.&lt;/li&gt;
&lt;li&gt;is a &lt;a href="http://www.numfocus.org/"&gt;NumFOCUS&lt;/a&gt; fiscally supported project&lt;/li&gt;
&lt;li&gt;“makes the implementation of the mathematical formulation of a system of partial differential equations almost seamless.” - Sébastien Brisard&lt;/li&gt;
&lt;li&gt;“FEniCS is in fact a C++ project with a full-featured Python interface. The library itself generates C++ code on-the-fly, that can be called (on-the-fly) from python. It's almost magical... Under the hood, it used to use SWIG, and recently moved to pybind11. I guess the architecture that was set up to achieve this level of automation might be useful in other situations.” - Sébastien Brisard&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://github.com/Bogdanp/cursive_re"&gt;&lt;strong&gt;cursive_re&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via &lt;a href="https://twitter.com/feoh"&gt;Christopher Patti&lt;/a&gt;, created by Bogdan Popa&lt;/li&gt;
&lt;li&gt;Readable regular expressions for Python 3.6 and up.&lt;/li&gt;
&lt;li&gt;It’s a tiny Python library made up of combinators that help you write regular expressions you can read and modify six months down the line.&lt;/li&gt;
&lt;li&gt;Best understood via an example:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    &amp;gt;&amp;gt;&amp;gt; hash = text('#')
    &amp;gt;&amp;gt;&amp;gt; hexdigit = any_of(in_range('0', '9') + in_range('a', 'f') + in_range('A', 'F'))
    &amp;gt;&amp;gt;&amp;gt; hexcolor = (
    ...     beginning_of_line() + hash +
    ...     group(repeated(hexdigit, exactly=6) | repeated(hexdigit, exactly=3)) +
    ...     end_of_line()
    ... )
    &amp;gt;&amp;gt;&amp;gt; str(hexcolor)
    '^\\#([a-f0-9]{6}|[a-f0-9]{3})$'
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Has automatic escaping for &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;\&lt;/code&gt; etc: &lt;code&gt;str(any_of(text("[]"))) → '[\\[\\]]'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Easily testable / inspectable. Just call &lt;code&gt;str&lt;/code&gt; on any expression.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #3:&lt;/strong&gt;  &lt;a href="https://www.pyimagesearch.com/"&gt;&lt;strong&gt;pyimagesearch&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adrian Rosebrock is focused on teaching OpenCV with Python&lt;/li&gt;
&lt;li&gt;Just a really cool resource of integrating computer vision and Python. Both free and paid resources.&lt;/li&gt;
&lt;li&gt;He had one of the most successful tech learning kickstarters (ever?) on this topic: &lt;a href="https://www.kickstarter.com/projects/adrianrosebrock/deep-learning-for-computer-vision-with-python-eboo"&gt;https://www.kickstarter.com/projects/adrianrosebrock/deep-learning-for-computer-vision-with-python-eboo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.youtube.com/watch?v=cNBtDstOTmA"&gt;&lt;strong&gt;Visualization of Python development up till 2012&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via &lt;a href="https://twitter.com/OphionGroup"&gt;Ophion Group (on twitter)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;mercurial (hg) source code repository commit history &lt;/li&gt;
&lt;li&gt;August 1990 - June 2012 (cpython 3.3.0 alpha)&lt;/li&gt;
&lt;li&gt;Watch the first minute, then click ahead minute at a time and watch for a few seconds to get the full feel &lt;/li&gt;
&lt;li&gt;Really interesting to see a visual representation of the growth of an open source ecosystem&lt;/li&gt;
&lt;li&gt;Built with Gource: &lt;a href="https://gource.io/"&gt;https://gource.io/&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Amazing video of the history gource and its visualization of various projects: &lt;a href="https://vimeo.com/15943704"&gt;https://vimeo.com/15943704&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Who wants to build this for 2012-present?&lt;/li&gt;
&lt;li&gt;Would make an amazing lightning talk!&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://medium.com/javascript-scene/getting-to-10x-results-what-any-developer-can-learn-from-the-best-54b6c296a5ef"&gt;&lt;strong&gt;Getting to 10x (Results): What Any Developer Can Learn from the Best&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forget the “10x” bit if that term is fighting words.  - Brian’s advice
&lt;ul&gt;
&lt;li&gt;How about just “&lt;strong&gt;ways to improve your effectiveness as a developer&lt;/strong&gt;”?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;“… there is a clear path to excellence. People aren’t born great developers. They get there through focused, deliberate practice.”&lt;/li&gt;
&lt;li&gt;traits of great developers
&lt;ul&gt;
&lt;li&gt;problem solver&lt;/li&gt;
&lt;li&gt;skilled&lt;/li&gt;
&lt;li&gt;mentor/teacher&lt;/li&gt;
&lt;li&gt;excellent learner&lt;/li&gt;
&lt;li&gt;passionate&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;traits to avoid:
&lt;ul&gt;
&lt;li&gt;incompetent&lt;/li&gt;
&lt;li&gt;arrogant&lt;/li&gt;
&lt;li&gt;uncooperative&lt;/li&gt;
&lt;li&gt;unmotivated&lt;/li&gt;
&lt;li&gt;stubborn&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Focus on your strengths more than your weaknesses&lt;/li&gt;
&lt;li&gt;Pick 1 thing to improve on this week and focus on it relentlessly&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://chaostoolkit.org"&gt;&lt;strong&gt;Chaos Toolkit&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chaos Engineering is the discipline of experimenting on a distributed system in order to build confidence in the system's capability to withstand turbulent conditions in production.&lt;/li&gt;
&lt;li&gt;Netflix uses the chaos monkey (et. al.) on their systems. Covered on &lt;a href="https://talkpython.fm/episodes/show/16/python-at-netflix"&gt;https://talkpython.fm/episodes/show/16/python-at-netflix&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;The Chaos Toolkit aims to be the simplest and easiest way&lt;/li&gt;
&lt;li&gt;to explore building, and automating, your own Chaos Engineering Experiments.&lt;/li&gt;
&lt;li&gt;Integrates with Kubernetes, AWS, Google Cloud, Microsoft Azure, etc.&lt;/li&gt;
&lt;li&gt;To give you an idea, here are some things it can do to aws:
&lt;ul&gt;
&lt;li&gt;lambda: &lt;code&gt;delete_function_concurrency&lt;/code&gt; Removes concurrency limit applied to the specified Lambda&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stop_instance&lt;/code&gt; Stop a single EC2 instance. You may provide an instance id explicitly or, if you only specify the AZ, a random instance will be selected.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Extras:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MK: &lt;a href="https://www.zdnet.com/article/twelve-malicious-python-libraries-found-and-removed-from-pypi/"&gt;Malicious Python Libraries Found &amp;amp; Removed From PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MK: &lt;a href="https://twitter.com/tirkarthi/status/1058996814790111232"&gt;Some really long type names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Brian: &lt;a href="https://testandcode.com/52"&gt;Deep dive into pyproject.toml and the future of Python packaging with Brett Cannon&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;follow up from &lt;a href="http://pythonbytes.fm/100"&gt;episode 100 Python Bytes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#104 API Evolution the Right Way</title><link>https://pythonbytes.fm/episodes/show/104/api-evolution-the-right-way</link><guid>0c52fa82-b95e-4696-85b4-04e594957997</guid><enclosure url="https://pythonbytes.fm/episodes/download/104/api-evolution-the-right-way.mp3" length="28996650" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Sat, 17 Nov 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>API Evolution the Right Way</itunes:title><itunes:episode>104</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:30:07</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;h1&gt;Python Bytes 104&lt;/h1&gt;

&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael #0.1: Chapters and play at&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chapters are now in the mp3 file&lt;/li&gt;
&lt;li&gt;Play at button on the website (doesn’t work on iOS unless you click the play to start it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael #0.2: &lt;a href="https://pythonbytes.fm/friends-of-the-show"&gt;Become a friend of the show&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pythonbytes.fm/friends-of-the-show"&gt;https://pythonbytes.fm/friends-of-the-show&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Or just click “friends of the show” in the navbar&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://github.com/tonybaloney/wily"&gt;&lt;strong&gt;wily: A Python application for tracking, reporting on timing and complexity in tests and applications.&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anthony Shaw (aka “Friend of the Show”, aka “Ant”)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(if listing 2 “aliases, do you just put one “aka” or one per alias?)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;I should cover this on Test &amp;amp; Code for the content of the package. But it’s the actual packaging that I want to talk about today.&lt;/li&gt;
&lt;li&gt;Wily is a code base that can be used as an example of embracing &lt;code&gt;pyproject.toml&lt;/code&gt; (pyproject.toml discussed on &lt;a href="https://pythonbytes.fm/100"&gt;PB 100&lt;/a&gt; and &lt;a href="https://testandcode.com/52"&gt;T&amp;amp;C 52&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;A real nice clean project using newer packaging tools that also has some frequently used bells and whistles&lt;/li&gt;
&lt;li&gt;NO setup.py file&lt;/li&gt;
&lt;li&gt;wily’s pyproject.toml includes
&lt;ul&gt;
&lt;li&gt;flit packaging, metadata, scripts &lt;/li&gt;
&lt;li&gt;tox configuration&lt;/li&gt;
&lt;li&gt;black configuration&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;project also has 
&lt;ul&gt;
&lt;li&gt;testing done on TravisCI&lt;/li&gt;
&lt;li&gt;rst based docs and readthedocs updates&lt;/li&gt;
&lt;li&gt;code coverage&lt;/li&gt;
&lt;li&gt;black pre-commit for wily&lt;/li&gt;
&lt;li&gt;pre-commit hook for your project to run wily&lt;/li&gt;
&lt;li&gt;CONTRIBUTING.md that includes code of conduct&lt;/li&gt;
&lt;li&gt;HISTORY.md with a nice format&lt;/li&gt;
&lt;li&gt;tests using pytest&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://blogs.msdn.microsoft.com/pythonengineering/2018/11/08/python-in-visual-studio-code-october-2018-release/"&gt;&lt;strong&gt;Latest VS Code has Juypter support&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In this release, closed a total of 49 issues, including:
&lt;ul&gt;
&lt;li&gt;Jupyter support: import notebooks and run code cells in a Python Interactive window&lt;/li&gt;
&lt;li&gt;Use new virtual environments without having to restart Visual Studio Code&lt;/li&gt;
&lt;li&gt;Code completions in the debug console window&lt;/li&gt;
&lt;li&gt;Improved completions in language server, including recognition of namedtuple, and generic types&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The extension now contains new editor-centric interactive programming capabilities built on top of Jupyter.&lt;/li&gt;
&lt;li&gt;have Jupyter installed in your environment (e.g. set your environment to Anaconda) and type #%% into a Python file to define a Cell. You will notice a “Run Cell” code lens will appear above the #%% line:&lt;/li&gt;
&lt;li&gt;Cells in the Jupyter Notebook will be converted to cells in a Python file by adding #%% lines. You can run the cells to view the notebook output in Visual Studio code, including plots&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #3:&lt;/strong&gt;  &lt;a href="https://emptysqua.re/blog/api-evolution-the-right-way/"&gt;&lt;strong&gt;API Evolution the Right Way&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A. Jesse Jiryu Davis&lt;/li&gt;
&lt;li&gt;adding features&lt;/li&gt;
&lt;li&gt;removing features&lt;/li&gt;
&lt;li&gt;adding parameters&lt;/li&gt;
&lt;li&gt;changing behavior&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://github.com/MikeTheWatchGuy/PySimpleGUI/tree/master/PySimpleGUIQt"&gt;&lt;strong&gt;PySimpleGUI now on Qt&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project by Mike B&lt;/li&gt;
&lt;li&gt;Covered back on &lt;a href="https://pythonbytes.fm/episodes/show/90/a-django-async-roadmap"&gt;https://pythonbytes.fm/episodes/show/90/a-django-async-roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simple declarative UI “builder”&lt;/li&gt;
&lt;li&gt;Looking to take your Python code from the world of command lines and into the convenience of a GUI?&lt;/li&gt;
&lt;li&gt;Have a Raspberry Pi with a touchscreen that's going to waste because you don't have the time to learn a GUI SDK?&lt;/li&gt;
&lt;li&gt;Look no further, you've found your GUI package.&lt;/li&gt;
&lt;li&gt;Now supports Qt&lt;/li&gt;
&lt;li&gt;Modern Python only&lt;/li&gt;
&lt;li&gt;More frameworks likely coming&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://discuss.python.org/t/comparison-of-the-7-governance-peps/392"&gt;&lt;strong&gt;Comparison of the 7 governance PEPs&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Started by &lt;a href="https://twitter.com/VictorStinner"&gt;Victor Stinner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The different PEPs are compared by:
&lt;ul&gt;
&lt;li&gt;hierarchy&lt;/li&gt;
&lt;li&gt;number of people involved&lt;/li&gt;
&lt;li&gt;requirements for candidates to be considered for certain positions&lt;/li&gt;
&lt;li&gt;elections: who votes, and how&lt;/li&gt;
&lt;li&gt;term limits&lt;/li&gt;
&lt;li&gt;no confidence vote&lt;/li&gt;
&lt;li&gt;teams/experts&lt;/li&gt;
&lt;li&gt;PEP process&lt;/li&gt;
&lt;li&gt;core dev promotion and ejection&lt;/li&gt;
&lt;li&gt;how governance will be updated&lt;/li&gt;
&lt;li&gt;code of conduct&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-8000/"&gt;PEP 8000&lt;/a&gt;, &lt;strong&gt;Python Language Governance Proposal Overview&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-8010"&gt;PEP 8010&lt;/a&gt; - &lt;strong&gt;The Technical Leader Governance Model&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;continue status quo (ish)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-8011"&gt;PEP 8011&lt;/a&gt; - &lt;strong&gt;Python Governance Model Lead by Trio of Pythonistas&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;like status quo but with 3 co-leaders&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-8012"&gt;PEP 8012&lt;/a&gt; - &lt;strong&gt;The Community Governance Model&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;no central authority&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-8013"&gt;PEP 8013&lt;/a&gt; - &lt;strong&gt;The External Governance Model&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;non-core oversight&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-8014"&gt;PEP 8014&lt;/a&gt; - &lt;strong&gt;The Commons Governance Model&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;core oversight&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-8015"&gt;PEP 8015&lt;/a&gt; - &lt;strong&gt;Organization of the Python community&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;push most decision-making to teams&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-8016"&gt;PEP 8016&lt;/a&gt; - &lt;strong&gt;The Steering Council Model&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;bootstrap iterating on governance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6:&lt;/strong&gt; &lt;a href="http://doc.qt.io/qtforpython/shiboken2/"&gt;&lt;strong&gt;Shiboken&lt;/strong&gt;&lt;/a&gt; (from Qt for Python project)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From PySide2 (AKA Qt for Python) project&lt;/li&gt;
&lt;li&gt;Generate Python bindings from arbitrary C/C++ code&lt;/li&gt;
&lt;li&gt;Has a Typesystem (based on XML) which allows modifying the obtained information to properly represent and manipulate the C++ classes into the Python World.&lt;/li&gt;
&lt;li&gt;Can remove and add methods to certain classes, and even modify the arguments of each function, which is really necessary when both C++ and Python collide and a decision needs to be made to properly handle the data structures or types.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.qt.io/blog/2018/05/24/qt-for-python-under-the-hood/"&gt;Qt for Python: under the hood&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.qt.io/blog/2018/05/31/write-python-bindings/"&gt;Write your own Python bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Other options include:
&lt;ul&gt;
&lt;li&gt;CFFI (example &lt;a href="https://dbader.org/blog/python-cffi"&gt;dbader.org&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Cython (example:  &lt;a href="https://medium.com/@shamir.stav_83310/making-your-c-library-callable-from-python-by-wrapping-it-with-cython-b09db35012a3"&gt;via shamir.stav&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Extras:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Michael: &lt;a href="https://www.amazon.com/Mission-Python-Code-Space-Adventure-ebook/dp/B072STNXT8"&gt;&lt;strong&gt;Mission Python: Code a Space Adventure Game! book&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Michael: &lt;a href="https://twitter.com/pycon/status/1062031566468190208"&gt;&lt;strong&gt;PyCon tickets are on sale&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Michael: &lt;a href="https://2019.pycascades.com/"&gt;&lt;strong&gt;PyCascade tickets are on sale&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#105 Colorizing and Restoring Old Images with Deep Learning</title><link>https://pythonbytes.fm/episodes/show/105/colorizing-and-restoring-old-images-with-deep-learning</link><guid>1f6f43fc-fcf4-4c37-9b3c-ab3269fcc45e</guid><enclosure url="https://pythonbytes.fm/episodes/download/105/colorizing-and-restoring-old-images-with-deep-learning.mp3" length="23363030" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 23 Nov 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Colorizing and Restoring Old Images with Deep Learning</itunes:title><itunes:episode>105</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:24:15</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://blog.floydhub.com/colorizing-and-restoring-old-images-with-deep-learning/"&gt;&lt;strong&gt;Colorizing and Restoring Old Images with Deep Learning&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Text interview by Charlie Harrington of Jason Antic, developer of &lt;a href="https://github.com/jantic/DeOldify"&gt;DeOldify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A whole bunch of machine learning buzzwords that I don’t understand in the slightest combine to make a really cool to to make B&amp;amp;W photos look freaking amazing.&lt;/li&gt;
&lt;li&gt;“This is a deep learning based model. More specifically, what I've done is combined the following approaches:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Self-Attention Generative Adversarial Network&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Training structure inspired by (but not the same as) &lt;strong&gt;Progressive Growing of GANs.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Two Time-Scale Update Rule.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generator Loss&lt;/strong&gt; is two parts: One is a basic Perceptual Loss (or Feature Loss) based on VGG16. The second is the loss score from the critic.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://platformio.org/platformio-ide"&gt;&lt;strong&gt;PlatformIO IDE for VSCode&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Jason Pecor&lt;/li&gt;
&lt;li&gt;PlatformIO is an open source ecosystem for IoT development&lt;/li&gt;
&lt;li&gt;Cross-platform IDE and unified debugger. Remote unit testing and firmware updates&lt;/li&gt;
&lt;li&gt;Built on Visual Studio Code which has a nice extension for Python&lt;/li&gt;
&lt;li&gt;PlatformIO, combined with the features of VSCode provides some great improvements for project development over the standard Arduino IDE for Arduino-compatible microcontroller based solutions.&lt;/li&gt;
&lt;li&gt;Some of these features are paid, but it’s a reasonable price&lt;/li&gt;
&lt;li&gt;With Python becoming more popular for microcontroller design, as well, this might be a very nice option for designers.&lt;/li&gt;
&lt;li&gt;And for Jason’s, specifically, it provides a single environment that can eventually be configured to handle doing the embedded code design, associated Python supporting tools mods, and HDL development. &lt;/li&gt;
&lt;li&gt;The PlatformIO Core written in Python.  Python 2.7 (hiss…)&lt;/li&gt;
&lt;li&gt;Jason’s test drive video from Tuesday:  &lt;a href="https://www.youtube.com/watch?v=pXv_ky6HAVI&amp;amp;feature=youtu.be"&gt;&lt;strong&gt;Test Driving PlatformIO IDE for VSCode&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://www.anaconda.com/blog/developer-blog/python-data-visualization-2018-why-so-many-libraries/"&gt;&lt;strong&gt;Python Data Visualization 2018: Why So Many Libraries?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nice overview of visualization landscape, by Anaconda team&lt;/li&gt;
&lt;li&gt;Differentiating factors, API types, and emerging trends&lt;/li&gt;
&lt;li&gt;Related: &lt;a href="http://renesd.blogspot.com/2018/11/drawing-data-with-flask-and-matplotlib.html"&gt;Drawing Data with Flask and matplotlib&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Finally! A really simple example app in Flask that shows how to both generate and display matplotlib plots.&lt;/li&gt;
&lt;li&gt;I was looking for something like this about a year ago and didn’t find it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://coder.com/"&gt;&lt;strong&gt;coder.com - VS Code in the cloud&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full Visual Studio Code, but in your browser&lt;/li&gt;
&lt;li&gt;Code in the browser&lt;/li&gt;
&lt;li&gt;Access up to 96 cores&lt;/li&gt;
&lt;li&gt;VS Code + extensions, so all the languages and features&lt;/li&gt;
&lt;li&gt;Collaborate in real time, think google docs&lt;/li&gt;
&lt;li&gt;Access linux from any OS&lt;/li&gt;
&lt;li&gt;Note: They sponsored an episode of Talk Python To Me, but this is not an ad here...&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://www.forbes.com/sites/oracle/2018/11/20/by-welcoming-women-pythons-founder-overcomes-closed-minds-in-open-source/"&gt;&lt;strong&gt;By Welcoming Women, Python’s Founder Overcomes Closed Minds In Open Source&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forbes’s article about Guido and the Python community actively working to get more women involved in core development as well as speaking at conferences.&lt;/li&gt;
&lt;li&gt;Good lessons for other projects, and work teams, about how you cannot just passively “let people join”, you need to work to make it happen.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6:&lt;/strong&gt; &lt;a href="http://alpopkes.com/portfolio/portfolio-2/"&gt;&lt;strong&gt;Machine Learning Basics&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From Anna-Lena Popkes&lt;/li&gt;
&lt;li&gt;Plain python implementations of basic machine learning algorithms&lt;/li&gt;
&lt;li&gt;Repository contains implementations of basic machine learning algorithms in plain Python (modern Python, yay!)&lt;/li&gt;
&lt;li&gt;All algorithms are implemented from scratch without using additional machine learning libraries. &lt;/li&gt;
&lt;li&gt;Goal is to provide a basic understanding of the algorithms and their underlying structure, not to provide the most efficient implementations.&lt;/li&gt;
&lt;li&gt;Most of the algorithms
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/zotroneneis/machine_learning_basics/blob/master/linear_regression.ipynb"&gt;Linear Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zotroneneis/machine_learning_basics/blob/master/logistic_regression.ipynb"&gt;Logistic Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zotroneneis/machine_learning_basics/blob/master/perceptron.ipynb"&gt;Perceptron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zotroneneis/machine_learning_basics/blob/master/k_nearest_neighbour.ipynb"&gt;k-nearest-neighbor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zotroneneis/machine_learning_basics/blob/master/kmeans.ipynb"&gt;k-Means clustering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zotroneneis/machine_learning_basics/blob/master/simple_neural_net.ipynb"&gt;Simple neural network with one hidden layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zotroneneis/machine_learning_basics/blob/master/softmax_regression.ipynb"&gt;Multinomial Logistic Regression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zotroneneis/machine_learning_basics/blob/master/decision_tree_classification.ipynb"&gt;Decision tree for classification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zotroneneis/machine_learning_basics/blob/master/decision_tree_regression.ipynb"&gt;Decision tree for regression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Anna-Lena was on Talk Python on 186: http://talkpython.fm/186&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extras:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Michael: &lt;a href="https://twitter.com/mkennedy/status/1065017619151912960"&gt;&lt;strong&gt;PSF Fellow Nominations are open&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Michael: &lt;a href="https://setanta.wordpress.com/2009/08/31/shiboken/"&gt;&lt;strong&gt;Shiboken has no meaning&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Brian: &lt;a href="https://aws.amazon.com/blogs/compute/python-3-7-runtime-now-available-in-aws-lambda/"&gt;&lt;strong&gt;Python 3.7 runtime now available in AWS Lambda&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#106 Fluent query APIs on Python collections</title><link>https://pythonbytes.fm/episodes/show/106/fluent-query-apis-on-python-collections</link><guid>b80882fe-ceda-484d-a0fe-fbd8e8cbe73f</guid><enclosure url="https://pythonbytes.fm/episodes/download/106/fluent-query-apis-on-python-collections.mp3" length="25375760" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Sat, 01 Dec 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Fluent query APIs on Python collections</itunes:title><itunes:episode>106</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:26:21</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Brian #1:&lt;/strong&gt; &lt;strong&gt;Dependency Management through a DevOps Lens&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hynek.me/articles/python-app-deps-2018"&gt;Python Application Dependency Management in 2018&lt;/a&gt; - Hynek&lt;/li&gt;
&lt;li&gt;An opinionated comparison of one use case and &lt;a href="https://pypi.org/project/pipenv/"&gt;pipenv&lt;/a&gt;, &lt;a href="https://github.com/sdispater/poetry"&gt;poetry&lt;/a&gt;, &lt;a href="https://pypi.org/project/pip-tools/"&gt;pip-tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“We have more ways to manage dependencies in Python applications than ever. But how do they fare in production? Unfortunately this topic turned out to be quite polarizing and was at the center of a lot of heated debates. This is my attempt at an opinionated review through a DevOps lens.”&lt;/li&gt;
&lt;li&gt;Best disclaimer in a blog article ever:
&lt;ul&gt;
&lt;li&gt;“&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; The following technical opinions are mine alone and if you use them as a weapon to attack &lt;em&gt;people&lt;/em&gt; who try to improve the packaging situation you’re objectively a bad person. Please be nice.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;  Solution needs to meet the following features:
&lt;ol&gt;
&lt;li&gt;Allow me specify my immediate dependencies (e.g. Django),&lt;/li&gt;
&lt;li&gt;resolve the dependency tree and lock all of them with their versions and ideally &lt;a href="https://pip.pypa.io/en/stable/reference/pip_install/#hash-checking-mode"&gt;&lt;strong&gt;hashes&lt;/strong&gt;&lt;/a&gt; (&lt;a href="https://hynek.me/articles/python-app-deps-2018/#fn:ideally-hashes"&gt;&lt;strong&gt;more on hashes&lt;/strong&gt;&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;integrate somehow with &lt;a href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt; so I can run my tests,&lt;/li&gt;
&lt;li&gt;and finally allow me to install a project with all its locked dependencies into a virtual environment of my choosing.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Seem like reasonable wishes. So far, none of the solutions work perfectly.&lt;/li&gt;
&lt;li&gt;A good example of pointing out tooling issues with his use case while being respectful of the people involved in creating other tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://github.com/Rockhopper-Technologies/pluginlib"&gt;&lt;strong&gt;Plugins made simple with&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://github.com/Rockhopper-Technologies/pluginlib"&gt;&lt;strong&gt;pluginlib&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;makes creating plugins for Python very simple&lt;/li&gt;
&lt;li&gt;it relies on metaclasses, but the average programmer can easily get lost dealing with metaclasses&lt;/li&gt;
&lt;li&gt;Main Features:
&lt;ul&gt;
&lt;li&gt;Plugins are validated when they are loaded (instead of when they are used)&lt;/li&gt;
&lt;li&gt;Plugins can be loaded through different mechanisms (modules, filesystem paths, entry points)&lt;/li&gt;
&lt;li&gt;Multiple versions of the same plugin are supported (The newest one is used by default)&lt;/li&gt;
&lt;li&gt;Plugins can be blacklisted by type, name, or version&lt;/li&gt;
&lt;li&gt;Multiple plugin groups are supported so one program can use multiple sets of plugins that won't conflict&lt;/li&gt;
&lt;li&gt;Plugins support conditional loading (examples: os, version, installed software, etc)&lt;/li&gt;
&lt;li&gt;Once loaded, plugins can be accessed through dictionary or dot notation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://pybit.es/selenium-pytest-and-django.html"&gt;&lt;strong&gt;How to Test Your Django App with Selenium and pytest&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bob Belderbos&lt;/li&gt;
&lt;li&gt;“In this article I will show you how to test a Django app with pytest and Selenium. We will test our &lt;a href="https://codechalleng.es/"&gt;CodeChalleng.es platform&lt;/a&gt; comparing the logged out homepage vs the logged in dashboard. We will navigate the DOM matching elements and more.”&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #4: &lt;a href="https://github.com/olirice/flupy"&gt;Fluent collection APIs&lt;/a&gt; (&lt;code&gt;flupy&lt;/code&gt; and &lt;code&gt;asq&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;flupy implements a fluent interface for chaining multiple method calls as a single python expression. &lt;/li&gt;
&lt;li&gt;All flupy methods return generators and are evaluated lazily in depth-first order. &lt;/li&gt;
&lt;li&gt;This allows flupy expressions to transform arbitrary size data in extremely limited memory.&lt;/li&gt;
&lt;li&gt;Example:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    pipeline = flu(count()).map(lambda x: x**2) \
                           .filter(lambda x: x % 517 == 0) \
                           .chunk(5) \
                           .take(3)

    for item in pipeline:
      print(item)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The CLI in particular has been great for our data science team. Not everyone is super comfortable with linux-fu so having a cross-platform way to leverage python knowledge on the shell has been an easy win.&lt;/li&gt;
&lt;li&gt;Also if you are LINQ inclined: &lt;strong&gt;&lt;a href="https://github.com/sixty-north/asq"&gt;https://github.com/sixty-north/asq&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asq&lt;/code&gt; is simple implementation of a LINQ-inspired API for Python which operates over Python iterables, including a parallel version implemented in terms of the Python standard library multiprocessing module.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    # ASQ
    &amp;gt;&amp;gt;&amp;gt; from asq import query
    &amp;gt;&amp;gt;&amp;gt; words = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten"]
    &amp;gt;&amp;gt;&amp;gt; query(words).order_by(len).then_by().take(5).select(str.upper).to_list()
    ['ONE', 'SIX', 'TEN', 'TWO', 'FIVE']
&lt;/code&gt;&lt;/pre&gt;

&lt;pstrong&gt;Brian #5:&lt;/strong&gt; &lt;strong&gt;Guido blogging again&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neopythonic.blogspot.com/2018/11/what-do-do-with-your-computer-science.html"&gt;What to do with your computer science career&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Answering “A question about whether to choose a 9-5 job or be an entrepreneur”
&lt;ul&gt;
&lt;li&gt;entrepreneurship isn’t for everyone&lt;/li&gt;
&lt;li&gt;working for someone else can be very rewarding &lt;/li&gt;
&lt;li&gt;shoot for “better than an entry-level web development job”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;And “A question about whether AI would make human software developers redundant (not about what I think of the field of AI as a career choice)”
&lt;ul&gt;
&lt;li&gt;AI is about automating tasks that can be boring&lt;/li&gt;
&lt;li&gt;Software Engineering is never boring.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6: &lt;a href="https://anvil.works/"&gt;Web apps in pure Python apps with Anvil&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Design with our visual designer&lt;/li&gt;
&lt;li&gt;Build with nothing but Python&lt;/li&gt;
&lt;li&gt;Publish Instant hosting in the cloud or on-site&lt;/li&gt;
&lt;li&gt;Paid product but has a free version&lt;/li&gt;
&lt;li&gt;Covered on &lt;a href="https://talkpython.fm/episodes/show/138/anvil-all-web-all-python"&gt;Talk Python 138&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Extras&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Second Printing (P2) of “&lt;a href="https://pragprog.com/book/bopytest/python-testing-with-pytest"&gt;Python Testing with pytest&lt;/a&gt;”&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#107 Restructuring and searching data, the Python way</title><link>https://pythonbytes.fm/episodes/show/107/restructuring-and-searching-data-the-python-way</link><guid>526aeec7-9950-43b6-8247-3bdcc99b4cef</guid><enclosure url="https://pythonbytes.fm/episodes/download/107/restructuring-and-searching-data-the-python-way.mp3" length="22010072" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 07 Dec 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Restructuring and searching data, the Python way</itunes:title><itunes:episode>107</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:22:50</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://glom.readthedocs.io/en/latest/index.html"&gt;&lt;strong&gt;glom: restructuring data, the Python way&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;glom is a new approach to working with data in Python, featuring:
&lt;ul&gt;
&lt;li&gt;Path-based access for nested structure
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data\['a'\]['b']['c']&lt;/code&gt; → &lt;code&gt;glom(data, 'a.b.c')&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Declarative data transformation using lightweight, Pythonic specifications
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;glom(target, spec, **kwargs)&lt;/code&gt; with options such as
&lt;ul&gt;
&lt;li&gt;a default value if value not found&lt;/li&gt;
&lt;li&gt;allowed exceptions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Readable, meaningful error messages:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PathAccessError: could not access 'c', part 2 of Path('a', 'b', 'c')&lt;/code&gt; is better than&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TypeError: 'NoneType' object is not subscriptable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Built-in data exploration and debugging features
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;glom.Inspect(``**a*``,&lt;/code&gt; &lt;code&gt;***kw*``)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;[**Inspect**](https://glom.readthedocs.io/en/latest/api.html#glom.Inspect)&lt;/code&gt; specifier type provides a way to get visibility into glom’s evaluation of a specification, enabling debugging of those tricky problems that may arise with unexpected data.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #2:&lt;/strong&gt; &lt;a href="http://docs.enthought.com/traitsui/"&gt;&lt;strong&gt;Scientific GUI apps with TraitsUI&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Franklin Ventura&lt;/li&gt;
&lt;li&gt;They support: PyQt, wxPython, PySide, PyQt5&lt;/li&gt;
&lt;li&gt;People should be aware of and when combined with &lt;a href="http://docs.enthought.com/chaco/user_manual/chaco_tutorial.html"&gt;Chaco&lt;/a&gt; (again from Enthought) the graphing and controlling capabilities really are amazing.&lt;/li&gt;
&lt;li&gt;Tutorial: &lt;a href="https://docs.enthought.com/traitsui/tutorials/traits_ui_scientific_app.html"&gt;Writing a graphical application for scientific programming using TraitsUI 6.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Really simple UI / API for mapping object(s) to GUIs and back.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://github.com/santinic/pampy"&gt;&lt;strong&gt;Pampy: The Pattern Matching for Python you always dreamed of&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Pampy is pretty small (150 lines), reasonably fast, and often makes your code more readable and hence easier to reason about.”&lt;/li&gt;
&lt;li&gt;uses &lt;code&gt;_&lt;/code&gt; as the missing info in a pattern&lt;/li&gt;
&lt;li&gt;&lt;p&gt;simple &lt;code&gt;match&lt;/code&gt; signature of &lt;code&gt;match(input, pattern, action)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Examples&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;nested lists and tuples&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    from pampy import match, _

    x = [1, [2, 3], 4]
    match(x, [1, [_, 3], _], lambda a, b: [1, [a, 3], b])           # =&amp;gt; [1, [2, 3], 4]
  - dicts:
    pet = { 'type': 'dog', 'details': { 'age': 3 } }
    match(pet, { 'details': { 'age': _ } }, lambda age: age)        # =&amp;gt; 3
    match(pet, { _ : { 'age': _ } },        lambda a, b: (a, b))    # =&amp;gt; ('details', 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pstrong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.sciencefocus.com/news/google-ai-better-than-doctors-at-detecting-breast-cancer/"&gt;&lt;strong&gt;Google AI better than doctors at detecting breast cancer&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google’s deep learning AI called LYNA able to correctly identify tumorous regions in lymph nodes 99 per cent of the time.&lt;/li&gt;
&lt;li&gt;We think of the impact of AI as killing 'low end' jobs [see &lt;a href="https://www.google.com/search?q=demotivator robot&amp;amp;client=firefox-b-1-ab&amp;amp;tbm=isch&amp;amp;source=iu&amp;amp;ictx=1&amp;amp;fir=HY_0DIJRLAdG1M%253A%252CTopRdw4TesZqKM%252C_&amp;amp;usg=AI4_-kRZ13zsoCnKopq53qUGwZV3ho31EA&amp;amp;sa=X&amp;amp;ved=2ahUKEwjmpeOb8_DeAhWUKH0KHcTwDaAQ9QEwAHoECAUQBA#imgrc=scl2Ob_gs0DKUM:"&gt;poster&lt;/a&gt;], but these are "doctor" level positions.&lt;/li&gt;
&lt;li&gt;The presence or absence of these ‘nodal metastases’ influence a patient’s prognosis and treatment plan, so accurate and fast detection is important.&lt;/li&gt;
&lt;li&gt;In a second trial, six pathologists completed a diagnostic test with and without LYNA’s assistance. With LYNA’s help, the doctors found it ‘easier’ to detect small metastases, and on average the task took half as long.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://adventofcode.com/2018/about"&gt;&lt;strong&gt;2018 Advent of Code&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another winter break activity people might enjoy is practicing with code challenges. AoC is a fun tradition.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like.&lt;/li&gt;
&lt;li&gt;don't need a computer science background to participate&lt;/li&gt;
&lt;li&gt;don’t need a fancy computer; every problem has a solution that completes in at most 15 seconds on ten-year-old hardware.&lt;/li&gt;
&lt;li&gt;There’s a leaderboard, so you can compete if you want. Or just have fun.&lt;/li&gt;
&lt;li&gt;Past years available, back to 2015.&lt;/li&gt;
&lt;li&gt;Some extra tools and info: &lt;a href="https://github.com/Bogdanp/awesome-advent-of-code"&gt;awesome-advent-of-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://www.reddit.com/r/Python/comments/9xms3u/red_hat_linux_80_beta_released_now_finally/"&gt;&lt;strong&gt;Red Hat Linux 8.0 Beta released, now (finally) updated to use Python 3.6 as default instead of 2.7&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all, my favorite comment was a correction to the title: legacy python *&lt;/li&gt;
&lt;li&gt;“&lt;strong&gt;Python 3.6 is the default Python implementation in RHEL 8&lt;/strong&gt;; limited support for Python 2.7 is provided. No version of Python is installed by default.“
&lt;ul&gt;
&lt;li&gt;Red Hat Enterprise Linux 8 is distributed with Python 3.6. The package is not installed by default. To install Python 3.6, use the yum install python3 command.&lt;/li&gt;
&lt;li&gt;Python 2.7 is available in the python2 package. However, &lt;strong&gt;Python 2 will have a shorter life cycle and its aim is to facilitate smoother transition to Python 3 for customers&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Neither the default python package nor the unversioned /usr/bin/python executable is distributed with RHEL 8. &lt;strong&gt;Customers are advised to use python3 or python2 directly.&lt;/strong&gt; Alternatively, administrators can configure the unversioned python command using the alternatives command. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python scripts must specify major version in hashbangs&lt;/strong&gt; at RPM build time
&lt;ul&gt;
&lt;li&gt;In RHEL 8, executable Python scripts are expected to use hashbangs (shebangs) specifying explicitly at least the major Python version. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Extras:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Michael: We were &lt;a href="https://art19.com/shows/techmeme-ride-home/episodes/eee1ffeb-c58e-468b-88b7-726f42c7a235"&gt;&lt;strong&gt;featured on TechMeme&lt;/strong&gt;&lt;/a&gt; Long Ride Home podcast. Check out their &lt;a href="https://art19.com/shows/techmeme-ride-home"&gt;&lt;strong&gt;podcast here&lt;/strong&gt;&lt;/a&gt;. Thank you to &lt;strong&gt;Brian McCullough&lt;/strong&gt;, the host of the show. I just learned about their show through this exchange but can easily see myself listening from time to time. It’s like Python Bytes, but for the wider tech world and less developer focused but still solid tech foundations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt; First story was about glom. I had heard of glom before, but got excited after interviewing Mahmoud for &lt;a href="https://testandcode.com/55"&gt;T&amp;amp;C 55&lt;/a&gt;, where we discussed the difficulty in testing if you use glom or DSLs in general. A twitter exchange and GH issue followed the episode, with Anthony Shaw. At one point, Ant shared this great joke from Brenan Kellar:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A QA engineer walks into a bar. Orders a beer. Orders 0 beers. Orders 99999999999 beers. Orders a lizard. Orders -1 beers. Orders a ueicbksjdhd. &lt;/p&gt;
  
  &lt;p&gt;First real customer walks in and asks where the bathroom is. The bar bursts into flames, killing everyone.&lt;/p&gt;
  
  &lt;p&gt;— Brenan Keller (@brenankeller) &lt;a href="https://twitter.com/brenankeller/status/1068615953989087232?ref_src=twsrc%5Etfw"&gt;November 30, 2018&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description></item><item><title>#108 Spilled data? Call the PyJanitor</title><link>https://pythonbytes.fm/episodes/show/108/spilled-data-call-the-pyjanitor</link><guid>5f10761e-4ed1-4ba8-a473-83fc1a2e8803</guid><enclosure url="https://pythonbytes.fm/episodes/download/108/spilled-data-call-the-pyjanitor.mp3" length="21063593" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Tue, 11 Dec 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Spilled data? Call the PyJanitor</itunes:title><itunes:episode>108</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:21:51</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://pyjanitor.readthedocs.io/"&gt;&lt;strong&gt;pyjanitor&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;- for cleaning data&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;originally a port of an R package called janitor, now much more.&lt;/li&gt;
&lt;li&gt;“pyjanitor’s etymology has a two-fold relationship to “cleanliness”. Firstly, it’s about extending Pandas with convenient data cleaning routines. Secondly, it’s about providing a cleaner, method-chaining, verb-based API for common pandas routines.”&lt;/li&gt;
&lt;li&gt;functionality:
&lt;ul&gt;
&lt;li&gt;Cleaning columns name (multi-indexes are possible!)&lt;/li&gt;
&lt;li&gt;Removing empty rows and columns&lt;/li&gt;
&lt;li&gt;Identifying duplicate entries&lt;/li&gt;
&lt;li&gt;Encoding columns as categorical&lt;/li&gt;
&lt;li&gt;Splitting your data into features and targets (for machine learning)&lt;/li&gt;
&lt;li&gt;Adding, removing, and renaming columns&lt;/li&gt;
&lt;li&gt;Coalesce multiple columns into a single column&lt;/li&gt;
&lt;li&gt;Convert excel date (serial format) into a Python datetime format&lt;/li&gt;
&lt;li&gt;Expand a single column that has delimited, categorical values into dummy-encoded variables&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;This &lt;code&gt;pandas&lt;/code&gt; code:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    df = pd.DataFrame(...)  # create a pandas DataFrame somehow.
    del df['column1']  # delete a column from the dataframe.
    df = df.dropna(subset=['column2', 'column3'])  # drop rows that have empty values in column 2 and 3.
    df = df.rename({'column2': 'unicorns', 'column3': 'dragons'})  # rename column2 and column3
    df['newcolumn'] = ['iterable', 'of', 'items']  # add a new column.
- looks like this with pyjanitor:
    df = (
        pd.DataFrame(...)
        .remove_columns(['column1'])
        .dropna(subset=['column2', 'column3'])
        .rename_column('column2', 'unicorns')
        .rename_column('column3', 'dragons')
        .add_column('newcolumn', ['iterable', 'of', 'items'])
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;pstrong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.youtube.com/watch?v=7lmCu8wz8ro"&gt;&lt;strong&gt;What Does It Take To Be An Expert At Python?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Presentation at PyData 2017 by James Powell&lt;/li&gt;
&lt;li&gt;Covers Python Data Model (dunder methods)&lt;/li&gt;
&lt;li&gt;Covers uses of Metaclasses&lt;/li&gt;
&lt;li&gt;All done very smoothly as a series of demos&lt;/li&gt;
&lt;li&gt;Pretty long and in depth, 1.5+ hours&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://github.com/mahmoud/awesome-python-applications"&gt;&lt;strong&gt;Awesome Python Applications&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pypi is a great place to find great packages you can use as examples for the packages you write. Where do you go for application examples? Well, now you can go to &lt;a href="https://github.com/mahmoud/awesome-python-applications"&gt;Awesome Python Applications&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;categories of applications included:
internet, audio, video, graphics, games, productivity, organization, communication, education, science, CMS, ERP (enterprise resource planning), static site generators, and a whole slew of developer related applications.&lt;/li&gt;
&lt;li&gt;Mahmoud is happy to have help filling this out, so if you know of a great open source application written in Python, go ahead and contribute to this, or open an issue on this project.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.b-list.org/weblog/2018/nov/20/core/"&gt;&lt;strong&gt;Django Core no more&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Write up by &lt;a href="https://twitter.com/ubernostrum"&gt;James Bennett&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you’re not the sort of person who closely follows the internals of Django’s development, you might not know there’s &lt;a href="https://github.com/django/deps/pull/47"&gt;a draft proposal&lt;/a&gt; to drastically change the project’s governance.&lt;/li&gt;
&lt;li&gt;What’s up: Django the open-source project is OK right now, but difficulty in recruiting and retaining enough active contributors.&lt;/li&gt;
&lt;li&gt;Some of the biggest open-source projects dodge this by having, effectively, corporate sponsorship of contributions.&lt;/li&gt;
&lt;li&gt;Django has become sort of a victim of its own success: the types of easy bugfixes and small features that often are the path to growing new committers have mostly been done already in Django.&lt;/li&gt;
&lt;li&gt;Not managed to bring in new committers at a sufficient rate to replace those who’ve become less active or even entirely inactive, and that’s not sustainable for much longer.&lt;/li&gt;
&lt;li&gt;Under-attracting women contributors too&lt;/li&gt;
&lt;li&gt;Governance:  Some parallels to what the Python core devs are experiencing now. Project leads BDFLs stepped down.&lt;/li&gt;
&lt;li&gt;The proposal: what I’ve proposed is the dissolution of “Django core”, and the revocation of almost all commit bits
&lt;ul&gt;
&lt;li&gt;Seems extreme but they were working much more as a team with PRs, etc anyway.&lt;/li&gt;
&lt;li&gt;Breaks down the barrier to needing to be on the core team to suggest, change anything.&lt;/li&gt;
&lt;li&gt;Two roles would be formalized — Mergers and Releasers — who would, respectively, merge pull requests into Django, and package/publish releases. But rather than being all-powerful decision-makers, these would be bureaucratic roles&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://github.com/wemake-services/wemake-django-template"&gt;&lt;strong&gt;wemake django template&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a cookie-cutter template for serious django projects with lots of fun goodies&lt;/li&gt;
&lt;li&gt;“This project is used to scaffold a &lt;code&gt;django&lt;/code&gt; project structure. Just like &lt;code&gt;django-admin.py startproject&lt;/code&gt; but better.”&lt;/li&gt;
&lt;li&gt;features:
&lt;ul&gt;
&lt;li&gt;Always &lt;code&gt;up-to-date&lt;/code&gt; with the help of &lt;code&gt;[@dependabot](https://dependabot.com/)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poetry&lt;/code&gt; for managing dependencies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mypy&lt;/code&gt; for optional static typing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pytest&lt;/code&gt; for unit testing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flake8&lt;/code&gt; and &lt;code&gt;wemake-python-styleguide&lt;/code&gt; for linting&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre-commit&lt;/code&gt; hooks for consistent development&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker&lt;/code&gt; for development, testing, and production&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sphinx&lt;/code&gt; for documentation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Gitlab CI&lt;/code&gt; with full &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, and &lt;code&gt;deploy&lt;/code&gt; pipeline configured by default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Caddy&lt;/code&gt; with &lt;code&gt;https&lt;/code&gt; and &lt;code&gt;http/2&lt;/code&gt; turned on by default&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6:&lt;/strong&gt;  &lt;a href="https://github.com/6IX7ine/djangohunter"&gt;&lt;strong&gt;Django Hunter&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tool designed to help identify incorrectly configured Django applications that are exposing sensitive information.&lt;/li&gt;
&lt;li&gt;Why? March 2018: 28,165 thousand django servers are exposed on the internet, many are showing secret API keys, database passwords, amazon AWS keys. &lt;/li&gt;
&lt;li&gt;Example: https://twitter.com/6IX7ine/status/978598496658960384&lt;/li&gt;
&lt;li&gt;Some complained this inferred Django was insecure and said it wasn’t. Others thought “There is a reasonable argument to be made that DEBUG should default to False.”&lt;/li&gt;
&lt;li&gt;One beginner, Peter, chimes in:
&lt;ul&gt;
&lt;li&gt;I probably have one of them, among my early projects that are on heroku and public GitHub repos. &lt;/li&gt;
&lt;li&gt;I did accidentally expose my aws password this way and all hell broke loose.&lt;/li&gt;
&lt;li&gt;The problem is that as a beginner, it wasn't obvious to me how to separate development and production settings and keep production stuff out of my public repository.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Extras&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Michael: Thanks for having me on your show Brian: &lt;a href="https://blog.michaelckennedy.net/2018/12/08/being-a-great-podcast-guest/"&gt;https://blog.michaelckennedy.net/2018/12/08/being-a-great-podcast-guest/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Brian: open source extra:
For Christmas, I want a dragon…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href="https://t.co/RmFAEgqpSr"&gt;pic.twitter.com/RmFAEgqpSr&lt;/a&gt;
  — Changelog (@changelog) &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Michael:  Why did the multithreaded chicken cross the road?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;road the side get to the other of to&lt;/li&gt;
&lt;li&gt;to get the side to road the of other&lt;/li&gt;
&lt;li&gt;the side of to the to road other get&lt;/li&gt;
&lt;li&gt;to of the road to side other the get&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#109 CPython byte code explorer</title><link>https://pythonbytes.fm/episodes/show/109/cpython-byte-code-explorer</link><guid>5014f9fe-9545-4bd9-925f-ecb4a4a559c6</guid><enclosure url="https://pythonbytes.fm/episodes/download/109/cpython-byte-code-explorer.mp3" length="20011941" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Tue, 18 Dec 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>CPython byte code explorer</itunes:title><itunes:episode>109</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:20:45</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://pabloariasal.github.io/2018/11/25/python-descriptors/"&gt;&lt;strong&gt;Python Descriptors Are Magical Creatures&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an excellent discussion of understanding &lt;code&gt;@property&lt;/code&gt; and Python’s descriptor protocol.&lt;/li&gt;
&lt;li&gt;discussion includes getter, setter, and deleter methods you can override.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.jetbrains.com/research/data-science-2018/"&gt;&lt;strong&gt;Data Science Survey 2018 JetBrains&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JetBrains polled over 1,600 people involved in Data Science and based in the US, Europe, Japan, and China, in order to gain insight into how this industry sector is evolving&lt;/li&gt;
&lt;li&gt;Key Takeaways
&lt;ul&gt;
&lt;li&gt;Most people assume that &lt;strong&gt;Python will remain the primary programming language in the field for the next 5 years&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Python is currently the &lt;strong&gt;most popular language among data scientists&lt;/strong&gt;.  &lt;/li&gt;
&lt;li&gt;Data Science &lt;strong&gt;professionals tend to use Keras and Tableau&lt;/strong&gt;, while amateur data scientists are more likely to prefer Microsoft Azure ML. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Most common activities among pros and amateurs: 
&lt;ul&gt;
&lt;li&gt;Data processing&lt;/li&gt;
&lt;li&gt;Data visualization&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Main programming language for data analysis
&lt;ul&gt;
&lt;li&gt;Python 57%&lt;/li&gt;
&lt;li&gt;R 15%&lt;/li&gt;
&lt;li&gt;Julia 0%&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;IDEs and Editors
&lt;ul&gt;
&lt;li&gt;Jupyter 43%&lt;/li&gt;
&lt;li&gt;PyCharm 38%&lt;/li&gt;
&lt;li&gt;RStudio 23%&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://github.com/bwasti/cache.py"&gt;&lt;strong&gt;cache.py&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cache.py&lt;/code&gt; is a one file python library that extends &lt;a href="https://en.wikipedia.org/wiki/Memoization"&gt;memoization&lt;/a&gt; across runs using a cache file.&lt;/li&gt;
&lt;li&gt;memoization is an incredibly useful technique that many self taught or on the job taught developers don’t know about, because it’s not obvious.&lt;/li&gt;
&lt;li&gt;example:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    import cache

    @cache.cache()
    def expensive_func(arg, kwarg=None):
      # Expensive stuff here
      return arg
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;@cache.cache()&lt;/code&gt; function can take multiple arguments.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@cache.cache(timeout=20)&lt;/code&gt; - Only caches the function for 20 seconds.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@cache.cache(fname="my_cache.pkl")&lt;/code&gt; - Saves cache to a custom filename (defaults to hidden file &lt;code&gt;.cache.pkl&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@cache.cache(key=cache.ARGS[KWARGS,NONE])&lt;/code&gt; - Check against args, kwargs or neither of them when doing a cache lookup.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.youtube.com/watch?v=Ksu5zZIdfH0"&gt;&lt;strong&gt;Setting up the data science tools&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;part of a larger video series&lt;/li&gt;
&lt;li&gt;set up. Tools to keras ultimately&lt;/li&gt;
&lt;li&gt;Tools
&lt;ul&gt;
&lt;li&gt;anaconda&lt;/li&gt;
&lt;li&gt;tensorflow&lt;/li&gt;
&lt;li&gt;Jupyter&lt;/li&gt;
&lt;li&gt;Keras&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;good for true beginners &lt;/li&gt;
&lt;li&gt;setup and activate a condo venv &lt;/li&gt;
&lt;li&gt;Start up a notebook and switch envs &lt;/li&gt;
&lt;li&gt;use conda, rather than pip&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://github.com/spotify/chartify"&gt;&lt;strong&gt;chartify&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Python library that makes it easy for data scientists to create charts.”&lt;/li&gt;
&lt;li&gt;from the docs:
&lt;ul&gt;
&lt;li&gt;Consistent input data format: Spend less time transforming data to get your charts to work. All plotting functions use a consistent tidy input data format.&lt;/li&gt;
&lt;li&gt;Smart default styles: Create pretty charts with very little customization required.&lt;/li&gt;
&lt;li&gt;Simple API: We've attempted to make to the API as intuitive and easy to learn as possible.&lt;/li&gt;
&lt;li&gt;Flexibility: Chartify is built on top of &lt;a href="http://bokeh.pydata.org/en/latest/"&gt;Bokeh&lt;/a&gt;, so if you do need more control you can always fall back on Bokeh's API.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://github.com/jtpio/jupyterlab-python-bytecode"&gt;&lt;strong&gt;CPython byte code explorer&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JupyterLab extension to inspect Python Bytecode&lt;/li&gt;
&lt;li&gt;via &lt;a href="https://twitter.com/HelmAnton/status/1043892163942199297"&gt;Anton Helm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;by Jeremy Tuloup&lt;/li&gt;
&lt;li&gt;You’ll see exactly what it’s about if you watch the GIF movie at the github repo.&lt;/li&gt;
&lt;li&gt;Can’t think of a better way to understand Python bytecode quickly than to play a little with this&lt;/li&gt;
&lt;li&gt;Comparing versions of CPython: If you have several versions of Python installed on your machine (let's say in different conda environments), you can use the extension to check how the bytecode might differ.&lt;/li&gt;
&lt;li&gt;Nice visualization of different performance aspects of while vs. for at the end&lt;/li&gt;
&lt;/ul&gt;

&lt;pxtras:&lt;/p&gt;

&lt;p&gt;Brian: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/funny/comments/a1vxu0/how_the_internet_is_made/"&gt;“How the Internet is made.”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#110 Python Year in Review 2018 Edition</title><link>https://pythonbytes.fm/episodes/show/110/python-year-in-review-2018-edition</link><guid>68271af3-38f5-41fe-8140-feac6dea2417</guid><enclosure url="https://pythonbytes.fm/episodes/download/110/python-year-in-review-2018-edition.mp3" length="31055562" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 26 Dec 2018 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Python Year in Review 2018 Edition</itunes:title><itunes:episode>110</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:56:54</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by DigitalOcean: &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This episode originally aired on Talk Python at &lt;a href="https://talkpython.fm/192"&gt;talkpython.fm/192&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's been a fantastic year for Python. Literally, every year is better than the last with so much growth and excitement in the Python space. That's why I've asked two of my knowledgeable Python friends, Dan Bader and Brian Okken, to help pick the top 10 stories from the Python community for 2018.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guests&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Brian Okken &lt;a href="https://twitter.com/brianokken"&gt;@brianokken&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dan Bader &lt;a href="https://twitter.com/dbader_org/"&gt;@dbader_org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;10: Python 3.7:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://realpython.com/python37-new-features/"&gt;Cool New Features in Python 3.7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;9: Changes in versioning patterns&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://0ver.org/"&gt;ZeroVer&lt;/a&gt;: 0-based Versioning&lt;/li&gt;
&lt;li&gt;&lt;a href="https://calver.org/"&gt;Calendar Versioning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semver.org/"&gt;Semantic Versioning&lt;/a&gt; 2.0.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;8: Python is becoming the world’s most popular coding language&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.economist.com/science-and-technology/2018/07/19/python-has-brought-computer-programming-to-a-vast-new-audience"&gt;Economist article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;7: 2018 was the year data science Pythonistas == web dev Pythonistas&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.jetbrains.com/research/python-developers-survey-2017/"&gt;Python Developers Survey Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://talkpython.fm/episodes/show/176/the-python-community-by-the-numbers"&gt;Covered in depth on Talk Python 176&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;6: Black&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/black/"&gt;Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Soundgarden : &lt;a href="https://www.youtube.com/watch?v=3mbBbFH9fAg"&gt;“Black Hole Sun”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;5: New PyPI launched!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/"&gt;Python Package Index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4: Rise of Python in the embedded world&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pythonbytes.fm/episodes/show/92/will-your-python-be-compiled"&gt;Covered at Python Bytes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3: Legacy Python's days are fading?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 2.7 -- &lt;a href="https://mail.python.org/pipermail/python-dev/2018-March/152348.html"&gt;bugfix or security before EOL&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pythonclock.org/"&gt;Python 2 death clock&lt;/a&gt;https://pythonclock.org/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2: It's the end of innocence for PyPi&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zdnet.com/article/twelve-malicious-python-libraries-found-and-removed-from-pypi/"&gt;Twelve malicious Python libraries found and removed from PyPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1: Guido stepped down as BDFL&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mail.python.org/pipermail/python-committers/2018-July/005664.html"&gt;python-committers: Transfer of power&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discuss.python.org/t/comparison-of-the-7-governance-peps/392"&gt;Proposals for new governance structure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#111 loguru: Python logging made simple</title><link>https://pythonbytes.fm/episodes/show/111/loguru-python-logging-made-simple</link><guid>cd106ff0-7833-4cd4-bd4e-450af7cf7796</guid><enclosure url="https://pythonbytes.fm/episodes/download/111/loguru-python-logging-made-simple.mp3" length="32974630" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Sat, 05 Jan 2019 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>loguru: Python logging made simple</itunes:title><itunes:episode>111</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:34:16</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by &lt;a href="https://pythonbytes.fm/datadog"&gt;https://pythonbytes.fm/datadog&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://github.com/Delgan/loguru"&gt;&lt;strong&gt;loguru:&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://github.com/Delgan/loguru"&gt;&lt;strong&gt;Python logging made (stupidly) simple&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finally, a logging interface that is just slightly more syntax than print to do mostly the right thing, and all that fancy stuff like log rotation is easy to figure out.&lt;/li&gt;
&lt;li&gt;i.e. a logging API that fits in my brain.&lt;/li&gt;
&lt;li&gt;bonus: README is a nice tour of features with examples.&lt;/li&gt;
&lt;li&gt;Features:
&lt;ul&gt;
&lt;li&gt;Ready to use out of the box without boilerplate&lt;/li&gt;
&lt;li&gt;No Handler, no Formatter, no Filter: one function to rule them all&lt;/li&gt;
&lt;li&gt;Easier file logging with rotation / retention / compression&lt;/li&gt;
&lt;li&gt;Modern string formatting using braces style&lt;/li&gt;
&lt;li&gt;Exceptions catching within threads or main&lt;/li&gt;
&lt;li&gt;Pretty logging with colors&lt;/li&gt;
&lt;li&gt;Asynchronous, Thread-safe, Multiprocess-safe&lt;/li&gt;
&lt;li&gt;Fully descriptive exceptions&lt;/li&gt;
&lt;li&gt;Structured logging as needed&lt;/li&gt;
&lt;li&gt;Lazy evaluation of expensive functions&lt;/li&gt;
&lt;li&gt;Customizable levels&lt;/li&gt;
&lt;li&gt;Better datetime handling&lt;/li&gt;
&lt;li&gt;Suitable for scripts and libraries&lt;/li&gt;
&lt;li&gt;Entirely compatible with standard logging&lt;/li&gt;
&lt;li&gt;Personalizable defaults through environment variables&lt;/li&gt;
&lt;li&gt;Convenient parser&lt;/li&gt;
&lt;li&gt;Exhaustive notifier&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://mail.python.org/pipermail/python-committers/2018-December/006479.html"&gt;&lt;strong&gt;Python gets a new governance model&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Brett Canon&lt;/li&gt;
&lt;li&gt;July 2018, Guido steps down&lt;/li&gt;
&lt;li&gt;Python progress has basically been on hold since then&lt;/li&gt;
&lt;li&gt;ended up with &lt;a href="https://www.python.org/dev/peps/pep-8000/"&gt;7 governance proposals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Voting was open to all core developers as we couldn't come up with a reasonable criteria that we all agreed to as to what defined an "active" core dev&lt;/li&gt;
&lt;li&gt;And the winner is ... In the end PEP 8016, the steering council proposal, won.&lt;/li&gt;
&lt;li&gt;it was a decisive win against second place&lt;/li&gt;
&lt;li&gt;PEP 8016 is heavily modeled on the Django project's organization (to the point that the PEP had stuff copy-and-pasted from the original Django governance proposal).
&lt;ul&gt;
&lt;li&gt;What it establishes is a steering council of five people who are to determine how to run the Python project. Short of not being able to influence how the council itself is elected (which includes how the electorate is selected), the council has absolute power.&lt;/li&gt;
&lt;li&gt;result of the vote prevents us from ever having the Python &lt;em&gt;project&lt;/em&gt; be leaderless again, it doesn't directly solve how to guide the &lt;em&gt;language's&lt;/em&gt; design.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;What's next? The next step is we elect the council. It's looking like nominations will be from Monday, January 07 to Sunday, January 20 and voting from Monday, January 21 to Sunday, February 03&lt;/li&gt;
&lt;li&gt;A key point I hope people understand is that while we solved the issue of project management that stemmed from Guido's retirement, the council will need to be given some time to solve the other issue of how to manage the design of Python itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"&gt;&lt;strong&gt;Why you should be using pathlib&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tour of pathlib from Trey Hunner&lt;/li&gt;
&lt;li&gt;pathlib combines most of the commonly used file and directory operations from &lt;code&gt;os&lt;/code&gt;, &lt;code&gt;os.path&lt;/code&gt;, and &lt;code&gt;glob&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;uses objects instead of strings&lt;/li&gt;
&lt;li&gt;as of Python 3.6, many parts of stdlib support pathlib&lt;/li&gt;
&lt;li&gt;since &lt;code&gt;pathlib.Path&lt;/code&gt; methods return &lt;code&gt;Path&lt;/code&gt; objects, chaining is possible&lt;/li&gt;
&lt;li&gt;convert back to strings if you really need to for pre-3.6 code&lt;/li&gt;
&lt;li&gt;Examples:
&lt;ul&gt;
&lt;li&gt;make a directory: &lt;code&gt;Path('src/__pypackages__').mkdir(parents=True, exist_ok=True)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;rename a file: &lt;code&gt;Path('.editorconfig').rename('src/.editorconfig')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;find some files: &lt;code&gt;top_level_csv_files = Path.cwd().glob('*.csv')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;recursively: &lt;code&gt;all_csv_files = Path.cwd().rglob('*.csv')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;read a file: &lt;code&gt;Path('some/file').read_text()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;write to a file: &lt;code&gt;Path('.editorconfig').write_text('# config goes here')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with open(path, mode) as x&lt;/code&gt; works with Path objects as of 3.6&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Follow up article by Trey: &lt;a href="https://treyhunner.com/2019/01/no-really-pathlib-is-great/"&gt;No really, pathlib is great&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://github.com/altair-viz/altair"&gt;&lt;strong&gt;Altair&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;a href="https://github.com/piccolbo/altair_recipes"&gt;&lt;strong&gt;Altair Recipes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Antonio Piccolboni (he wrote altair_recipes)&lt;/li&gt;
&lt;li&gt;Altair: Declarative statistical visualization library for Python
&lt;ul&gt;
&lt;li&gt;Altair is developed by Jake Vanderplas and Brian Granger&lt;/li&gt;
&lt;li&gt;By statistical visualization they mean:
&lt;ul&gt;
&lt;li&gt;The data source is a DataFrame that consists of columns of different data types (quantitative, ordinal, nominal and date/time).&lt;/li&gt;
&lt;li&gt;The DataFrame is in a tidy format where the rows correspond to samples and the columns correspond to the observed variables.&lt;/li&gt;
&lt;li&gt;The data is mapped to the visual properties (position, color, size, shape, faceting, etc.) using the group-by data transformation.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Nice example that I can get behind&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    # cars = some Pandas data frame
    alt.Chart(cars).mark_point().encode(
        x='Horsepower',
        y='Miles_per_Gallon',
        color='Origin',
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;altair_recipes
&lt;ul&gt;
&lt;li&gt;Altair allows generating a wide variety of statistical graphics in a concise language, but lacks, by design, pre-cooked and ready to eat statistical graphics, like the boxplot or the histogram. &lt;/li&gt;
&lt;li&gt;Examples: &lt;a href="https://altair-recipes.readthedocs.io/en/latest/examples.html"&gt;https://altair-recipes.readthedocs.io/en/latest/examples.html&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;They take a few lines only in altair, but I think they deserve to be one-liners. altair_recipes provides that level on top of altair. The idea is not to provide a multitude of creative plots with fantasy names (the way seaborn does) but a solid collection of classics that everyone understands and cover most major use cases: the scatter plot, the boxplot, the histogram etc.  &lt;/li&gt;
&lt;li&gt;Fully documented, highly consistent API (see next package), 90%+ test coverage, maintainability grade A, this is professional stuff if I may say so myself.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #5:&lt;/strong&gt; &lt;strong&gt;A couple fun pytest plugins&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/anapaulagomes/pytest-picked"&gt;pytest-picked&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;git status&lt;/code&gt;, this plugin allows you to:
&lt;ul&gt;
&lt;li&gt;Run only tests from modified test files&lt;/li&gt;
&lt;li&gt;Run tests from modified test files first, followed by all unmodified tests&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Kinda hard to overstate the usefulness of this plugin to anyone developing or debugging a test. Very, very cool.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/darrenburns/pytest-clarity"&gt;pytest-clarity&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Colorized left/right comparisons&lt;/li&gt;
&lt;li&gt;Early in development, but already helpful.&lt;/li&gt;
&lt;li&gt;I recommend running it with -qq if you don’t normally run with -v/--verbose since it overrides the verbosity currently.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://github.com/cakinney/secure.py"&gt;&lt;strong&gt;Secure 🔒 headers and cookies for Python web frameworks&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python package called Secure, which sets security headers and cookies (as a start) for Python web frameworks.&lt;/li&gt;
&lt;li&gt;I was listening to the Talk Python To Me episode “Flask goes 1.0” with Flask maintainer David Lord. At the end of the interview he was asked about notable PyPI packages and spoke about Flask-Talisman, a third-party package to set security headers in Flask. As a security professional, it was surprising and encouraging to hear the maintainer of the most popular Python web framework speak passionately about a security package. &lt;/li&gt;
&lt;li&gt;Had been recently experimenting with emerging Python web frameworks and realized there was a gap in security packages. That inspired Caleb to (humbly) see if it were possible to make a package to correct that and I started with Responder and then expanded to support more frameworks. &lt;/li&gt;
&lt;li&gt;The outcome was Secure with functions to support aiohttp, Bottle, CherryPy, Falcon, hug, Pyramid, Quart, Responder, Sanic, Starlette and Tornado (most of these, if not all have been featured on Talk Python) and can also be utilized by frameworks not officially supported. The goal is to be minimalistic, lightweight and be implemented in a way that does not disrupt an individual framework’s design. &lt;/li&gt;
&lt;li&gt;I have had some great feedback and suggestions from the developer and OWASP community, including some awesome discussions with the OWASP Secure Project and the Sanic core team. &lt;/li&gt;
&lt;li&gt;Added support for Flask and Django too.&lt;/li&gt;
&lt;li&gt;Secure Cookies is nice in the mix&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Extras:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael:&lt;/strong&gt; &lt;a href="https://www.zdnet.com/article/sqlite-bug-impacts-thousands-of-apps-including-all-chromium-based-browsers/"&gt;&lt;strong&gt;SQLite bug impacts thousands of apps, including all Chromium-based browsers&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See &lt;a href="https://twitter.com/mborus/status/1080874700924964864"&gt;https://twitter.com/mborus/status/1080874700924964864&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Since this bug is triggered by an SQL command, general CPython usage should not be affected, and long as you don’t run arbitrary SQL-commands provided by the outside.&lt;/li&gt;
&lt;li&gt;Seems to NOT be a problem in CPython: &lt;a href="https://twitter.com/mborus/status/1080883549308362753"&gt;https://twitter.com/mborus/status/1080883549308362753&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael: Follow up to our AI and healthcare conversation&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Bradley Hintze&lt;/li&gt;
&lt;li&gt;I found your discussion of deep learning in healthcare interesting, no doubt because that is my area. I am the data scientist for the National Oncology Program at the Veterans Health Administration. &lt;/li&gt;
&lt;li&gt;I work directly with clinicians and it is my strong opinion that AI cannot take the job from the MD. It will however make caring for patients much more efficient as AI takes care of the low hanging fruit, it you will.&lt;/li&gt;
&lt;li&gt;Healthcare, believe it or not, is a science and an art. This is why AI is never going to make doctors obsolete. It will, however, make doctors more efficient and demanded a more sophisticated doctor -- one that understands AI enough to not only trust it but, crucially, comprehend its limits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael: Upgrade to Python 3.7.2&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you install via home brew, it’s time for &lt;code&gt;brew update &amp;amp;&amp;amp; brew upgrade&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael: New course!&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://training.talkpython.fm/courses/explore_ansible/introduction-to-ansible-with-python"&gt;Introduction to Ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#112 Don't use the greater than sign in programming</title><link>https://pythonbytes.fm/episodes/show/112/don-t-use-the-greater-than-sign-in-programming</link><guid>0152d296-6715-4ddb-888e-4b01bf557950</guid><enclosure url="https://pythonbytes.fm/episodes/download/112/don-t-use-the-greater-than-sign-in-programming.mp3" length="27712454" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 11 Jan 2019 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Don't use the greater than sign in programming</itunes:title><itunes:episode>112</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:28:47</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by &lt;a href="https://pythonbytes.fm/datadog"&gt;https://pythonbytes.fm/datadog&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://github.com/jupyter/nbgrader"&gt;&lt;strong&gt;nbgrader&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jose.theoj.org/papers/10.21105/jose.00032"&gt;&lt;strong&gt;nbgrader: A Tool for Creating and Grading Assignments in the Jupyter Notebook&lt;/strong&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;The Journal of Open Source Education, paper accepted 6-Jan-2019&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nbgrader.readthedocs.io/en/stable/"&gt;nbgrader documentation, including a intro video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;From the JOSE article:
&lt;ul&gt;
&lt;li&gt;“nbgrader is a flexible tool for creating and grading assignments in the Jupyter Notebook (Kluyver et al., 2016). nbgrader allows instructors to create a single, master copy of an assignment, including tests and canonical solutions. From the master copy, a student version is generated without the solutions, thus obviating the need to maintain two separate versions. nbgrader also automatically grades submitted assignments by executing the notebooks and storing the results of the tests in a database. After auto-grading, instructors can manually grade free responses and provide partial credit using the formgrader Jupyter Notebook extension. Finally, instructors can use nbgrader to leave personalized feedback for each student’s submission, including comments as well as detailed error information.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CS teaching methods have come a long ways since I was turning in floppies and code printouts.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #2: &lt;a href="https://github.com/vzhou842/profanity-check"&gt;profanity-check&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A fast, robust Python library to check for offensive language in strings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;profanity-check&lt;/code&gt; uses a linear SVM model trained on 200k human-labeled samples of clean and profane text strings.&lt;/li&gt;
&lt;li&gt;Making &lt;code&gt;profanity-check&lt;/code&gt; both robust and extremely performant&lt;/li&gt;
&lt;li&gt;Other libraries like &lt;a href="https://github.com/rominf/profanity-filter"&gt;profanity-filter&lt;/a&gt; use more sophisticated methods that are much more accurate but at the cost of performance.
&lt;ul&gt;
&lt;li&gt;profanity-filter runs in 13,000ms vs 24ms for profanity-check in a benchmark&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Two ways to use:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;predict(text)&lt;/code&gt; → 0 or 1 (1 = bad)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;predict_prob(text)&lt;/code&gt; → [0, 1] confidence interval (1 = bad)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #3&lt;/strong&gt;: &lt;a href="https://hackernoon.com/pip-install-abra-cadabra-or-python-packages-for-beginners-33a989834975"&gt;&lt;strong&gt;An Introduction to Python Packages for Absolute Beginners&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ever tried to explain the difference between module and package? Between package-in-the-directory-with-init sense and package-you-can-distribute-and-install-with-pip sense? Here’s the article to read beforehand.&lt;/li&gt;
&lt;li&gt;Modules, packages, using packages, installing, importing, and more.&lt;/li&gt;
&lt;li&gt;And that’s not even getting into flit and poetry, etc. But it’s a good place to start for people new to Python.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #4: Python Dependencies  and IoC&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Joscha Götzer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open-closed principle&lt;/strong&gt; is at work with these and is super valuable to testing (one of the SOLID principles): &lt;em&gt;Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;There is a huge debate around why Python doesn’t need DI or Inversion of Control (IoC), and a quick stackoverflow search yields multiple results along the lines of “python is a scripting language and dynamic enough so that DI/IoC makes no sense”. However, especially in large projects it might reduce the cognitive load and decoupling of individual components&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ets-labs/python-dependency-injector"&gt;&lt;strong&gt;Dependency Injector&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt; I couldn’t get this one to work on windows, as it needs to compile some C libraries and some Visual Studio tooling was missing that I couldn’t really install properly. The library looks quite promising though, but sort of static with heavy usage of containers and not necessarily pythonic.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pythonhosted.org/injector/"&gt;&lt;strong&gt;Injector&lt;/strong&gt;&lt;/a&gt;: The library that above mentioned article talks about, a little Java-esque&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/google/pinject"&gt;&lt;strong&gt;pinject&lt;/strong&gt;&lt;/a&gt;: Has been unmaintained for about 5 years, and only recently got new attention from some open source people who try to port it to python3. A product under Google copyright, and looks quite nice despite the lack of python3 bindings. Probably the most feature-rich of the listed libraries.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ivankorobkov/python-inject"&gt;&lt;strong&gt;python-inject&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;:&lt;/strong&gt; I discovered that one while writing this email, not really sure if it’s any good. Nice use of type annotations and testing features&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/telefonicaid/di-py"&gt;&lt;strong&gt;di-py&lt;/strong&gt;&lt;/a&gt;: Only works up to python 3.4, so I’ve also never tried it (I’m one of those legacy python haters, I’m sure you can relate 😄).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/suned/serum"&gt;&lt;strong&gt;Serum&lt;/strong&gt;&lt;/a&gt;: This one is a little too explicit to my mind. It makes heavy use of context managers (literally with Context(...): everywhere 😉) and I’m not immediately sure how to work with it. In this way, it is quite powerful though. Interesting use of class decorators.&lt;/li&gt;
&lt;li&gt;And now on to my favorite and a repeated recommendation of mine around the internet→  &lt;a href="https://github.com/ekiro/haps"&gt;&lt;strong&gt;Haps&lt;/strong&gt;&lt;/a&gt;: This lesser-known, lightweight library is sort of the new kid on the block, and really simple to use. As some of the other libraries, it uses type annotations to determine the kind of object it is supposed to instantiate, and automatically discovers the required files in your project folder. Haps is very pythonic and fits into apps of any size, helping to ensure modularization as the only dependency of your modules will be one of the types provided by the library. &lt;a href="https://github.com/ekiro/haps/blob/master/samples/simple.py"&gt;Pretty good example here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://medium.com/@wbusaka/a-gentle-introduction-to-pandas-5ed17421a59d"&gt;&lt;strong&gt;A Gentle Introduction to Pandas&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Really a gentle introduction to the Pandas data structures &lt;code&gt;Series&lt;/code&gt; and &lt;code&gt;DataFrame&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Very gentle, with console examples.&lt;/li&gt;
&lt;li&gt;Create series objects:
&lt;ul&gt;
&lt;li&gt;from an array&lt;/li&gt;
&lt;li&gt;from an array, and change the indexing&lt;/li&gt;
&lt;li&gt;from a dictionaries&lt;/li&gt;
&lt;li&gt;from a scalar, cool. didn’t know you could do that&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Accessing elements in a series&lt;/li&gt;
&lt;li&gt;DataFrames
&lt;ul&gt;
&lt;li&gt;sorting, slicing&lt;/li&gt;
&lt;li&gt;selecting by label, position&lt;/li&gt;
&lt;li&gt;statistics on columns&lt;/li&gt;
&lt;li&gt;importing and exporting data&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6:&lt;/strong&gt; &lt;a href="http://llewellynfalco.blogspot.com/2016/02/dont-use-greater-than-sign-in.html"&gt;&lt;strong&gt;Don't use the greater than sign in programming&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One simple thing that comes up time and time again is the use of the greater than sign as part of a conditional while programming. Removing it cleans up code.&lt;/li&gt;
&lt;li&gt;Let's say that I want to check that something is between 5 and 10. &lt;/li&gt;
&lt;li&gt;There are many ways I can do this&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    x &amp;gt; 5 and 10 &amp;gt; x
    5 &amp;lt; x and 10 &amp;gt; x
    x &amp;gt; 5 and x &amp;lt; 10
    10 &amp;lt; x and x &amp;lt; 5
    x &amp;lt; 10 and x &amp;gt; 5
    x &amp;lt; 10 and 5 &amp;lt; x
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Sorry, one of those is incorrect. Go ahead and find out which one&lt;/li&gt;
&lt;li&gt;If you remove the use of the greater than sign then only 2 options remain
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x &amp;lt; 10 and 5 &amp;lt; x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;5 &amp;lt; x and x &amp;lt; 10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The last is nice because x is &lt;strong&gt;literally between&lt;/strong&gt; 5 and 10&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;There is also a nice way of expressing that &lt;em&gt;"x is outside the limits of 5 and 10”&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x &amp;lt; 5 or 10 &amp;lt; x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Again, this expresses it nicely because x is &lt;strong&gt;literally outside&lt;/strong&gt; of 5 to 10.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Interesting comment: What is cleaner or easier to read comes down to personal taste. But how to express "all numbers greater than 1" without '&gt;'? 
&lt;ul&gt;
&lt;li&gt;ans:  &lt;code&gt;1 &amp;lt; allNumbers&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Extras&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Michael&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.teachingpython.fm/"&gt;Teaching Python podcast&lt;/a&gt; by Kelly Paredes &amp;amp; Sean Tibor&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.github.com/changelog/2019-01-08-pricing-changes/"&gt;Github private repos (now free)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ep2019.europython.eu/"&gt;EuroPython 2019 announced&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.allthingsdistributed.com/2018/10/an-aws-region-is-coming-to-south-africa.html"&gt;South African AWS Data Center coming&lt;/a&gt; (via William H.)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jakevdp/status/1080583192803823616"&gt;Pandas is dropping legacy Python support&lt;/a&gt; any day now&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Joke&lt;/strong&gt;: &lt;a href="https://twitter.com/Spirix3/status/1080205170183716865"&gt;Harry Potter Parser Tongue&lt;/a&gt; via Nick Spirit&lt;/p&gt;</description></item><item><title>#113 Python Lands on the Windows 10 App Store</title><link>https://pythonbytes.fm/episodes/show/113/python-lands-on-the-windows-10-app-store</link><guid>0b65b5d9-f520-4328-bab4-f90cfaf64bba</guid><enclosure url="https://pythonbytes.fm/episodes/download/113/python-lands-on-the-windows-10-app-store.mp3" length="22522915" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 18 Jan 2019 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Python Lands on the Windows 10 App Store</itunes:title><itunes:episode>113</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:23:22</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by &lt;a href="https://pythonbytes.fm/datadog"&gt;https://pythonbytes.fm/digitalocean&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://www.michaelfogleman.com/aoc18/"&gt;&lt;strong&gt;Advent of Code 2018 Solutions&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Michael Fogleman&lt;/li&gt;
&lt;li&gt;Even if you didn’t have time or energy to do the 2018 AoC, you can learn from other peoples solutions. Here’s one set written up in a nice blog post.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://www.thurrott.com/windows/windows-10/196830/python-lands-on-the-windows-10-app-store#"&gt;&lt;strong&gt;Python Lands on the Windows 10 App Store&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python Software Foundation recently released Python 3.7 as an app on the official Windows 10 app store. &lt;/li&gt;
&lt;li&gt;Python 3.7 is now available to install from the Microsoft Store, meaning you no longer need to manually download and install the app from the official Python website.&lt;/li&gt;
&lt;li&gt;there is one limitation. “Because of restrictions on Microsoft Store apps, Python scripts may not have full write access to shared locations such as TEMP and the registry. &lt;/li&gt;
&lt;li&gt;Discussed with Steve Dower over on &lt;a href="https://talkpython.fm/episodes/show/191/python-s-journey-at-microsoft"&gt;Talk Python 191&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://blog.florimondmanca.com/how-i-built-a-web-framework-and-became-an-open-source-maintainer"&gt;&lt;strong&gt;How I Built A Python Web Framework And Became An Open Source Maintainer&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Florimond Manca&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bocadilloproject.github.io/"&gt;Bocadillo&lt;/a&gt; - “A modern Python web framework filled with asynchronous salsa”&lt;/li&gt;
&lt;li&gt;”&lt;strong&gt;maintaining an open source project is a marathon, not a sprint&lt;/strong&gt;.”&lt;/li&gt;
&lt;li&gt;Tips at the end of the article include tips for the following topics, including recommendations and tool choices:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Project definition&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Marketing &amp;amp; Communication&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project management&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code quality&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Versioning and releasing&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #4: Python maintainability score via&lt;/strong&gt; &lt;a href="https://github.com/tonybaloney/wily"&gt;&lt;strong&gt;Wily&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Anthony Shaw&lt;/li&gt;
&lt;li&gt;A Python application for tracking, reporting on timing and complexity in tests&lt;/li&gt;
&lt;li&gt;Easiest way to calculate it is with wily &lt;a href="https://github.com/tonybaloney/wily"&gt;https://github.com/tonybaloney/wily&lt;/a&gt; … the metrics are ‘maintainability.mi’ and ‘maintainability.rank’ for a numeric and the A-F scale.
&lt;ul&gt;
&lt;li&gt;Build an index: wily build src&lt;/li&gt;
&lt;li&gt;Inspect report: wily report file&lt;/li&gt;
&lt;li&gt;Graph: wily graph file metric&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #5:&lt;/strong&gt; &lt;strong&gt;A couple fun awesome lists&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/guardrailsio/awesome-python-security"&gt;Awesome Python Security resources&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Tools
&lt;ul&gt;
&lt;li&gt;web framework hardening, ex: secure.py&lt;/li&gt;
&lt;li&gt;multi tools&lt;/li&gt;
&lt;li&gt;static code analysis, ex: bandit&lt;/li&gt;
&lt;li&gt;vulnerabilities and security advisories&lt;/li&gt;
&lt;li&gt;cryptography&lt;/li&gt;
&lt;li&gt;app templates&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Education
&lt;ul&gt;
&lt;li&gt;lots of resources for learning&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Companies&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/DmytroLitvinov/awesome-flake8-extensions"&gt;Awesome Flake8 Extensions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;clean code&lt;/li&gt;
&lt;li&gt;testing, including 
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vikingco/flake8-pytest"&gt;flake8-pytest&lt;/a&gt; - Enforces to use &lt;code&gt;pytest&lt;/code&gt;-style assertions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aleGpereira/flake8-mock"&gt;flake8-mock&lt;/a&gt; - Provides checking mock non-existent methods&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;li&gt;documentation&lt;/li&gt;
&lt;li&gt;enhancements&lt;/li&gt;
&lt;li&gt;copyrights&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://brmmm3.github.io/posts/2019/01/08/fastlogging/"&gt;&lt;strong&gt;fastlogging&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Robert Young&lt;/li&gt;
&lt;li&gt;A faster replacement of the standard logging module with a mostly compatible API.&lt;/li&gt;
&lt;li&gt;For a single log file it is ~5x faster and for rotating log file ~13x faster.&lt;/li&gt;
&lt;li&gt;It comes with the following features:
&lt;ul&gt;
&lt;li&gt;(colored, if &lt;code&gt;colorama&lt;/code&gt; is installed) logging to console&lt;/li&gt;
&lt;li&gt;logging to file (maximum file size with rotating/history feature can be configured)&lt;/li&gt;
&lt;li&gt;old log files can be compressed (the compression algorithm can be configured)&lt;/li&gt;
&lt;li&gt;count same successive messages within a 30s time frame and log only once the message with the counted value.&lt;/li&gt;
&lt;li&gt;log domains&lt;/li&gt;
&lt;li&gt;log to different files&lt;/li&gt;
&lt;li&gt;writing to log files is done in (per file) background threads, if configured&lt;/li&gt;
&lt;li&gt;configure callback function for custom detection of same successive log messages&lt;/li&gt;
&lt;li&gt;configure callback function for custom message formatter&lt;/li&gt;
&lt;li&gt;configure callback function for custom log writer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pxtras:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Michael: &lt;a href="https://www.wintellect.com/webinar/master-pythons-async-features-with-async-and-await/"&gt;My webcast on async&lt;/a&gt;, Jan 24, 11am PT&lt;/li&gt;
&lt;li&gt;Michael: &lt;a href="https://twitter.com/anthonypjshaw/status/1081297735968378880"&gt;Watch your YAML&lt;/a&gt;! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Joke: &lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import antigravity&lt;/code&gt;&lt;/p&gt;</description></item><item><title>#114 What should be in the Python standard library?</title><link>https://pythonbytes.fm/episodes/show/114/what-should-be-in-the-python-standard-library</link><guid>8247bcbe-730a-4698-903e-7d94faca683b</guid><enclosure url="https://pythonbytes.fm/episodes/download/114/what-should-be-in-the-python-standard-library.mp3" length="27498960" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Sat, 26 Jan 2019 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>What should be in the Python standard library?</itunes:title><itunes:episode>114</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:28:33</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by &lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://lwn.net/Articles/776239/"&gt;&lt;strong&gt;What should be in the Python standard library?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on lwn.net by Jake Edge&lt;/li&gt;
&lt;li&gt;There was a discussion recently about what should be in the standard library, triggered by a request to add LZ4 compression.&lt;/li&gt;
&lt;li&gt;Kinda hard to summarize but we’ll try:
&lt;ul&gt;
&lt;li&gt;Jonathan Underwood proposed adding LZ4 compression to stdlib.&lt;/li&gt;
&lt;li&gt;Can of worms opened&lt;/li&gt;
&lt;li&gt;zlib and bz2 already in stdlib&lt;/li&gt;
&lt;li&gt;Brett proposed making something similar to hashlib for compression algorithms.&lt;/li&gt;
&lt;li&gt;Against adding it:
&lt;ul&gt;
&lt;li&gt;lz4 not needed for stdlib, and actually, bz2 isn’t either, but it’s kinda late to remove.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PyPI is easy enough. put stuff there.&lt;/li&gt;
&lt;li&gt;Led to a discussion of the role of stdlib.
&lt;ul&gt;
&lt;li&gt;If it’s batteries included, shouldn’t we add new batteries&lt;/li&gt;
&lt;li&gt;Some people don’t have access to PyPI easily&lt;/li&gt;
&lt;li&gt;Do we never remove elements? really?&lt;/li&gt;
&lt;li&gt;Maybe we should have a lean stdlib and a thicker standard distribution of selected packages
&lt;ul&gt;
&lt;li&gt;who would decide?&lt;/li&gt;
&lt;li&gt;same problem exists then of depending on it. How to remove stuff?&lt;/li&gt;
&lt;li&gt;Steve Dower &lt;a href="https://lwn.net/ml/python-dev/34544e1d-fc87-32ab-7b4c-40cb1e59c228@python.org/"&gt;would rather see&lt;/a&gt; a smaller standard library with some kind of "standard distribution" of PyPI modules that is curated by the core developers.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A leaner stdlib could speed up Python version schedules and reduce burden on core devs to maintain seldom used packages.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;See? can of worms.&lt;/li&gt;
&lt;li&gt;In any case, all this would require a PEP, so we have to wait until we have a PEP process decided on.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://data.home-assistant.io/"&gt;&lt;strong&gt;Data Science portal for Home Assistant launched&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Paul Cutler&lt;/li&gt;
&lt;li&gt;Home Assistant is launching a data science portal to teach you how you can learn from your own smart home data. &lt;/li&gt;
&lt;li&gt;In 15 minutes you setup a local data science environment running reports.&lt;/li&gt;
&lt;li&gt;A core principle of Home Assistant is that a user has complete ownership of their personal data. A users data lives locally, typically on the SD card in their Raspberry Pi&lt;/li&gt;
&lt;li&gt;The Home Assistant Data Science website is your one-stop-shop for advice on getting started doing data science with your Home Assistant data.&lt;/li&gt;
&lt;li&gt;To accompany the website, we have created a brand new Hass.io Add-on &lt;a href="https://github.com/hassio-addons/addon-jupyterlab-lite"&gt;JupyterLab lite&lt;/a&gt;, which allows you to run a data science IDE called &lt;a href="https://jupyterlab.readthedocs.io/en/stable/"&gt;JupyterLab&lt;/a&gt; directly on your Raspberry Pi hosting Home Assistant. You do your data analysis locally, your data never leaves your local machine. &lt;/li&gt;
&lt;li&gt;When you build something cool, you can share the notebook without the results, so people can run it at their homes too.&lt;/li&gt;
&lt;li&gt;We have also created a Python library called the &lt;a href="https://github.com/robmarkcole/HASS-data-detective"&gt;HASS-Data-Detective&lt;/a&gt; which makes it super easy to get started investigating your Home Assistant data using modern data science tools such as &lt;a href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Check out the &lt;a href="https://github.com/home-assistant/home-assistant-notebooks/blob/master/~%20GETTING%20STARTED.ipynb"&gt;Getting Started notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IoT aside: I finally found my first IoT project: Recording in progress button.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://www.dataschool.io/future-of-pandas/"&gt;&lt;strong&gt;What's the future of the pandas library?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kevin Markham over at dataschool.io&lt;/li&gt;
&lt;li&gt;pandas is gearing up to move towards a 1.0 release. Currently rc-ing 0.24&lt;/li&gt;
&lt;li&gt;Plans are to get there “early 2019”.&lt;/li&gt;
&lt;li&gt;Some highlights
&lt;ul&gt;
&lt;li&gt;method chaining - encouraged by core team
&lt;ul&gt;
&lt;li&gt;to encourage further, more methods will support chaining&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Apache arrow likely to be part of pandas backend sometime after 1.0&lt;/li&gt;
&lt;li&gt;Extension arrays - allow you to create custom data types&lt;/li&gt;
&lt;li&gt;deprications
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inplace&lt;/code&gt; parameter. It doesn’t work with chaining, doesn’t actually prevent copies, and causes codebase complexity&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ix&lt;/code&gt; accessor, use &lt;code&gt;loc&lt;/code&gt; and &lt;code&gt;iloc&lt;/code&gt; instead&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Panel&lt;/code&gt; data structure. Use &lt;code&gt;MultiIndex&lt;/code&gt; instead&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SparseDataFrame&lt;/code&gt;. Just use a normal &lt;code&gt;DataFrame&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;legacy python support&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://github.com/indygreg/PyOxidizer"&gt;&lt;strong&gt;PyOxidizer&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PyOxidizer&lt;/code&gt; is a collection of Rust crates that facilitate building libraries and binaries containing Python interpreters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PyOxidizer&lt;/code&gt; is capable of producing a single file executable - with all dependencies statically linked and all resources (like &lt;code&gt;.pyc&lt;/code&gt; files) embedded in the executable&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Oxidizer&lt;/em&gt; part of the name comes from Rust: executables produced by &lt;code&gt;PyOxidizer&lt;/code&gt; are compiled from Rust and Rust code is responsible for managing the embedded Python interpreter and all its operations.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PyOxidizer&lt;/code&gt; is similar in nature to &lt;a href="http://www.pyinstaller.org/"&gt;PyInstaller&lt;/a&gt;, &lt;a href="https://shiv.readthedocs.io/en/latest/"&gt;Shiv&lt;/a&gt;, and other tools in this space. What generally sets &lt;code&gt;PyOxidizer&lt;/code&gt; apart is 
&lt;ul&gt;
&lt;li&gt;Produced executables contain an embedded, statically-linked Python interpreter&lt;/li&gt;
&lt;li&gt;have no additional run-time dependency on the target system&lt;/li&gt;
&lt;li&gt;runs everything from memory (as opposed to e.g. extracting Python modules to a temporary directory and loading them from there).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://realpython.com/working-with-files-in-python/"&gt;&lt;strong&gt;Working With Files in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Vuyisile Ndlovu on RealPython&lt;/li&gt;
&lt;li&gt;Very comprehensive write up on working with files and directories&lt;/li&gt;
&lt;li&gt;Includes legacy and modern methods. 
&lt;ul&gt;
&lt;li&gt;Pay attention to pathlib parts if you are using 3.4 plus&lt;/li&gt;
&lt;li&gt;Also great for “if you used to do x, here’s how to do it with pathlib”.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Included:
&lt;ul&gt;
&lt;li&gt;Directory listings&lt;/li&gt;
&lt;li&gt;getting file attributes&lt;/li&gt;
&lt;li&gt;creating directories&lt;/li&gt;
&lt;li&gt;file name pattern matching&lt;/li&gt;
&lt;li&gt;traversing directories doing stuff with the files in there&lt;/li&gt;
&lt;li&gt;creating temp directories and files&lt;/li&gt;
&lt;li&gt;deleting, copying, moving, renaming&lt;/li&gt;
&lt;li&gt;archiving with zip and tar including reading those&lt;/li&gt;
&lt;li&gt;looping over files&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://github.com/python/peps/pull/630"&gt;&lt;strong&gt;$ python == $ python3?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via &lt;a href="https://twitter.com/davidfurphy"&gt;David Furphy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discourse.brew.sh/t/python-and-pep-394/1813"&gt;Homebrew tried&lt;/a&gt; this recently &amp;amp; got "persuaded" to reverse. &lt;/li&gt;
&lt;li&gt;Also in recent discussion of edits to &lt;a href="https://github.com/python/peps/pull/630#issuecomment-384416159"&gt;PEP394&lt;/a&gt;, &lt;a href="https://github.com/python/peps/pull/630#issuecomment-384416159"&gt;GvR said&lt;/a&gt; absolutely not now, probably not ever.&lt;/li&gt;
&lt;li&gt;Guido van Rossum
&lt;ul&gt;
&lt;li&gt;RE: &lt;code&gt;python&lt;/code&gt; doesn’t exist on macOS as a command: Did you mean python2 there? In my experience macOS comes with python installed (and invoking Python 2) but no python2 link (hard or soft). In any case I'm not sure how this strengthens your argument.&lt;/li&gt;
&lt;li&gt;I'm also still unhappy with any kind of endorsement of python pointing to python3. When a user gets bitten by this they should receive an apology from whoever changed that link, not a haughty "the PEP endorses this".&lt;/li&gt;
&lt;li&gt;Regardless of what macOS does I think I would be happier in a future where python doesn't exist and one always has to specify python2 or python3. Quite possibly there will be an age where Python 2, 3 and 4 all overlap, and EIBTI.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Extras:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Michael: &lt;a href="https://twitter.com/anthonypjshaw/status/1086070538810810368"&gt;A letter to the Python community in Africa&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Anthony Shaw&lt;/li&gt;
&lt;li&gt;Believe the broader international Python and Software community can learn a lot from what so many amazing people are doing across Africa.&lt;/li&gt;
&lt;li&gt;e.g. The attendance of PyCon NA was 50% male and 50% female.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Joke:&lt;/strong&gt;
via Luke Russell:
A: “Knock Knock”
B: “Who’s There"
A: ……………………………………………………………………………………….“Java”&lt;/p&gt;

&lt;p&gt;Also: Java 4EVER video is amazing: &lt;a href="https://www.youtube.com/watch?v=kLO1djacsfg"&gt;youtube.com/watch?v=kLO1djacsfg&lt;/a&gt;&lt;/p&gt;</description></item><item><title>#115 Dataclass CSV reader and Nina drops by</title><link>https://pythonbytes.fm/episodes/show/115/dataclass-csv-reader-and-nina-drops-by</link><guid>3899809d-49f6-47db-b2b3-05def30a6882</guid><enclosure url="https://pythonbytes.fm/episodes/download/115/dataclass-csv-reader-and-nina-drops-by.mp3" length="27892728" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Sat, 02 Feb 2019 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Dataclass CSV reader and Nina drops by</itunes:title><itunes:episode>115</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:28:58</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by &lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.fm/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Special guest: &lt;a href="https://twitter.com/nnja"&gt;Nina Z&lt;/a&gt;&lt;a href="https://twitter.com/nnja"&gt;akharenko&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://great-expectations.readthedocs.io/en/latest/"&gt;&lt;strong&gt;Great Expectations&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A set of tools intended for batch time testing of data pipeline data.&lt;/li&gt;
&lt;li&gt;Introduction to the problem doc: &lt;a href="https://medium.com/@expectgreatdata/down-with-pipeline-debt-introducing-great-expectations-862ddc46782a"&gt;Down with Pipeline debt / Introducing Great Expectations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expect_[something]()&lt;/code&gt; methods that return json formatted descriptions of whether or not the passed in data matches your expectations.&lt;/li&gt;
&lt;li&gt;Can be used programmatically or interactively in a notebook. (&lt;a href="https://www.youtube.com/watch?v=-_0tG7ACNU4"&gt;video demo&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;For programmatic use, I’m assuming you have to put code in place to stop a pipeline stage if expectations aren’t met, and write failing json result to a log or something.&lt;/li&gt;
&lt;li&gt;Examples, just a few, full list is big:
&lt;ul&gt;
&lt;li&gt;Table shape: 
&lt;ul&gt;
&lt;li&gt;expect_column_to_exist, expect_table_row_count_to_equal&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Missing values, unique values, and types: 
    - expect_column_values_to_be_unique, expect_column_values_to_not_be_null
&lt;ul&gt;
&lt;li&gt;Sets and ranges
&lt;ul&gt;
&lt;li&gt;expect_column_values_to_be_in_set&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;String matching
&lt;ul&gt;
&lt;li&gt;expect_column_values_to_match_regex&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Datetime and JSON parsing&lt;/li&gt;
&lt;li&gt;Aggregate functions
&lt;ul&gt;
&lt;li&gt;expect_column_stdev_to_be_between&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Column pairs&lt;/li&gt;
&lt;li&gt;Distributional functions
&lt;ul&gt;
&lt;li&gt;expect_column_chisquare_test_p_value_to_be_greater_than&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Nina #2:&lt;/strong&gt; &lt;strong&gt;Using CircuitPython and MicroPython to write Python for wearable electronics and embedded platforms&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I’ve been playing with electronics projects as a hobby for the past two years, and a few months ago turned my attention to Python on microcontrollers&lt;/li&gt;
&lt;li&gt;&lt;a href="http://micropython.org/"&gt;MicroPython&lt;/a&gt; is a lean and efficient implementation of Python3 that can run on microcontrollers with just 256k of code space, and 16k of RAM. &lt;a href="https://learn.adafruit.com/welcome-to-circuitpython/what-is-circuitpython"&gt;CircuitPython&lt;/a&gt; is a port of MicroPython, optimized for Adafruit devices. &lt;/li&gt;
&lt;li&gt;Some of the devices that run Python are as &lt;a href="https://www.adafruit.com/product/3500"&gt;small as a quarter&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;My favorite Python hardware platform for beginners is &lt;a href="https://www.adafruit.com/product/3333"&gt;Adafruit’s Circuit PlayGround Express&lt;/a&gt;. It has everything you need to get started with programming hardware without soldering. All you’ll need is alligator clips for the conductive pads.
&lt;ul&gt;
&lt;li&gt;The board features NeoPixel LEDs, buttons, switches, temperature, motion, and sound sensors, a tiny speaker, and lots more. You can even use it to control servos, tiny motor arms.&lt;/li&gt;
&lt;li&gt;Best of all, it only costs $25.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If you want to program the Circuit PlayGround Express with a drag-n-drop style scratch-like interface, you can use &lt;a href="https://makecode.adafruit.com/"&gt;Microsoft’s MakeCode&lt;/a&gt;. It’s perfect for kids and you’ll find lots of examples on their site.&lt;/li&gt;
&lt;li&gt;Best of all, there are tons of &lt;a href="https://learn.adafruit.com/category/circuitpython"&gt;guides for Python projects&lt;/a&gt; to build on their website, from making your own synthesizers, to jewelry, to silly little robots. &lt;/li&gt;
&lt;li&gt;Check out the &lt;a href="https://github.com/nnja/pyearrings"&gt;repo&lt;/a&gt; for my Python-powered earrings, see a &lt;a href="https://twitter.com/nnja/status/1074771014838448128"&gt;photo&lt;/a&gt;, or a &lt;a href="https://twitter.com/nnja/status/1054728692067393536"&gt;demo&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;Sign up for the Adafruit Python for Microcontrollers mailing list &lt;a href="https://www.adafruitdaily.com/"&gt;here&lt;/a&gt;, or see the archives &lt;a href="https://www.adafruitdaily.com/category/circuitpython/"&gt;here&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #3&lt;/strong&gt;: &lt;a href="https://github.com/dfurtado/dataclass-csv"&gt;&lt;strong&gt;Data class CSV reader&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Map CSV to Data Classes &lt;/li&gt;
&lt;li&gt;You probably know about reading CSV files
&lt;ul&gt;
&lt;li&gt;Maybe as tuples&lt;/li&gt;
&lt;li&gt;Better with csv.DictReader&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;This library is similar but maps Python 3.7’s data classes to rows of CSV files&lt;/li&gt;
&lt;li&gt;Includes type conversions (say string to int)&lt;/li&gt;
&lt;li&gt;Automatic type conversion. &lt;code&gt;DataclassReader&lt;/code&gt; supports &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;complex&lt;/code&gt; and &lt;code&gt;datetime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DataclassReader&lt;/code&gt; use the type annotation to perform validation of the data of the CSV file.&lt;/li&gt;
&lt;li&gt;Helps you troubleshoot issues with the data in the CSV file. &lt;code&gt;DataclassReader&lt;/code&gt; will show exactly in which line of the CSV file contain errors.&lt;/li&gt;
&lt;li&gt;Extract only the data you need. It will only parse the properties defined in the &lt;code&gt;dataclass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It uses &lt;code&gt;dataclass&lt;/code&gt; features that let you define metadata properties so the data can be parsed exactly the way you want.&lt;/li&gt;
&lt;li&gt;Make the code cleaner. No more extra loops to convert data to the correct type, perform validation, set default values, the &lt;code&gt;DataclassReader&lt;/code&gt; will do all this for you&lt;/li&gt;
&lt;li&gt;Default fallback values, more.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #4:&lt;/strong&gt; &lt;a href="https://dan.yeaw.me/posts/python-packaging-with-poetry-and-briefcase/"&gt;&lt;strong&gt;How to Rock Python Packaging with Poetry and Briefcase&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starts with a discussion of the packaging (for those readers that don’t listen to Python Bytes, I guess.) However, it also puts flit, pipenv, and poetry in context with each other, which is nice.&lt;/li&gt;
&lt;li&gt;Runs through a tutorial of how to build a pyproject.toml based project using poetry and briefcase.&lt;/li&gt;
&lt;li&gt;We’ve talked about Poetry before, on &lt;a href="https://pythonbytes.fm/100"&gt;episode 100&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;pyproject.toml is discussed extensively on &lt;a href="https://testandcode.com/52"&gt;Test &amp;amp; Code 52&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pybee/briefcase"&gt;briefcase&lt;/a&gt; is new, though, it’s a project for creating standalone native applications for Mac, Windows, Linux, iOS, Android, and more.&lt;/li&gt;
&lt;li&gt;The tutorial also discusses using poetry directly to publish to the test-pypi server. This is a nice touch. Use the test-pypi before pushing to the real pypi. Very cool.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Nina #5:&lt;/strong&gt; &lt;a href="https://github.com/guardrailsio/awesome-python-security"&gt;&lt;strong&gt;awesome-python-security&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;&lt;em&gt;*🕶🐍🔐&lt;/strong&gt;, a collection of tools, techniques, and resources to make your Python more secure&lt;/em&gt;*&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All of your production and client-facing code should be written with security in mind&lt;/li&gt;
&lt;li&gt;This list features a few resources I’ve heard of such as &lt;a href="https://hackernoon.com/10-common-security-gotchas-in-python-and-how-to-avoid-them-e19fbe265e03"&gt;Anthony Shaw’s excellent 10 common security gotchas article&lt;/a&gt; which highlights problems like input injection and depending on assert statements in production, and a few that are new to me:&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pythonsecurity.org/"&gt;OWASP (Open Web Application Security Project) Python Resources&lt;/a&gt; at pythonsecurity.org&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/bandit"&gt;bandit&lt;/a&gt; a tool to find common security issues in Python
&lt;ul&gt;
&lt;li&gt;bandit features a lot of useful plugins, that test for issues like:
&lt;ul&gt;
&lt;li&gt;hardcoded password strings&lt;/li&gt;
&lt;li&gt;leaving flask debug on in production&lt;/li&gt;
&lt;li&gt;using exec() in your code&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing"&gt;&amp;amp; more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://libraries.io/pypi/detect-secrets"&gt;detect-secrets&lt;/a&gt;, a tool to detect secrets left accidentally in a Python codebase&lt;/li&gt;
&lt;li&gt;&amp;amp; lots more like resources for learning about security concepts like cryptography&lt;/li&gt;
&lt;li&gt;See the &lt;a href="https://github.com/guardrailsio/awesome-python-security"&gt;full list&lt;/a&gt; for more&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6: &lt;a href="https://github.com/tylerwince/pydbg"&gt;pydbg&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python implementation of the Rust &lt;code&gt;dbg&lt;/code&gt; macro&lt;/li&gt;
&lt;li&gt;Best seen with an example. Rather than printing things you want to inspect, you:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    a = 2
    b = 3

    dbg(a+b)

    def square(x: int) -&amp;gt; int:
        return x * x

    dbg(square(a))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;outputs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [testfile.py:4] a+b = 5
    [testfile.py:9] square(a) = 4
&lt;/code&gt;&lt;/pre&gt;

&lt;pstrong&gt;Extras:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brian:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pathlib + pytest tmpdir → tmp_path &amp;amp; tmp_path_factory
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.pytest.org/en/latest/tmpdir.html"&gt;https://docs.pytest.org/en/latest/tmpdir.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;These two new fixtures (as of pytest 3.9) act like the good old tmpdir and tmpdir_factory, but return pathlib Path objects. Awesome.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Michael:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.papercall.io/art-of-python"&gt;&lt;em&gt;The Art of Python&lt;/em&gt;&lt;/a&gt; is a miniature arts festival at &lt;a href="https://us.pycon.org/"&gt;PyCon North America 2019&lt;/a&gt;, focusing on narrative, performance, and visual art. We intend to encourage and showcase novel art that helps us share our emotionally charged experiences of programming (particularly in Python). We hope that by attending, our audience will discover new aspects of empathy and rapport, and find a different kind of delight and perspective than might otherwise be expected at a large conference.&lt;/li&gt;
&lt;li&gt;StackOverflow Survey is Open! &lt;a href="https://stackoverflow.az1.qualtrics.com/jfe/form/SV_1RGiufc1FCJcL6B"&gt;https://stackoverflow.az1.qualtrics.com/jfe/form/SV_1RGiufc1FCJcL6B&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bleepingcomputer.com/news/security/numpy-is-awaiting-fix-for-critical-remote-code-execution-bug/"&gt;NumPy Is Awaiting Fix for Critical Remote Code Execution Bug&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;via Doug Sheehan&lt;/li&gt;
&lt;li&gt;The issue was raised on January 16 and affects &lt;a href="https://pypi.org/project/numpy/"&gt;NumPy&lt;/a&gt; versions 1.10 (released in 2015) through 1.16, which is the latest release at the moment, released on January 14&lt;/li&gt;
&lt;li&gt;The problem is with the '&lt;a href="https://pythontips.com/2013/08/02/what-is-pickle-in-python/"&gt;pickle&lt;/a&gt;' module, which is used for transforming Python object structures into a format that can be stored on disk or in databases, or that allows delivery across a network.&lt;/li&gt;
&lt;li&gt;The issue was &lt;a href="https://github.com/numpy/numpy/issues/12759"&gt;reported&lt;/a&gt; by security researcher &lt;a href="https://github.com/nanshihui"&gt;Sherwel Nan&lt;/a&gt;, who says that if a Python application loads malicious data via the &lt;code&gt;numpy.load&lt;/code&gt; function  an attacker  can obtain remote code execution on the machine.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Get your google data
&lt;ul&gt;
&lt;li&gt;All google docs in MS Office format via &lt;a href="https://takeout.google.com/settings/takeout"&gt;https://takeout.google.com/settings/takeout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;All Gmail in MBOX format from there as well&lt;/li&gt;
&lt;li&gt;Hint: Start with nothing selected ;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Nina&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I’m teaching a two day &lt;a href="https://frontendmasters.com/workshops/intro-to-python/"&gt;Intro&lt;/a&gt; and &lt;a href="https://frontendmasters.com/workshops/intermediate-python/"&gt;Intermediate&lt;/a&gt; Python course on March 19th and 20th. The class will live-stream for &lt;strong&gt;free&lt;/strong&gt; &lt;a href="https://frontendmasters.com/"&gt;here&lt;/a&gt; on each day of or join in-person from downtown Minneapolis. All of the course materials will be released for free as well.&lt;/li&gt;
&lt;li&gt;I recently recorded a series of videos with Carlton Gibson (Django maintainer) on developing Django Web Apps with VS Code, deploying them to Azure with a few clicks, setting up a Continuous Integration / Continuous Delivery pipeline, and creating serverless apps. Watch the series here: &lt;a href="https://aka.ms/python-videos"&gt;https://aka.ms/python-videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I’ll be a mentor at a brand new hatchery event at PyCon US 2019, mentored sprints for diverse beginners organized by Tania Allard. The goal is to help underrepresented folks at PyCon contribute to open source in a supportive environment. The details will be located &lt;a href="https://us.pycon.org/2019/hatchery/mentoredsprints/"&gt;here&lt;/a&gt; (currently a placeholder) when they’re finalized.&lt;/li&gt;
&lt;li&gt;Catch my talk about &lt;a href="https://2019.pycascades.com/talks/light-up-your-life-with-python-and-leds/"&gt;electronics projects in Python with LEDs at PyCascades&lt;/a&gt; in Seattle on February 24th. Currently tickets are still for sale. &lt;/li&gt;
&lt;li&gt;If you haven’t tried the &lt;a href="https://code.visualstudio.com/docs/languages/python?WT.mc_id=pythonbytes-podcast-ninaz"&gt;Python extension for VS Code&lt;/a&gt;, now is a great time. The &lt;a href="https://blogs.msdn.microsoft.com/pythonengineering/2018/12/13/python-in-visual-studio-code-december-2018-release/?WT.mc_id=pythonbytes-podcast-ninaz"&gt;December release&lt;/a&gt; included some killer features, such as remote Jupyter support, and exporting Python files as Jupyter notebooks. Keep up with future releases at the &lt;a href="https://blogs.msdn.microsoft.com/pythonengineering/?WT.mc_id=pythonbytes-podcast-ninaz"&gt;Python at Microsoft blog&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;pokes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Q: What do you call a snake that only eats desert? A: A pie-thon. (might not make sense read out loud)&lt;/li&gt;
&lt;li&gt;Q: How do you measure a python? A: In inches. They don't have any feet! &lt;/li&gt;
&lt;li&gt;Q: What is a python’s favorite subject? Hiss-tory!&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#116 So you want Python in a 3D graphics engine?</title><link>https://pythonbytes.fm/episodes/show/116/so-you-want-python-in-a-3d-graphics-engine</link><guid>2e5884a2-1ca6-4d18-a058-35ddc136c8c6</guid><enclosure url="https://pythonbytes.fm/episodes/download/116/so-you-want-python-in-a-3d-graphics-engine.mp3" length="17298643" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Wed, 06 Feb 2019 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>So you want Python in a 3D graphics engine?</itunes:title><itunes:episode>116</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:17:56</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://just-taking-a-ride.com/inside_python_dict/chapter1.html"&gt;&lt;strong&gt;Inside python dict — an explorable explanation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Interactive tutorial on dictionaries
&lt;ul&gt;
&lt;li&gt;Searching efficiently in a list&lt;/li&gt;
&lt;li&gt;Why are hash tables called has tables?&lt;/li&gt;
&lt;li&gt;Putting it all together to make an “almost”-Python-dict&lt;/li&gt;
&lt;li&gt;How Python dict really works internally&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Yes this is a super deep dive, but wow it’s cool.&lt;/li&gt;
&lt;li&gt;Tons of the code is runnable right there in the web page, including moving visual representations, highlighted code with current line of code highlighted.&lt;/li&gt;
&lt;li&gt;Some examples allow you to edit values and play with stuff.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #2:&lt;/strong&gt;  &lt;a href="https://github.com/20tab/UnrealEnginePython"&gt;&lt;strong&gt;Embed Python in Unreal Engine 4&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You may notice a theme throughout my set of picks on this episode&lt;/li&gt;
&lt;li&gt;Games built on Unreal Engine 4 include
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Fortnite:_Save_the_World"&gt;&lt;em&gt;Fortnite: Save the World&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Gears_of_War_4"&gt;&lt;em&gt;Gears of War 4&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Marvel_vs._Capcom:_Infinite"&gt;&lt;em&gt;Marvel vs. Capcom: Infinite&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Moto_Racer_4"&gt;&lt;em&gt;Moto Racer 4&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/System_Shock_(upcoming_video_game)"&gt;&lt;em&gt;System Shock (remake)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Plugin embedding a whole Python VM in Unreal Engine 4 (both the editor and runtime).&lt;/li&gt;
&lt;li&gt;This means you can use the plugin to write other plugins, to automate tasks, to write unit tests and to implement gameplay elements.&lt;/li&gt;
&lt;li&gt;Here is an &lt;a href="https://github.com/20tab/UnrealEnginePython/blob/master/tutorials/YourFirstAutomatedPipeline.md"&gt;example usage&lt;/a&gt;. It’s a really nice overview and tutorial for the editor.&lt;/li&gt;
&lt;li&gt;For game elements, check out &lt;a href="https://github.com/20tab/UnrealEnginePython/blob/master/tutorials/YourFirstAutomatedPipeline.md"&gt;this section&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #3: Redirecting stdout with contextlib&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When I want to test the stdout output of some code, that’s easy, I grab the &lt;a href="https://docs.pytest.org/en/latest/capture.html#accessing-captured-output-from-a-test-function"&gt;capsys fixture&lt;/a&gt; from pytest.&lt;/li&gt;
&lt;li&gt;But what if you want to grab the stdout of a method NOT while testing?&lt;/li&gt;
&lt;li&gt;Enter &lt;code&gt;[contextlib.redirect_stdout(new_target)](https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;so cool. And very easy to read.&lt;/li&gt;
&lt;li&gt;ex:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    f = io.StringIO()
    with redirect_stdout(f):
        help(pow)
    s = f.getvalue()
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;also a version for &lt;code&gt;stderr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://www.panda3d.org/"&gt;Panda3D&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Kolja Lubitz&lt;/li&gt;
&lt;li&gt;Panda3D is an open-source, completely free-to-use engine for realtime 3D games, visualizations, simulations, experiments&lt;/li&gt;
&lt;li&gt;Not just games, could be science as well!&lt;/li&gt;
&lt;li&gt;The full power of the graphics card is exposed through an easy-to-use API. Panda3D combines the speed of C++ with the ease of use of Python to give you a fast rate of development without sacrificing on performance.&lt;/li&gt;
&lt;li&gt;Features:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Platform Portability&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexible Asset Handling&lt;/strong&gt;: Panda3D includes command-line tools for processing and optimizing source assets, allowing you to automate and script your content production pipeline to fit your exact needs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Library Bindings&lt;/strong&gt;: Panda3D comes with out-of-the-box support for many popular third-party libraries, such as the Bullet physics engine, Assimp model loader, OpenAL&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance Profiling&lt;/strong&gt;: Panda3D includes pstats — an over-the-network profiling system designed to help you understand where every single millisecond of your frame time goes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://dustingram.com/articles/2018/03/05/why-pypi-doesnt-know-dependencies/"&gt;&lt;strong&gt;Why PyPI Doesn't Know Your Projects Dependencies&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some questions you may have asked:
&amp;gt; How can I produce a dependency graph for Python packages?
&amp;gt; Why doesn’t PyPI show a project’s dependencies on it’s project page?
&amp;gt; How can I get a project’s dependencies without downloading the package?
&amp;gt; Can I search PyPI and filter out projects that have a certain dependency?&lt;/li&gt;
&lt;li&gt;If everything is in &lt;code&gt;requirements.txt&lt;/code&gt;, you just might be able to, but…&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setup.py&lt;/code&gt; is dynamic. You gotta run it to see what’s needed.&lt;/li&gt;
&lt;li&gt;Dependencies might be environment specific. Windows vs Linux vs Mac, as an example.&lt;/li&gt;
&lt;li&gt;Nothing stopping someone from putting &lt;code&gt;random.choice()&lt;/code&gt; for dependencies in a &lt;code&gt;setup.py&lt;/code&gt; file. But that would be kinda evil. But could be done. (Listener homework?)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;wheel&lt;/code&gt; format is way more predictable because it limits some of this freedom. &lt;code&gt;wheel&lt;/code&gt;s don’t get run when they install, they really just get unpacked.&lt;/li&gt;
&lt;li&gt;More info on wheels: Kind of a tangent, but what why not:
&lt;ul&gt;
&lt;li&gt;From: &lt;a href="https://pythonwheels.com"&gt;https://pythonwheels.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“&lt;strong&gt;Advantages of wheels&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Faster installation for pure Python and native C extension packages.&lt;/li&gt;
&lt;li&gt;Avoids arbitrary code execution for installation. (Avoids setup.py)&lt;/li&gt;
&lt;li&gt;Installation of a C extension does not require a compiler on Linux, Windows or macOS.&lt;/li&gt;
&lt;li&gt;Allows better caching for testing and continuous integration.&lt;/li&gt;
&lt;li&gt;Creates .pyc files as part of installation to ensure they match the Python interpreter used.&lt;/li&gt;
&lt;li&gt;More consistent installs across platforms and machines.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6:  PyGame series&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via Matthew Ward&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/17/10/python-101"&gt;Learn how to program in Python by building a simple dice game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/17/12/game-framework-python"&gt;Build a game framework with Python using the PyGame module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/17/12/game-python-add-a-player"&gt;How to add a player to your Python game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/17/12/game-python-moving-player"&gt;Using PyGame to move your game character around&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/18/5/pygame-enemy"&gt;What's a hero without a villain? How to add one to your Python game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://opensource.com/article/18/7/put-platforms-python-game?sc_cid=70160000001273HAAQ"&gt;Put platforms in a Python game with PyGame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Also: Shout out to &lt;a href="https://amzn.to/2My32JC"&gt;Mission Python book: Code a Space Adventure Game!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pxtras:&lt;/p&gt;

&lt;poke (maybe, Brain feel free to pick another one):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via &lt;a href="https://twitter.com/realpython/status/1087874671763173377"&gt;@realpython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Why do Pythons live on land? They are above C-level!&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#117 Is this the end of Python virtual environments?</title><link>https://pythonbytes.fm/episodes/show/117/is-this-the-end-of-python-virtual-environments</link><guid>75a6fd95-fa51-4b3e-9c59-9821a6605936</guid><enclosure url="https://pythonbytes.fm/episodes/download/117/is-this-the-end-of-python-virtual-environments.mp3" length="27281621" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Thu, 14 Feb 2019 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Is this the end of Python virtual environments?</itunes:title><itunes:episode>117</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:28:20</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by &lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.fm/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Brian #1&lt;/strong&gt;: &lt;a href="https://medium.com/@grassfedcode/goodbye-virtual-environments-b9f8115bc2b6"&gt;&lt;strong&gt;Goodbye Virtual Environments?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by &lt;a href="https://medium.com/@grassfedcode"&gt;Chad Smith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;venv’s are great but they introduce some problems as well:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Learning curve:&lt;/strong&gt; explaining “virtual environments” to people who just want to jump in and code is not always easy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Terminal isolation:&lt;/strong&gt; Virtual Environments are activated and deactivated on a per-terminal basis&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cognitive overhead:&lt;/strong&gt; Setting up, remembering installation location, activating/deactivating&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0582/"&gt;PEP 582 — Python local packages directory&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;This PEP proposes to add to Python a mechanism to automatically recognize a &lt;code&gt;__pypackages__&lt;/code&gt;directory and prefer importing packages installed in this location over user or global site-packages. This will avoid the steps to create, activate or deactivate “virtual environments”. Python will use the &lt;code&gt;__pypackages__&lt;/code&gt; from the base directory of the script when present.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Try it now with &lt;a href="https://github.com/cs01/pythonloc"&gt;&lt;strong&gt;pythonloc&lt;/strong&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pythonloc&lt;/strong&gt; is a drop in replacement for &lt;code&gt;python&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt; that automatically recognizes a &lt;code&gt;__pypackages__&lt;/code&gt; directory and prefers importing packages installed in this location over user or global site-packages. If you are familiar with node, &lt;code&gt;__pypackages__&lt;/code&gt; works similarly to &lt;code&gt;node_modules&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Instead of running &lt;code&gt;python&lt;/code&gt; you run &lt;code&gt;pythonloc&lt;/code&gt; and the &lt;code&gt;__pypackages__&lt;/code&gt; path will automatically be searched first for packages. And instead of running &lt;code&gt;pip&lt;/code&gt; you run &lt;code&gt;piploc&lt;/code&gt; and it will install/uninstall from &lt;code&gt;__pypackages__&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #2&lt;/strong&gt;: &lt;a href="https://webassets.readthedocs.io/en/latest/index.html"&gt;&lt;strong&gt;webassets&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bundles and minifies CSS &amp;amp; JS files&lt;/li&gt;
&lt;li&gt;Been doing a lot of work to rank higher on the sites&lt;/li&gt;
&lt;li&gt;That lead me to &lt;a href="https://developers.google.com/speed/pagespeed/insights"&gt;&lt;strong&gt;Google’s Lighthouse&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Despite 25ms response time to the network, Google thought my site was “kinda slow”, yikes!&lt;/li&gt;
&lt;li&gt;webassets has integration for the big three: Django, Flask, &amp;amp; Pyramid.
&lt;ul&gt;
&lt;li&gt;But I prefer to just generate them and serve them off disk&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    def build_asset(env: webassets.Environment, 
                   files: List[str], 
                   filters: str, 
                   output: str):
        bundle = webassets.Bundle(
            *files,
            filters=filters,
            output=output,
            env=env
        )
        bundle.build(force=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;pstrong&gt;Brian #3&lt;/strong&gt;: &lt;strong&gt;Bernat on Python Packaging&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3 part series by Bernat Gabor
&lt;ul&gt;
&lt;li&gt;Maintainer of tox and virtualenv Python packages.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bernat.tech/pep-517-and-python-packaging/"&gt;The State of Python Packaging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bernat.tech/pep-517-518/"&gt;Python packaging - Past, Present, Future&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.bernat.tech/growing-pain/"&gt;Python packaging - Growing Pains&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #4&lt;/strong&gt;: &lt;a href="https://medium.com/@yeraydiazdiaz/what-the-mock-cheatsheet-mocking-in-python-6a71db997832"&gt;&lt;strong&gt;What the mock? — A cheatsheet for mocking in Python&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nice introduction&lt;/li&gt;
&lt;li&gt;Some examples&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    @mock.patch('work.os')
        def test_using_decorator(self, mocked_os):
            work_on()
    mocked_os.getcwd.assert_called_once()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        def test_using_context_manager(self):
            with mock.patch('work.os') as mocked_os:
                work_on()
    mocked_os.getcwd.assert_called_once()
&lt;/code&gt;&lt;/pre&gt;

&lt;pstrong&gt;Brian #5&lt;/strong&gt;:  &lt;a href="https://medium.com/@saronyitbarek/transitions-the-easiest-way-to-improve-your-tech-talk-ebe4d40a3257"&gt;&lt;strong&gt;Transitions: The easiest way to improve your tech talk&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By Saron Yitbarek&lt;/li&gt;
&lt;li&gt;Jeff Atwood of CodingHorror noted “The people who can write and communicate effectively are, all too often, the only people who get heard. They get to set the terms of the debate.”&lt;/li&gt;
&lt;li&gt;Effectively presenting is part of effective communication.&lt;/li&gt;
&lt;li&gt;I love the focus of this article. Focused on one little aspect of improving the performance of a tech talk.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6&lt;/strong&gt;: &lt;a href="https://discuss.python.org/t/2019-steering-council-election-results/824"&gt;&lt;strong&gt;Steering council announced&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our new leaders are
&lt;ul&gt;
&lt;li&gt;Barry Warsaw&lt;/li&gt;
&lt;li&gt;Brett Cannon&lt;/li&gt;
&lt;li&gt;Carol Willing&lt;/li&gt;
&lt;li&gt;Guido van Rossum&lt;/li&gt;
&lt;li&gt;Nick Coghlan&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Via Joe Carey&lt;/li&gt;
&lt;li&gt;We both think it’s great Guido is on the council.&lt;/li&gt;
&lt;/ul&gt;

&lt;pxtras: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Brian: Got interviewed on IT Energizer Podcast:
&lt;ul&gt;
&lt;li&gt;The one with Brian: &lt;a href="https://itcareerenergizer.com/e123/"&gt;https://itcareerenergizer.com/e123/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The one with Michael: &lt;a href="https://itcareerenergizer.com/e83/"&gt;https://itcareerenergizer.com/e83/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pylatam.org/"&gt;PyCon LATAM&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;August 29, Puerto Vallarta, Mexico&lt;/li&gt;
&lt;li&gt;We should go. Anyone want to sponsor our travel/hotel to this event?&lt;/li&gt;
&lt;li&gt;CFP open till May 31, 2019,  &lt;a href="https://www.pylatam.org/en/speaking/"&gt;https://www.pylatam.org/en/speaking/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;poke:&lt;/p&gt;

&lt;p&gt;From the list from Ant, my votes. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; What's the second movie about a database engineer called?
&lt;strong&gt;A:&lt;/strong&gt; The SQL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;!false&lt;/strong&gt;
It's funny 'cause it's true.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A programmer's spouse tells them, "Run to the store and pick up a loaf of bread. If they have eggs, get a dozen."
The programmer comes home with 12 loaves of bread.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#118 Better Python executable management with pipx</title><link>https://pythonbytes.fm/episodes/show/118/better-python-executable-management-with-pipx</link><guid>18bc2103-2687-4abb-aaf6-512d43196d4b</guid><enclosure url="https://pythonbytes.fm/episodes/download/118/better-python-executable-management-with-pipx.mp3" length="24945928" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Fri, 22 Feb 2019 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Better Python executable management with pipx</itunes:title><itunes:episode>118</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:25:54</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by &lt;a href="https://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Brian #1&lt;/strong&gt;: &lt;a href="https://pythonhosted.org/Frozen-Flask/"&gt;&lt;strong&gt;Frozen-Flask&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Frozen-Flask freezes a &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; application into a set of static files. The result can be hosted without any server-side software other than a traditional web server.”&lt;/li&gt;
&lt;li&gt;2012 tutorial, &lt;a href="https://nicolas.perriault.net/code/2012/dead-easy-yet-powerful-static-website-generator-with-flask/"&gt;&lt;strong&gt;Dead easy yet powerful static website generator with Flask&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some of it is out of date, but it does point to the power of Frozen-Flask, as well as highlight a cool plugin, &lt;a href="https://pythonhosted.org/Flask-FlatPages/"&gt;Flask-FlatPages&lt;/a&gt;, which allows pages from markdown.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #2&lt;/strong&gt;: &lt;a href="https://github.com/pipxproject/pipx"&gt;&lt;strong&gt;pipx&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by Chad Smith&lt;/li&gt;
&lt;li&gt;Last week we spoke about &lt;a href="https://github.com/cs01/pythonloc"&gt;pythonloc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Execute binaries from Python packages in isolated environments&lt;/li&gt;
&lt;li&gt;&lt;em&gt;"binary" to describe a CLI application that can be run directly from the command line&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Features
&lt;ul&gt;
&lt;li&gt;Safely install packages to isolated virtual environments, while globally exposing their CLI applications so you can run them from anywhere&lt;/li&gt;
&lt;li&gt;Easily list, upgrade, and uninstall packages that were installed with pipx&lt;/li&gt;
&lt;li&gt;Run the latest version of a CLI application from a package in a temporary virtual environment, leaving your system untouched after it finishes&lt;/li&gt;
&lt;li&gt;Run binaries from the &lt;code&gt;__pypackages__&lt;/code&gt; directory per PEP 582 as companion tool to &lt;a href="https://github.com/cs01/pythonloc"&gt;pythonloc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Runs with regular user permissions, never calling &lt;code&gt;sudo pip install ...&lt;/code&gt; (you aren't doing that, are you? 😄).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You can globally install a CLI application by running: &lt;code&gt;pipx install PACKAGE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;"Just the “pipx upgrade-all” command is already a huge win over pipsi"&lt;/li&gt;
&lt;li&gt;Check out &lt;a href="https://github.com/pipxproject/pipx#how-does-this-compare-to-pipsi"&gt;How does this compare to pipsi?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #3:&lt;/strong&gt; &lt;a href="https://veekaybee.github.io/2019/02/13/data-science-is-different/"&gt;&lt;strong&gt;Data science is different now&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vicki Boykis&lt;/li&gt;
&lt;li&gt;There’s lots of buzz around data science.&lt;/li&gt;
&lt;li&gt;This has resulted in loads of new data scientists looking for junior level positions.
&lt;ul&gt;
&lt;li&gt;Coming from boot camps, MOOCs, self taught, remote degrees, and other training.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;“.. now that data science has changed from a buzzword to something even larger companies outside of the Silicon Valley bubble hire for, positions have not only become more codified, but with more rigorous entry requirements that will prefer people with previous data science experience every time.”&lt;/li&gt;
&lt;li&gt;“ … the market can be very hard, and very discouraging for the flood of beginners.”&lt;/li&gt;
&lt;li&gt;Data science is a misleading job req
&lt;ul&gt;
&lt;li&gt;“The reality is that “data science” has never been as much about machine learning as it has about cleaning, shaping data, and moving it from place to place.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Advice:
&lt;ul&gt;
&lt;li&gt;Don’t get into data science (this amuses me).&lt;/li&gt;
&lt;li&gt;“Don’t do what everyone else is doing, because it won’t differentiate you.”
&lt;ul&gt;
&lt;li&gt;“It’s much easier to come into a data science and tech career through the “back door”, i.e. starting out as a junior developer, or in DevOps, project management, and, perhaps most relevant, as a data analyst, information manager, or similar, than it is to apply point-blank for the same 5 positions that everyone else is applying to. It will take longer, but at the same time as you’re working towards that data science job, you’re learning critical IT skills that will be important to you your entire career.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Learn the skills needed for data science today
&lt;ul&gt;
&lt;li&gt;Creating Python packages&lt;/li&gt;
&lt;li&gt;Putting R in production&lt;/li&gt;
&lt;li&gt;Optimizing Spark jobs so they run more efficiently&lt;/li&gt;
&lt;li&gt;Version controlling data&lt;/li&gt;
&lt;li&gt;Making models and data reproducible&lt;/li&gt;
&lt;li&gt;Version controlling SQL&lt;/li&gt;
&lt;li&gt;Building and maintaining clean data in data lakes&lt;/li&gt;
&lt;li&gt;Tooling for time series forecasting at scale&lt;/li&gt;
&lt;li&gt;Scaling sharing of Jupyter notebooks&lt;/li&gt;
&lt;li&gt;Thinking about systems for clean data&lt;/li&gt;
&lt;li&gt;Lots of JSON&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Data science is turning more and more into a mostly engineering field.&lt;/li&gt;
&lt;li&gt;Data scientists need to have “good generalist engineering skills with a data background.”&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #4&lt;/strong&gt;: &lt;a href="https://github.com/RustPython/RustPython"&gt;&lt;strong&gt;RustPython&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via &lt;a href="https://twitter.com/fredrikaverpil/status/1091782433987543043"&gt;Fredrik Averpil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Python-3 (CPython &amp;gt;= 3.5.0) Interpreter written in Rust.&lt;/li&gt;
&lt;li&gt;Seems pretty active: Latest commit ac95b61 an hour ago…&lt;/li&gt;
&lt;li&gt;Goals
&lt;ul&gt;
&lt;li&gt;Full Python-3 environment entirely in Rust (not CPython bindings)&lt;/li&gt;
&lt;li&gt;A clean implementation without compatibility hacks&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Contributing
&lt;ul&gt;
&lt;li&gt;To start contributing, there are a lot of things that need to be done.&lt;/li&gt;
&lt;li&gt;Most tasks are listed in the issue tracker. Check issues labeled with good first issue if you wish to start coding.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rust does have direct WebAssembly support…&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #5&lt;/strong&gt;: &lt;a href="https://realpython.com/jupyter-notebook-introduction/"&gt;&lt;strong&gt;Jupyter Notebook: An Introduction&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mike Driscoll on RealPython&lt;/li&gt;
&lt;li&gt;Not the “all the cool things you can do with it”, but the “really, how do I start” tutuorial.
&lt;ul&gt;
&lt;li&gt;I think it should have included a mention of installing it in a venv and how to use &lt;code&gt;%pip install&lt;/code&gt;, so I’ll include those things in these notes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Installing with &lt;code&gt;pip install jupyter&lt;/code&gt; . 
&lt;ul&gt;
&lt;li&gt;Also a note that Jupyter is included with the Anaconda distribution.&lt;/li&gt;
&lt;li&gt;Note: Like everything else, I always install it in a virtual environment, if using &lt;code&gt;pip&lt;/code&gt;, so the real installation instructions I recommend is:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;python3 -m venv venv&lt;/code&gt; &lt;code&gt;--``prompt jupyter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source venv/bin/activate&lt;/code&gt; OR &lt;code&gt;venv\scripts\activate.bat&lt;/code&gt; if windows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install jupyter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install [HTML_REMOVED]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jupyter notebook&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;That will launch a localhost web interface.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Creating a new notebook within the web interface.&lt;/li&gt;
&lt;li&gt;Changing the “Untitled” name by clicking on the name. 
&lt;ul&gt;
&lt;li&gt;This was not obvious to me.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Running cells, including the shift-enter keyboard shortcut.&lt;/li&gt;
&lt;li&gt;A run through the menu, stopping at non-obvious places
&lt;ul&gt;
&lt;li&gt;“File” has “Save and Checkpoint” which is super cool.&lt;/li&gt;
&lt;li&gt;“Edit” has cell cut, copy, paste. But also has delete, split, merge, and cell movement.&lt;/li&gt;
&lt;li&gt;“Cell” menu has lots of cool run options, like “Run all above” and “Run all below” and others.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Not just Python, but you can have a terminal sessions and more from within Jupyter.&lt;/li&gt;
&lt;li&gt;A look at the “Running” tab.&lt;/li&gt;
&lt;li&gt;Quick overview of the markdown support for markdown cells&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exporting notebooks using &lt;code&gt;jupyter nbconvert&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extra notes on installing packages from Jupyter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To pip install from the notebook, do this: &lt;code&gt;%pip install numpy&lt;/code&gt; in a code cell.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6&lt;/strong&gt;: &lt;a href="https://www.jetbrains.com/research/python-developers-survey-2018/"&gt;&lt;strong&gt;Python Developers Survey 2018 Results&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python usage as a main language is up 5 percentage points from 79% in 2017 when Python Software Foundation conducted its previous survey.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What do you use Python for? (2018/2017)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;59%/51% Data analysis&lt;/li&gt;
&lt;li&gt;56%/54% Web dev&lt;/li&gt;
&lt;li&gt;39%/32% ML&lt;/li&gt;
&lt;li&gt;Web development is the only category with a large gap (56% vs. 36%) separating those using Python as their main language vs. as a supplementary language. For other types of development, the differences are much smaller.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What do you use Python for the most? (single answer)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;29%/29% web dev&lt;/li&gt;
&lt;li&gt;17%/17% data analysis&lt;/li&gt;
&lt;li&gt;11%/8% ML&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Like last year&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;27% (Web development) ≈ 28% (Scientific development) 
&lt;ul&gt;
&lt;li&gt;Science = 17% + 11% for Data analysis + Machine learning&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python 3 vs Python 2&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;84% Python 3 vs 16% Python 2. The use of Python 3 continues to grow rapidly. According to the latest research in 2017, 75% were using Python 3 compared with 25% for Python 2.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Top 4 web frameworks&lt;/strong&gt; (majority to the first two):
&lt;ul&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Tornado&lt;/li&gt;
&lt;li&gt;Pyramid&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Databases&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ORMs
&lt;ul&gt;
&lt;li&gt;SQLAlchemy and Django ORM tied&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Extras&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Mentored sprints for diverse beginners” at PyCon
&lt;ul&gt;
&lt;li&gt;“&lt;strong&gt;A newcomer’s introduction to contributing to an open source project”&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;https://us.pycon.org/2019/hatchery/mentoredsprints/&lt;/li&gt;
&lt;li&gt;Call for applications for projects open Feb 8 to March 14&lt;/li&gt;
&lt;li&gt;Call for contributors, participants in the sprint also open Feb 8 to March 14&lt;/li&gt;
&lt;li&gt;“&lt;strong&gt;If you are wondering if this event is for you: it definitely is and we would love to have you taking part in this sprint.”&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;“This mentored sprint will take place on Saturday, May 4th, 2019 from 2:35pm to 6:30pm”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Joke&lt;/strong&gt;:
via Florian
Q: If you have some pseudo code (say in sample.txt) how do you most easily convert it to Python?
A: Change the extension to .py &lt;/p&gt;

&lt;p&gt;Extra Joke: &lt;a href="https://www.youtube.com/watch?v=3UsKYsLSGpU"&gt;&lt;strong&gt;Python Song (with chapters!)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</description></item><item><title>#119 Assorted files as Django ORM backends with Alkali</title><link>https://pythonbytes.fm/episodes/show/119/assorted-files-as-django-orm-backends-with-alkali</link><guid>96021ebe-2259-4f04-aea6-7ae5125ea15f</guid><enclosure url="https://pythonbytes.fm/episodes/download/119/assorted-files-as-django-orm-backends-with-alkali.mp3" length="21419528" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Tue, 26 Feb 2019 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>Assorted files as Django ORM backends with Alkali</itunes:title><itunes:episode>119</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:22:13</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by &lt;a href="https://pythonbytes.fm/datadog"&gt;&lt;strong&gt;pythonbytes.fm/datadog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Special guests&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/ericchou/"&gt;Eric Chou&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/dbader_org/"&gt;Dan Bader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/treyhunner"&gt;Trey Hunner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #1:&lt;/strong&gt; &lt;a href="https://blogs.dropbox.com/tech/2019/02/incrementally-migrating-over-one-million-lines-of-code-from-python-2-to-python-3/"&gt;&lt;strong&gt;Incrementally migrating over one million lines of code from Python 2 to Python 3&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Weighing in at over 1 million lines of Python logic, we had a massive surface area for potential issues in our migration from Python 2 to Python 3&lt;/li&gt;
&lt;li&gt;First Py3 commit, hack week 2015
&lt;ul&gt;
&lt;li&gt;Unfortunately, it was clear that many features were completely broken by the upgrade&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Official start H1 2017&lt;/li&gt;
&lt;li&gt;Armed with &lt;a href="http://mypy-lang.org/"&gt;Mypy&lt;/a&gt;, a static type-checking tool that we had adopted in the interim year, they made substantial strides towards enabling the Python 3 migration:
&lt;ul&gt;
&lt;li&gt;Ported our custom fork of Python to version 3.5&lt;/li&gt;
&lt;li&gt;Upgraded some Python dependencies to Python 3-compatible versions, and forked some others (e.g. &lt;code&gt;babel&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Modified some Dropbox client code to be Python 3 compatible&lt;/li&gt;
&lt;li&gt;Set up automated jobs in our continuous integration (CI) to run the existing unit tests with the Python 3 interpreter, and Mypy type-checking in Python 3 mode&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Crucially, the automated tests meant that we could be certain that the limited Python 3 compatibility that existed would not have regressed when the project was picked up again.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Before we could begin working on migrating any of our application logic, we had to ensure that we could load the Python 3 interpreter and run until the entry point of the application. In the past, we had used “freezer” scripts to do this for us. However, none of these had support for Python 3 around this time, so in late 2016, we built a custom, more native solution which we internally referred to as “Anti-freeze” (more on that in &lt;a href="https://blogs.dropbox.com/tech/2018/09/how-we-rolled-out-one-of-the-largest-python-3-migrations-ever/"&gt;the initial Python 3 migration blog post&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Incrementally enabling unit tests and type-checking&lt;/li&gt;
&lt;li&gt;‘Straddling’ Python 2 and Python 3&lt;/li&gt;
&lt;li&gt;Letting it bake&lt;/li&gt;
&lt;li&gt;Learnings (tl;dr)
&lt;ul&gt;
&lt;li&gt;Unit tests and typing are invaluable.&lt;/li&gt;
&lt;li&gt;String encoding in Python is hard.&lt;/li&gt;
&lt;li&gt;Incrementally migrate to Python 3 for great profit.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Eric #2:&lt;/strong&gt; &lt;strong&gt;Network Automation Development with Python (for fun and for profit)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Terms: NetDevOps (Cisco), NRE (Network Reliability Engineer)&lt;/li&gt;
&lt;li&gt;Libraires: &lt;a href="https://github.com/ktbyers/netmiko"&gt;Netmiko&lt;/a&gt;, &lt;a href="https://napalm-automation.net/"&gt;NAPALM&lt;/a&gt;, &lt;a href="https://github.com/nornir-automation/nornir"&gt;Nornir&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Free Lab Resources: &lt;a href="https://labs.networkreliability.engineering/"&gt;NRE Labs&lt;/a&gt;, &lt;a href="https://dcloud.cisco.com/"&gt;dCloud&lt;/a&gt;, &lt;a href="https://developer.cisco.com/"&gt;DevNet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Conferences: AnsibleFest (network automation track), &lt;a href="https://developer.cisco.com/devnetcreate/2019"&gt;Cisco DevnetCreate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Trey #3&lt;/strong&gt;: &lt;a href="https://github.com/kneufeld/alkali"&gt;Alkali file as DB&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you have structured data you want to query (like RSS feed, CSV, JSON, or any custom format of your own creation) you can use a Django ORM-like syntax to query it&lt;/li&gt;
&lt;li&gt;Save it to the same format or a different format because you control both the reading and the writing&lt;/li&gt;
&lt;li&gt;Kurt is at PyCascades so I got to chat with him about this&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Dan #4:&lt;/strong&gt; &lt;a href="https://www.cs.cmu.edu/news/carnegie-mellon-launches-undergraduate-degree-artificial-intelligence"&gt;&lt;strong&gt;Carnegie Mellon Launches Undergraduate Degree in Artificial Intelligence&lt;/strong&gt;&lt;/a&gt; &lt;em&gt;*&lt;/em&gt;*&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Carnegie Mellon University's School of Computer Science will offer a new &lt;a href="https://www.cs.cmu.edu/bs-in-artificial-intelligence"&gt;undergraduate degree in artificial intelligence&lt;/a&gt; beginning this fall&lt;/li&gt;
&lt;li&gt;The first offered by a U.S. university&lt;/li&gt;
&lt;li&gt;"Specialists in artificial intelligence have never been more important, in shorter supply or in greater demand by employers," said Andrew Moore, dean of the School of Computer Science.&lt;/li&gt;
&lt;li&gt;The bachelor's degree in AI will focus more on how complex inputs — such as vision, language and huge databases — are used to make decisions or enhance human capabilities&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #5:&lt;/strong&gt; &lt;a href="https://github.com/gmarull/asyncqt"&gt;&lt;strong&gt;asyncio + PyQt5/PySide2&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via &lt;a href="https://twitter.com/DahlitzF"&gt;Florian Dahlitz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asyncqt&lt;/code&gt; is an implementation of the &lt;code&gt;PEP 3156&lt;/code&gt; event-loop with Qt. &lt;/li&gt;
&lt;li&gt;This package is a fork of &lt;code&gt;quamash&lt;/code&gt; focusing on modern Python versions, with some extra utilities, examples and simplified CI.&lt;/li&gt;
&lt;li&gt;Allows wiring events to Qt’s event loop that run on asyncio and leverage it internally.&lt;/li&gt;
&lt;li&gt;Example: &lt;a href="https://github.com/gmarull/asyncqt/blob/master/examples/aiohttp_fetch.py"&gt;https://github.com/gmarull/asyncqt/blob/master/examples/aiohttp_fetch.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Dan #6:&lt;/strong&gt; &lt;a href="https://hackernoon.com/4-things-i-want-to-see-in-python-4-0-85b853e86a88"&gt;&lt;strong&gt;4 things I want to see in Python 4.0&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JIT as a first class feature&lt;/li&gt;
&lt;li&gt;A stable .0 release&lt;/li&gt;
&lt;li&gt;Static type hinting&lt;/li&gt;
&lt;li&gt;A GPU story for multiprocessing&lt;/li&gt;
&lt;li&gt;More community contributions&lt;/li&gt;
&lt;/ol&gt;

&lt;pstrong&gt;Extras:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Michael: My Python Async webcast &lt;a href="https://twitter.com/pycharm/status/1098662428030709762"&gt;&lt;strong&gt;recording is now available&lt;/strong&gt;&lt;/a&gt;.
Michael: PyCon Israel in the first week of June (&lt;a href="https://il.pycon.org/2019/"&gt;https://il.pycon.org/2019/&lt;/a&gt;), and the CFP opened today: &lt;a href="https://cfp.pycon.org.il/conference/cfp"&gt;https://cfp.pycon.org.il/conference/cfp&lt;/a&gt;
Dan: &lt;a href="https://realpython.com/products/python-basics-book/"&gt;Python Basics Book&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Joke:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Q:&lt;/strong&gt; Why did the developer ground their kid?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A:&lt;/strong&gt; They weren't telling the &lt;strong&gt;truthy&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>#120 AWS, MongoDB, and the Economic Realities of Open Source and more</title><link>https://pythonbytes.fm/episodes/show/120/aws-mongodb-and-the-economic-realities-of-open-source-and-more</link><guid>7e11bb7a-ea01-4cd1-b265-5bdae04af2c6</guid><enclosure url="https://pythonbytes.fm/episodes/download/120/aws-mongodb-and-the-economic-realities-of-open-source-and-more.mp3" length="24479997" type="audio/mpeg"></enclosure><category>Technology</category><pubDate>Tue, 05 Mar 2019 00:00:00 -0800</pubDate><itunes:author>Michael Kennedy (@mkennedy)</itunes:author><itunes:title>AWS, MongoDB, and the Economic Realities of Open Source and more</itunes:title><itunes:episode>120</itunes:episode><itunes:explicit>No</itunes:explicit><itunes:subtitle></itunes:subtitle><itunes:summary></itunes:summary><itunes:duration>00:25:25</itunes:duration><itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide,
                podcast, open source, news, headlines, education,
                software developer, data science, science, cloud computing</itunes:keywords><description>&lt;p&gt;Sponsored by &lt;a href="http://pythonbytes.fm/digitalocean"&gt;&lt;strong&gt;pythonbytes.fm/digitalocean&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pstrong&gt;Brian #1:&lt;/strong&gt; &lt;a href="https://medium.com/@nnja/the-ultimate-guide-to-memorable-tech-talks-e7c350778d4b"&gt;&lt;strong&gt;The Ultimate Guide To Memorable Tech Talks&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nina Zakharenko&lt;/li&gt;
&lt;li&gt;7 part series that covers choosing a topic, writing a talk proposal, tools, planning, writing, practicing, and delivering the talk&lt;/li&gt;
&lt;li&gt;I’ve just read the tools section, and am looking forward to the rest of the series.
&lt;ul&gt;
&lt;li&gt;From the tools section: “I noticed I’d procrastinate on making the slides look good instead of focusing my time on making quality content.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #2:&lt;/strong&gt; &lt;a href="https://testdriven.io/blog/running-flask-on-kubernetes/?source=4320ef6a6395"&gt;&lt;strong&gt;Running Flask on Kubernetes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;via TestDriven.io &amp;amp; Michael Herman&lt;/li&gt;
&lt;li&gt;What is Kubernetes?&lt;/li&gt;
&lt;li&gt;A step-by-step tutorial that details how to deploy a Flask-based microservice (along with Postgres and Vue.js) to a Kubernetes cluster.&lt;/li&gt;
&lt;li&gt;Goals of tutorial
&lt;ol&gt;
&lt;li&gt;Explain what container orchestration is and why you may need to use an orchestration tool&lt;/li&gt;
&lt;li&gt;Discuss the pros and cons of using Kubernetes over other orchestration tools like Docker Swarm and Elastic Container Service (ECS)&lt;/li&gt;
&lt;li&gt;Explain the following Kubernetes primitives - Node, Pod, Service, Label, Deployment, Ingress, and Volume&lt;/li&gt;
&lt;li&gt;Spin up a Python-based microservice locally with Docker Compose&lt;/li&gt;
&lt;li&gt;Configure a Kubernetes cluster to run locally with Minikube&lt;/li&gt;
&lt;li&gt;Set up a volume to hold Postgres data within a Kubernetes cluster&lt;/li&gt;
&lt;li&gt;Use Kubernetes Secrets to manage sensitive information&lt;/li&gt;
&lt;li&gt;Run Flask, Gunicorn, Postgres, and Vue on Kubernetes&lt;/li&gt;
&lt;li&gt;Expose Flask and Vue to external users via an Ingress&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #3&lt;/strong&gt;: &lt;strong&gt;Changes in the CI landscape&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.travis-ci.com/2019-01-23-travis-ci-joins-idera-inc"&gt;Travis CI joins the Idera family&lt;/a&gt; - TravisCI blog&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/hashtag/travisAlums?src=hash&amp;amp;ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1098583889864478720&amp;amp;ref_url=https%3A%2F%2Fabout.gitlab.com%2F2019%2F02%2F21%2Fci-cd-market-consolidation%2F"&gt;#travisAlums&lt;/a&gt; on Twitter
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/alicegoldfuss/status/1098604563664420865"&gt;“TravisCI is laying off a bunch of senior engineers and other technical staff. Look at the #travisAlums hashtag and hire them!”&lt;/a&gt; - alicegoldfuss&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;options: &lt;a href="https://github.com/marketplace/category/continuous-integration"&gt;GitHub lists 17 options for CI&lt;/a&gt;, including GitLab &amp;amp; Azure Pipelines
&lt;ul&gt;
&lt;li&gt;Some relevant articles, resources:
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://about.gitlab.com/2019/02/21/ci-cd-market-consolidation/"&gt;The CI/CD market consolidation&lt;/a&gt; - GitLab article&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@anthonypjshaw/azure-pipelines-with-python-by-example-aa65f4070634"&gt;Azure Pipelines with Python — by example&lt;/a&gt; - Anthony Shaw&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tonybaloney/pytest-azurepipelines"&gt;pytest-azurepipelines&lt;/a&gt; - Anthony Shaw&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/asottile/azure-pipeline-templates"&gt;Azure Pipelines Templates&lt;/a&gt; - Anthony Sottile&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #4:&lt;/strong&gt; &lt;a href="https://github.com/zachvalenta/nginx-wsgi"&gt;Python server setup for macOS 🍎&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;what&lt;/strong&gt;: hello world for Python server setup on macOS &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;why&lt;/strong&gt;: most guides show setup on a Linux server (which makes sense) but macoS is useful for learning and for local dev&lt;/li&gt;
&lt;li&gt;STEP 1: NGINX ➡️ STATIC ASSETS&lt;/li&gt;
&lt;li&gt;STEP 2: GUNICORN ➡️ FLASK&lt;/li&gt;
&lt;li&gt;STEP 3: NGINX ➡️ GUNICORN&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Brian #5:&lt;/strong&gt; &lt;a href="https://towardsdatascience.com/learn-enough-python-to-be-useful-argparse-e482e1764e05"&gt;&lt;strong&gt;Learn Enough Python to be Useful: argparse&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to Get Command Line Arguments Into Your Scripts - Jeff Hale&lt;/li&gt;
&lt;li&gt;“argparse is the “recommended command-line parsing module in the Python standard library.” It’s what you use to get command line arguments into your program.&lt;/li&gt;
&lt;li&gt;“I couldn’t find a good intro guide for argparse when I needed one, so I wrote this article.”&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Michael #6:&lt;/strong&gt; &lt;a href="https://stratechery.com/2019/aws-mongodb-and-the-economic-realities-of-open-source/"&gt;AWS, MongoDB, and the Economic Realities of Open Source&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Related podcast: https://soundcloud.com/exponentfm/episode-159-inverted-pyramids&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Last week, from the &lt;a href="https://aws.amazon.com/blogs/aws/new-amazon-documentdb-with-mongodb-compatibility-fast-scalable-and-highly-available/"&gt;AWS blog&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Today we are launching &lt;a href="https://aws.amazon.com/documentdb/"&gt;Amazon DocumentDB (with MongoDB compatibility)&lt;/a&gt;, a fast, scalable, and highly available document database that is designed to be compatible with your existing MongoDB applications and tools. Amazon DocumentDB uses a purpose-built SSD-based storage layer, with 6x replication across 3 separate Availability Zones. The storage layer is distributed, fault-tolerant, and self-healing, giving you the the performance, scalability, and availability needed to run production-scale MongoDB workloads.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Like an increasing number of such projects, MongoDB is open source…or it was anyways. MongoDB Inc., a venture-backed company that IPO’d in October, 2017, made its core database server product available under the &lt;a href="https://en.wikipedia.org/wiki/GNU_Affero_General_Public_License"&gt;GNU Affero General Public License (AGPL)&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;AGPL extended the GPL to apply to software accessed over a network; since the software is only being used, not copied&lt;/li&gt;
&lt;li&gt;MongoDB’s Business Model&lt;/li&gt;
&lt;li&gt;We believe we have a highly differentiated business model that combines the developer mindshare and adoption benefits of open source with the economic benefits of a proprietary software subscription business model.&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;MongoDB enterprise and MongoDB atlas&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Basically, MongoDB sells three things on top of its open source database server:
&lt;ul&gt;
&lt;li&gt;Additional tools for enterprise companies to implement MongoDB&lt;/li&gt;
&lt;li&gt;A hosted service for smaller companies to use MongoDB&lt;/li&gt;
&lt;li&gt;Legal certainty&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;What AWS Sells&lt;/li&gt;
&lt;li&gt;the value of software is typically realized in three ways:
&lt;ul&gt;
&lt;li&gt;First is hardware. &lt;/li&gt;
&lt;li&gt;Second is licenses. This was Microsoft’s core business for decades: licenses sold to OEMs (for the consumer market) or to companies directly (for the enterprise market). &lt;/li&gt;
&lt;li&gt;Third is software-as-a-service.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AWS announced last week:
&amp;gt; The storage layer is distributed, fault-tolerant, and self-healing, giving you the the performance, scalability, and availability needed to run production-scale MongoDB workloads.&lt;/li&gt;
&lt;li&gt;AWS is not selling MongoDB: what they are selling is “performance, scalability, and availability.” DocumentDB is just one particular area of many where those benefits are manifested on AWS.&lt;/li&gt;
&lt;li&gt;Thus we have arrived at a conundrum for open source companies:
&lt;ul&gt;
&lt;li&gt;MongoDB leveraged open source to gain mindshare.&lt;/li&gt;
&lt;li&gt;MongoDB Inc. built a successful company selling additional tools for enterprises to run MongoDB.&lt;/li&gt;
&lt;li&gt;More and more enterprises don’t want to run their own software: they want to hire AWS (or Microsoft or Google) to run it for them, because they value performance, scalability, and availability.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;This leaves MongoDB Inc. not unlike the record companies after the advent of downloads: what they sold was not software but rather the tools that made that software usable, but those tools are increasingly obsolete as computing moves to the cloud. And now AWS is selling what enterprises really want.&lt;/li&gt;
&lt;li&gt;This tradeoff is inescapable, and it is fair to wonder if the golden age of VC-funded open source companies will start to fade (although not open source generally). The monetization model depends on the friction of on-premise software; once cloud computing is dominant, the economic model is much more challenging.&lt;/li&gt;
&lt;/ul&gt;

&lt;pstrong&gt;Extras:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/hashtag/PyTexas?src=hashtag_click"&gt;PyTexas&lt;/a&gt; 2019 at &lt;a href="https://twitter.com/hashtag/Austin?src=hashtag_click"&gt;#Austin&lt;/a&gt; on Apr 13th and 14th. Registrations now open. More info at &lt;a href="https://t.co/6ZkLqWws2F?amp=1"&gt;pytexas.org/2019/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Michael: Sorry Ant!&lt;/p&gt;

&lt;p&gt;Michael: RustPython follow up: &lt;a href="https://rustpython.github.io/"&gt;https://rustpython.github.io/&lt;/a&gt;demo/&lt;/p&gt;

&lt;pstrong&gt;Joke:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Q:&lt;/strong&gt; Why was the developer unhappy at their job?&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; They wanted arrays.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; Where did the parallel function wash its hands?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A:&lt;/strong&gt; Async&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>